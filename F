_G["__MyData"] = {}
local GDAT = _G["__MyData"] 

GDAT["KSettings"] = {};
GDAT["KSettings"]["Adonis"] = true;
GDAT["KSettings"]["HD Admin"] = true;

-- hfunction required for bypass to work!

local hfuncenabled=true
task.spawn(function()
	if hfuncenabled==false then return end
	pcall(function()
		local Settings ={
			["Adonis"] = GDAT["KSettings"]["Adonis"] or false,
			["HD Admin"] = GDAT["KSettings"]["HD Admin"] or false,
		}

		local GetFullName = game.GetFullName
		local Hook;
		Hook = hookfunction(getrenv().require, newcclosure(function(...)
			local Args = {...}

			if not checkcaller() then
				if Settings["Adonis"] then
					if (GetFullName(getcallingscript()) == ".ClientMover" and Args[1].Name == "Client") then
						GDAT["AdonisDetected"] =true
						print("Anti-Cheat blocked from running, have fun playing! Method: { Require:Adonis|Client }");
						return wait(10e1)
					end
				end
				if Settings["HD Admin"] then
					if (getcallingscript().Name == "HDAdminStarterPlayer" and Args[1].Name == "MainFramework") then
						print("Anti-Cheat blocked from running, have fun playing! Method: { Require:HDAdmin|MainFramework }");
						return wait(10e1)
					end
				end
			end

			return Hook(unpack(Args))
		end))
	end)
end)

task.spawn(function()
	local starttime = time()
	local aa = nil
	aa = game:GetService("Players").DescendantAdded:Connect(function(a)
		if time()-starttime >= 5 then aa:Disconnect() return end
		if a.ClassName == "LocalScript" then
			if a.Name == ".ClientMover" then
				a.Disabled=true
				print("Adonis K blocked from running!")
				aa:Disconnect()
			end
		end
	end)
	if getnilinstances then
		for i,v in pairs(getnilinstances()) do
			if v.ClassName == "LocalScript" then
				if v.Name == ".ClientMover" then
					v.Disabled=true
					print("Adonis K blocked from running!")
				end
			end
		end
	end
end)

local adminenabled=true
local fallspeednumberset = 100
local Flingspeedlimit = 200

local maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3)) -- only applies to Y axis only

local radarenabled=false
local isoptimised=false

local canadminsdocmdsonU = false

local Admins = {}
local AllowedAdminCommands = {}
local Friends = {}

local startergui,starterplayer = game:GetService("StarterGui"),game:GetService("StarterPlayer")
local starterplayerscripts = starterplayer:FindFirstChildWhichIsA("StarterPlayerScripts")
local vuser,tservice,runservice,userinputservice,replicatedstorage,textchatservice = game:GetService("VirtualUser"),game:GetService("TweenService"),game:GetService("RunService"),game:GetService("UserInputService"),game:GetService("ReplicatedStorage"),game:GetService("TextChatService")


local KuID = ""
local HDAdminDetected=false
local KohlsAdminDetected=false
local KRemoteEvent = nil
local HRemoteFunc = nil


local Isfarming=false
GDAT.Showprinting=true
GDAT.Showwarning =true
GDAT.Nowait=false

GDAT.Killed=false
if game:GetService("RunService"):IsStudio() then GDAT.GameSettings = {["UserIds"]={}} else game:GetService("ScriptContext"):SetTimeout(1.5) end
local StatsService = game:GetService("Stats")
task.spawn(function()
	--Commented due to krnl crashing like trash
	--if setfflag then
	--setfflag("AbuseReportScreenshot", "False") warn("1 loaded")
	--setfflag("AbuseReportScreenshotPercentage", 0) warn("2 loaded")
	--end 
	task.spawn(function()
		wait(5)
		game:GetService("ReplicatedFirst"):RemoveDefaultLoadingScreen()
	end)
	if hfuncenabled==true then
		if not hookfunction then print("You client does not support hookfunction.") return end
		--[[
		local Printfunc 
		Printfunc = hookfunction(print,function(...)
			if not GDAT.Showprinting then 
				local calledscript12 = getcallingscript() 
				if calledscript12 ~= nil then return nil end end
			if Isfarming==true then
				if calledscript12 ~= nil then
					return nil
				end
			end
			return Printfunc(...)
		end)]]

		local Waitfunc 

		Waitfunc = hookfunction(wait,function(...)
			if GDAT.Killed==true then return Waitfunc(...) end
			if Isfarming==true then return Waitfunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return Waitfunc(...)
		end)

		local CWaitfunc 

		CWaitfunc = hookfunction(Wait,function(...)
			if GDAT.Killed==true then return CWaitfunc(...) end
			if Isfarming==true then return CWaitfunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return CWaitfunc(...)
		end)

		local Tickfunc 

		Tickfunc = hookfunction(tick,function(...)
			if GDAT.Killed==true then return Tickfunc(...) end
			if Isfarming==true then return Tickfunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return Tickfunc(...)
		end)

		local Timefunc 

		Timefunc = hookfunction(time,function(...)
			if GDAT.Killed==true then return Timefunc(...) end
			if Isfarming==true then return Timefunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return Timefunc(...)
		end)

		local OSTimefunc 

		OSTimefunc = hookfunction(os.time,function(...)
			if GDAT.Killed==true then return OSTimefunc(...) end
			if Isfarming==true then return OSTimefunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return OSTimefunc(...)
		end)

		local OSClockfunc 

		OSClockfunc = hookfunction(os.clock,function(...)
			if Isfarming==true then return OSClockfunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return OSClockfunc(...)
		end)

		local DelayFunc 

		DelayFunc = hookfunction(delay,function(...)
			if Isfarming==true then return DelayFunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end

				return DelayFunc(...)
			end
		end)

		local elapsedtimefunc 

		elapsedtimefunc = hookfunction(elapsedTime,function(...)
			if Isfarming==true then return elapsedtimefunc(...) end
			local calledscript12 = getcallingscript() 
			if calledscript12 ~= nil then 
				if GDAT.Nowait ~= nil then
					if GDAT.Nowait == true then
						runservice.Stepped:Wait()
						return 0
					end
				end
			end

			return elapsedtimefunc(...)
		end)
		--[[
		local Warnfunc 
		Warnfunc = hookfunction(warn,function(...)
			if not GDAT.Showwarning then 
				local calledscript13 = getcallingscript() 
				if calledscript13 ~= nil then return nil end end
			if Isfarming==true then
				if calledscript13 ~= nil then
					return nil
				end
			end
			return Warnfunc(...)
		end)]]

	end

end)

if adminenabled==true then
	local isantikickon=false
	local function ANTIKICK()
		if isantikickon==true then return end
		isantikickon=true
		task.spawn(function()
			local err,result = pcall(function()
				local mt = getrawmetatable(game)
				local old = mt.__namecall
				local protect = newcclosure or protect_function

				if not protect then
					notify("Incompatible Exploit Warning", "Your exploit does not support protection against stack trace errors, resulting to fallback function")
					protect = function(f) return f end
				end

				setreadonly(mt, false)
				mt.__namecall = protect(function(self, ...)
					local Malware = getcallingscript()
					if Malware ~= nil then
						local method = getnamecallmethod()
						if method == "Kick" then
							if Malware.ClassName == "LocalScript" then
								warn(Malware:GetFullName())
								if game.PlaceId == 11879754496 then else
									Malware.Disabled=true
								end
							end
							return wait(9e9)
						end
					end
					return old(self, ...)
				end)
				hookfunction(game:GetService("Players").LocalPlayer.Kick,protect(function() wait(9e9) end))

			end)
			if err == false then
				warn(result)
			end
		end)
	end




	local GameInfo = nil
	task.spawn(function()GameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)end)
	workspace:GetPropertyChangedSignal("Gravity"):Connect(function()maxfallingspeed=fallspeednumberset+(math.round(workspace.Gravity/3))end)

	local Players = game:GetService("Players")
	local plr = Players.LocalPlayer


	repeat wait() plr = Players.LocalPlayer until plr ~= nil

	local mouse = plr:GetMouse()

	local function WAIT(t)t = t or 0 local start = tick()repeat runservice.Stepped:Wait()until (tick() - start) >= t end

	--Anti afk
	plr.Idled:Connect(function()
		for i=15,0,-1 do
			vuser:CaptureController()
			vuser:ClickButton2(Vector2.new())
			WAIT(math.random(1,5))
		end

	end)
	print("Afk loaded!")

	task.spawn(function()
		if not game:IsLoaded() then game.Loaded:Wait()end
		for i,v in pairs(Players:GetPlayers()) do
			if v == plr then else
				pcall(function()task.spawn(function()if not Friends[v.UserId] then if v:IsFriendsWith(plr.UserId) then table.insert(Friends,v.UserId)end end end)end)
			end
		end
	end)

	-- Xploit lib
	local sethidden = sethiddenproperty or set_hidden_property or set_hidden_prop


	local YouhaveanAltInSameServer=false
	local isinterferanceremoved=false

	local function removeplayerinterference() -- This can break network ownership but helps prevent interference
		isinterferanceremoved=true warn("TRUE")
		settings().Physics.PhysicsEnvironmentalThrottle = Enum.EnviromentalPhysicsThrottle.Disabled -- Keep the physics from throttling.
		warn("interferece removed successfully!")
	end


	local Notifier235 = Instance.new("ScreenGui")
	local Frame235 = Instance.new("Frame")
	local Txt235 = Instance.new("TextLabel")
	local TextLabel235 = Instance.new("TextLabel")
	local popupsound235 = Instance.new("Sound")
	popupsound235.Name="aa"
	popupsound235.Parent=Notifier235
	popupsound235.Playing=false
	popupsound235.SoundId="rbxassetid://1905367471"
	popupsound235.Volume=0.9
	popupsound235.Looped=false
	local notepopupsound235 = Instance.new("Sound")
	notepopupsound235.Name="aa1"
	notepopupsound235.Parent=Notifier235
	notepopupsound235.Playing=false
	notepopupsound235.SoundId="rbxassetid://1862043663" --Windows 8 Notify Calendar
	notepopupsound235.Volume=1.5
	notepopupsound235.Looped=false
	local note1popupsound235 = Instance.new("Sound")
	note1popupsound235.Name="aa2"
	note1popupsound235.Parent=Notifier235
	note1popupsound235.Playing=false
	note1popupsound235.SoundId="rbxassetid://1862045322" --Windows 8 Notify Email
	note1popupsound235.Volume=1.5
	note1popupsound235.Looped=false
	local warnpopupsound235 = Instance.new("Sound")
	warnpopupsound235.Name="wa"
	warnpopupsound235.Parent=Notifier235
	warnpopupsound235.Playing=false
	warnpopupsound235.SoundId="rbxassetid://489103549" --Windows 10 notify sound
	warnpopupsound235.Volume=1.5
	warnpopupsound235.Looped=false

	local notesounds = {
		[1]=notepopupsound235,
		[2]=note1popupsound235,
	}
	local warnsounds = {
		[1]=warnpopupsound235,
	}

	Notifier235.Name="Notifier235"
	if runservice:IsStudio() then Notifier235.Parent = plr:WaitForChild("PlayerGui") else Notifier235.Parent = game:GetService("CoreGui")end
	Notifier235.ZIndexBehavior = Enum.ZIndexBehavior.Global

	Frame235.Name = "Frame235"
	Frame235.Parent = Notifier235
	Frame235.BackgroundColor3 = Color3.fromRGB(0,0,0)
	Frame235.BackgroundTransparency = 1.000
	Frame235.Position = UDim2.new(2, 0, 0.71581769, 0)
	Frame235.Size = UDim2.new(0.160, 0, 0.1, 0)

	Txt235.Name = "Txt235"
	Txt235.Parent = Frame235
	Txt235.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
	Txt235.Position = UDim2.new(0, 0, 0.5, 0)
	Txt235.Size = UDim2.new(1, 0, 0.5, 0)
	Txt235.Font = Enum.Font.SourceSans
	Txt235.Text = "Txt"
	Txt235.TextColor3 = Color3.fromRGB(0, 0, 0)
	Txt235.TextScaled = true
	Txt235.TextSize = 14.000
	Txt235.TextWrapped = true

	TextLabel235.Name = "TextLabel235"
	TextLabel235.Parent = Frame235
	TextLabel235.BackgroundColor3 = Color3.fromRGB(90, 90, 90)
	TextLabel235.Size = UDim2.new(1, 0, 0.5, 0)
	TextLabel235.Font = Enum.Font.SourceSans
	TextLabel235.Text = "Heading"
	TextLabel235.TextColor3 = Color3.fromRGB(0, 0, 0)
	TextLabel235.TextScaled = true
	TextLabel235.TextSize = 14.000
	TextLabel235.TextWrapped = true


	local CurrentYAxis = 0
	local function popupnotifier(Heading,Text,HeadingColor,TxtColor,soundnote)
		if GDAT.Killed==true then return end
		task.spawn(function()
			if CurrentYAxis < 0 then CurrentYAxis=0 end
			local newframe = Frame235:Clone()
			newframe.Name = "Cloned"
			newframe.Parent=Notifier235
			if soundnote ~= nil then
				if soundnote == "Note" then
					local s = notesounds[math.random(1,#notesounds)]:Clone()
					s.Parent = newframe
					if not s.Loaded then s.Loaded:Wait() end
					s:Play()
				elseif soundnote == "Warn" then
					local s = warnsounds[math.random(1,#notesounds)]:Clone()
					s.Parent = newframe
					if not s.Loaded then s.Loaded:Wait() end
					s:Play()
				end
			else
				local s = popupsound235:Clone()
				s.Parent = newframe
				if not s.Loaded then s.Loaded:Wait() end
				s:Play()
			end

			newframe.Position=UDim2.new(0.788602948, 0, 0.81581769, 0-CurrentYAxis)
			CurrentYAxis=CurrentYAxis+65
			if Heading ~= nil then newframe.TextLabel235.Text=Heading end 
			if Text ~= nil then newframe.Txt235.Text=Text end

			if HeadingColor ~= nil then newframe.TextLabel235.TextColor3=HeadingColor end
			if TxtColor ~= nil then newframe.Txt235.TextColor3=TxtColor end

			newframe.Visible=true
			wait(2.5)
			newframe:TweenPosition(UDim2.new(2, 0,0.81581769, 0),Enum.EasingDirection.In,Enum.EasingStyle.Sine,0.75,true)
			game:GetService("Debris"):AddItem(newframe,5)wait(0.1)
			CurrentYAxis=CurrentYAxis-65
			for i,v in pairs(newframe:GetChildren()) do
				v.Name=""
				if v.ClassName == "Sound" then v.SoundId = "" continue end
				v.BackgroundColor3=Color3.new(0,0,0)
				v.Size=UDim2.new(0,0,0,0)
				v.Position=UDim2.new(0,0,0,0)
				v.BorderSizePixel=0
				if v.ClassName == "TextLabel" then
					v.Text = ""
					v.TextSize=0
					v.TextColor3=Color3.new(0,0,0)
				end
			end
		end)
	end





	local function runOnStartUp()
		if game.PlaceId == 142823291 or game.PlaceId == 335132309 or game.PlaceId == 636649648 then -- MM2  (All types)
			removeplayerinterference()
			workspace.ChildAdded:Connect(function(object)
				if Isfarming==true then
					if object.Name == "Raggy" then 
						object.Name = "r"
						for i,v in pairs(object:GetDescendants()) do
							v.Name = ""
							if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end v.Size=Vector3.new(0,0,0) v.Position=Vector3.new(0,0,0) v.CanCollide=false end
						end
						wait()
						object:Destroy()
						return
					end
				end
				WAIT(3)
				if Isfarming==true then
					if object:FindFirstChildOfClass("Humanoid") ~= nil then return end
					if object:FindFirstChildOfClass("Folder") ~= nil then
						for i,v in pairs(object:GetChildren()) do
							if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
								v.Name = ""
								if v.ClassName == "MeshPart" then
									v.MeshId = ""
									v.TextureId = ""
								end
								v.Size=Vector3.new(0,0,0)v.CanCollide=false v.Position=Vector3.new(0,0,0)v.Material=Enum.Material.Plastic v.CanTouch=false v.Transparency=0
								game:GetService("Debris"):AddItem(v,0.1)
							elseif v.ClassName == "Model" then
								v.Name = ""
								game:GetService("Debris"):AddItem(v,0.1)

							end
						end
						return
					end
				end
				if object:FindFirstChildOfClass("Humanoid") ~= nil then else
					if #object:GetDescendants() >= 1000 then
						for i,v in pairs(object:GetDescendants()) do
							if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
								local Caughtinvis=false
								if Isfarming == true and v.Transparency>0 then v.CanCollide=false v.CanQuery=false end
								if v.Position == Vector3.new(-3430.308349609375, 23.605026245117188, 1431.4566650390625) or v.Position == Vector3.new(-3413.858154296875, 26.66107749938965, 1431.8565673828125) or v.Position == Vector3.new(-3396.082763671875, 23.605026245117188, 1419.9312744140625) or v.Position == Vector3.new(-3401.983154296875, 23.605026245117188, 1441.4566650390625) or v.Position == Vector3.new(-3347.357666015625, 6.404815196990967, 1438.1812744140625) then else
									if v.Transparency >=0.95 or string.lower(v.Name):match("glitch") or string.lower(v.Name):match("invis") or string.lower(v.Parent.Name):match("invis") or string.lower(v.Name) == "blocking" then
										if v.Material==Enum.Material.Concrete then else
											if v.ClassName == "TrussPart" then else
												v.CanCollide=false
											end
										end
									elseif v.ClassName:match("Mesh") then
										if object.Name:match("Factory") then
										else
											local meshcheck = v:FindFirstChildOfClass("FileMesh") or v:FindFirstChildOfClass("BlockMesh") or v:FindFirstChildOfClass("SpecialMesh")

											if meshcheck ~= nil then
												if meshcheck.Scale.X == 0 and meshcheck.Scale.Y == 0 and meshcheck.Scale.Z == 0 then
													if v.Material == Enum.Material.Concrete then else
														v.CanCollide=false
														Caughtinvis=true
													end
												end
											end
											if Caughtinvis==false then
												if v.Material == Enum.Material.Grass or v.Material == Enum.Material.Slate or v.Material == Enum.Material.Sand or v.Material == Enum.Material.Ice then
													if v.Material == Enum.Material.Concrete or v.Name:match("Coin") or v.Name:match("Gun") or v.Name:match("Scan") or v.Name:match("Power") or v.Name:match("Liquid") then
													else
														if v.Size.Magnitude >= 8.5 then
															if v.CanCollide==false then
																v.CanCollide=true
															end
														end
													end
												end
											end
										end
									elseif v.Transparency == 0 then 
										local meshcheck = v:FindFirstChildOfClass("FileMesh") or v:FindFirstChildOfClass("BlockMesh") or v:FindFirstChildOfClass("SpecialMesh")
										if meshcheck ~= nil then
											if meshcheck.Scale.X == 0 and meshcheck.Scale.Y == 0 and meshcheck.Scale.Z == 0 then
												if v.Material == Enum.Material.Concrete then else
													v.CanCollide=false
													v.CanQuery=false
													Caughtinvis=true
												end
											end
										end
										if Caughtinvis==false then
											if v.Material == Enum.Material.Grass or v.Material == Enum.Material.Slate or v.Material == Enum.Material.Sand or v.Material == Enum.Material.Ice then
												if v.Material == Enum.Material.Concrete or v.Name:match("Coin") or v.Name:match("Gun") or v.Name:match("Scan") or v.Name:match("Power") or v.Name:match("Liquid") then
												else
													if v.Size.Magnitude >= 8.5 then
														if v.CanCollide==false then
															v.CanCollide=true
														end
													end
												end
											end
										end
									end
								end
							end
						end
					end
				end
				if replicatedstorage:FindFirstChild("CharacterAppearances") ~= nil then replicatedstorage:FindFirstChild("CharacterAppearances"):Destroy()end
				if replicatedstorage:FindFirstChild("OldLobby") ~= nil then replicatedstorage:FindFirstChild("OldLobby"):Destroy()end
				if starterplayerscripts ~= nil then
					starterplayerscripts:ClearAllChildren()
				end
			end)
			repeat  WAIT(1)
			until plr.Character ~= nil
			game:GetService("ReplicatedStorage").Remotes.Extras.IsXbox:FireServer()	
		end
	end

	local function runOnCharAddedEvent(character)
		task.spawn(function()
			WAIT(0.3)
			if game.PlaceId == 738339342 then --[[Flood Escape 2 (Fe2)]] repeat wait(0.4) if startergui:GetCoreGuiEnabled(Enum.CoreGuiType.Backpack) == true then break end startergui:SetCoreGuiEnabled(Enum.CoreGuiType.Backpack,true)until startergui:GetCoreGuiEnabled(Enum.CoreGuiType.Backpack) == true local deletebin = Instance.new("HopperBin",plr:FindFirstChildWhichIsA("Backpack")) deletebin.BinType = 4 local tempfunc = nil local unlockpartfunc = nil tempfunc=deletebin.Changed:Connect(function(property) if property=="Parent" then if deletebin:IsDescendantOf(game) then else tempfunc:Disconnect()end end end) while true do if deletebin:IsDescendantOf(game) then else break end if tempfunc ~= nil then else break end if mouse.Target ~= nil then mouse.Target.Locked=false end WAIT(0.2)end
			elseif game.PlaceId == 6512673871 then --[[Booga Booga 2018]] WAIT(2) plr.PlayerGui.MainGui.Panels.Card.List.Market.Visible=true for i,v in pairs(plr.PlayerGui.MainGui.LeftPanel.Shop.Lists.ChestList:GetChildren()) do local OpenButton = v:FindFirstChild("OpenButton") if OpenButton ~= nil then OpenButton.MouseButton1Click:Connect(function() replicatedstorage.Events.ChestDrop:FireServer(OpenButton.Parent.Name) end) end end
			elseif game.PlaceId == 142823291 or game.PlaceId == 335132309 or game.PlaceId == 636649648 then -- MM2  (All types)
				local plrgui = plr:FindFirstChildWhichIsA("PlayerGui")
				if plrgui ~= nil then
					for i,v in pairs(plrgui:GetChildren()) do
						if string.lower(v.Name) == "victory" or string.lower(v.Name):match("mobile") then
							game:GetService("Debris"):AddItem(v,0.1)
						end
					end
					if Isfarming==true then
						task.spawn(function()
							WAIT(1.5)
							if plr.PlayerScripts:FindFirstChild("ThrowingKnifeVisuals") ~= nil then
								plr.PlayerScripts.ThrowingKnifeVisuals.Disabled=true
							end  
							if plr.PlayerScripts:FindFirstChild("GameplayAnimations") ~= nil then
								plr.PlayerScripts.GameplayAnimations.Disabled=true
							end  

							if plr.Character ~= nil then
								if plr.Character:FindFirstChild("Unfade") ~= nil then
									plr.Character.Unfade.Disabled=true
								end
							end

							if plrgui:FindFirstChild("MainGUI") ~= nil then
								if plrgui:FindFirstChild("MainGUI"):FindFirstChild("Menu/Badges") ~= nil then
									plrgui.MainGUI["Menu/Badges"].Disabled=true
								end
							end

						end)
					end
				end
				local backpack = plr.Backpack
				backpack.ChildAdded:Connect(function(tool)
					if tool.ClassName == "Tool" then
						if tool.Name == "Gun" or tool.Name == "Teddy" then else
							if tool:FindFirstChild("Handle") ~= nil then
								if not tool:GetAttribute("Applied") then
									WAIT(0.5)
									local sound = tool.Handle:FindFirstChildOfClass("Sound")
									if sound ~= nil then
										tool:SetAttribute("Applied","")
										tool.Activated:Connect(function()
											sound:Play()
											if tool.Name == "Knife" then 
												local display = plr.Character:FindFirstChild("KnifeDisplay")
												if display ~= nil then
													local displaysound = display:FindFirstChildOfClass("Sound")
													if displaysound ~= nil then WAIT(0.05) displaysound:Play() end
												end
											else
												local display = plr.Character:FindFirstChild("GunDisplay")
												if display ~= nil then
													local displaysound = display:FindFirstChildOfClass("Sound")
													if displaysound ~= nil then WAIT(0.05) displaysound:Play() end
												end
											end
										end)
									end
								end
							end
						end
					end
				end)
			end 
		end)
	end

	local mouseforce = Vector3.new(40,40,40)
	local forcerate = 0.03

	local Force = 70

	local STUDS = 50

	local pushbind = "q"


	local ispushing = false

	local IngameCMDS = {}


	local oldcursorenabled=true
	local NoCollisionsEnabled=false -- Is cancollide enabled
	local antivoidenabled=true

	local function GetPlayer(String) -- Credit to Timeless/xFunnieuss
		if String == nil then return nil end
		if typeof(String) ~= "string" then return nil end
		local Found = {}
		local strl = String:lower()
		if strl == "all" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				table.insert(Found,v)
			end
		elseif strl == "others" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name ~= Players.LocalPlayer.Name then
					table.insert(Found,v)
				end
			end   
		elseif strl == "me" then
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name == Players.LocalPlayer.Name then
					table.insert(Found,v)
				end
			end  
		else
			for i,v in pairs(game:GetService("Players"):GetPlayers()) do
				if v.Name:lower():sub(1, #String) == String:lower() then
					table.insert(Found,v)
				elseif v.DisplayName ~= nil then
					if v.DisplayName:lower():sub(1, #String) == String:lower() then
						table.insert(Found,v)
					end
				end
			end    
		end
		return Found    
	end

	local function color3torgb(color3,format)
		local Colorstr = ""
		if Colorstr.R+Colorstr.G+Colorstr.R >3 then
			if format==true then	
				return tostring(color3.R .. ", ".. color3.G ..", "..color3.B)
			end
			return color3.R,color3.G,color3.B
		end
		if format==true then	
			return tostring(math.floor(color3.R*255) .. ", ".. math.floor(color3.G*255) ..", "..math.floor(color3.B*255))
		end

		return math.floor(color3.R*255),math.floor(color3.G*255),math.floor(color3.B*255)
	end


	local function notify(msg,Colorr)
		if textchatservice.ChatVersion == Enum.ChatVersion.TextChatService then
			if textchatservice:FindFirstChild("TextChannels") == nil then repeat wait() until textchatservice:FindFirstChild("TextChannels") ~= nil end
			if textchatservice.TextChannels:FindFirstChild("RBXSystem") == nil then repeat wait() until textchatservice.TextChannels:FindFirstChild("RBXSystem") ~= nil end 
			if textchatservice.ChatVersion == Enum.ChatVersion.TextChatService then textchatservice.TextChannels.RBXSystem:DisplaySystemMessage([[<font color="]].."rgb("..tostring(Colorr.R*255)..","..tostring(Colorr.G*255)..","..tostring(Colorr.B*255)..[[)">]]..msg.."</font>")return end
		end
		game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage",  
		{ Text = tostring(msg), 
			Color = Colorr, 
			Font = Enum.Font.Arial, 
			FontSize = Enum.FontSize.Size96 
		} 
		)
	end

	if isoptimised == false then
		task.spawn(function()
			if not runservice:IsStudio() then
				for i=5,0,-1 do wait(2) if math.round(game:GetService("Stats").Workspace.Heartbeat:GetValue()) <= 15 then isoptimised=true notify("You are lagging and auto optimise has been activated it can be disabled at any time",Color3.fromRGB(0,255,255)) break end end
			end
		end)
	end

	wait(0.6)

	local isfocusedintextbox =false


	local minecraftremotes=false

	for i=10,0,-1 do
		if replicatedstorage:FindFirstChild("AssetsMod") ~= nil then
			if replicatedstorage:FindFirstChild("GameRemotes") ~= nil then
				if workspace:FindFirstChild("Blocks") ~= nil then
					minecraftremotes=true
					break
				end
			end
		end
		wait(0.2)	
	end


	local isspacebarheld,isdevconsolevisible =false, false

	local function focusedtextbox()return userinputservice:GetFocusedTextBox()end

	userinputservice.TextBoxFocused:Connect(function()isfocusedintextbox=true end)
	userinputservice.TextBoxFocusReleased:Connect(function()isfocusedintextbox=false end)
	userinputservice.InputBegan:Connect(function(input)if input.UserInputType == Enum.UserInputType.Keyboard then if input.KeyCode==Enum.KeyCode.F9 then if isfocusedintextbox==false then if isdevconsolevisible ==true then isdevconsolevisible=false else isdevconsolevisible=true end end elseif input.KeyCode==Enum.KeyCode.Space then isspacebarheld=true end end end)
	userinputservice.InputEnded:Connect(function(input)if input.UserInputType == Enum.UserInputType.Keyboard then if input.KeyCode==Enum.KeyCode.Space then isspacebarheld=false end end end)

	local cmds = [[

======================
/optimise [Helps with performance]
/unoptimise [Restores back to normal state]
/antivoid
/fallspeed {number}
/antivoidstuds {number}
/nocollisions
/oldcursor
/inventory {player}
/admin {player} [Gives access to limited commands]
/unadmin {player} [Removes access to limited commands]
/admins [List of admins u added]
/blockcmd [cmdname] Admins blocked from using the command
/allowcmd [cmdname] Admins allowed to use the command
/allowedcmds [List of allowed commands]
======================
]]


	local MainCMDS = {
		["admin"] = function(split)if typeof(split) == "table" then if GetPlayer(split[2]) ~= nil then for i,v in pairs(GetPlayer(split[2])) do if v ~= nil then if v == plr then continue end if Admins[v.UserId] ~= nil then notify(v.Name.." is already an admin!",Color3.fromRGB(255,0,0))else Admins[v.UserId] = 1 notify(v.Name.." is now an admin!",Color3.fromRGB(0,255,0))end end end end return end for i,v in pairs(GetPlayer(split)) do if v ~= nil then if v == plr then continue end if Admins[v.UserId] ~= nil then notify(v.Name.." is already an admin!",Color3.fromRGB(255,0,0))else Admins[v.UserId] = 1 notify(v.Name.." is now an admin!",Color3.fromRGB(0,255,0))end end end end,
		["unadmin"] = function(split) if typeof(split) == "table" then if GetPlayer(split[2]) ~= nil then for i,v in pairs(GetPlayer(split[2])) do if v ~= nil then if v == plr then continue end if Admins[v.UserId] ~= nil then Admins[v.UserId] = nil notify(v.Name.." is no longer an admin!",Color3.fromRGB(0,255,0))else  notify(v.Name.." is not an admin.",Color3.fromRGB(255,0,0))end end end end return end for i,v in pairs(GetPlayer(split)) do if v ~= nil then if v == plr then continue end if Admins[v.UserId] ~= nil then Admins[v.UserId] = nil notify(v.Name.." is no longer an admin!",Color3.fromRGB(0,255,0))else notify(v.Name.." is not an admin.",Color3.fromRGB(255,0,0))end end end end,
		["allowcmd"] = function(split) 
			if typeof(split) == "table" then
				if split[1] ~= nil then
					if string.lower(split[1]) == "blockcmd" then
						if split[2] ~= nil then
							local isblocked = false
							for a,b in pairs(AllowedAdminCommands) do
								if b == string.lower(split[2]) then
									isblocked=true									
									notify("Command"..split[2].." is already allowed!",Color3.fromRGB(255,0,0))
									break	
								end
							end
							if isblocked==false then
								notify("Successfully allowed command "..split[2].."!",Color3.fromRGB(0,255,0))
								table.insert(AllowedAdminCommands,string.lower(split[2]))
							end		
						else
							notify("bad name",Color3.fromRGB(255,0,0))
						end
					else
						local isblocked=false
						for a,b in pairs(AllowedAdminCommands) do
							if b == string.lower(split[2]) then
								isblocked=true								
								notify("Command"..split[2].." is already allowed!",Color3.fromRGB(255,0,0))
								break	
							end
						end
						if isblocked==false then
							notify("Successfully allowed command "..split[2].."!",Color3.fromRGB(0,255,0))
							table.insert(AllowedAdminCommands,string.lower(split[2]))
						end
					end
				end
			end

		end,
		["blockcmd"] = function(split) 
			if typeof(split) == "table" then
				if split[1] ~= nil then
					if string.lower(split[1]) == "allowcmd" then
						if split[2] ~= nil then
							local isblocked = false
							for a,b in pairs(AllowedAdminCommands) do
								if b == string.lower(split[2]) then							
									isblocked=true
									AllowedAdminCommands[a]=nil
									notify("Command"..split[2].." is now unblocked!",Color3.fromRGB(0,255,0))
									break	
								end
							end
							if isblocked==false then
								notify("The command "..split[2].."is already blocked.",Color3.fromRGB(255,0,0))
							end		
						else
							notify("bad name",Color3.fromRGB(255,0,0))
						end
					else
						local isblocked=false
						for a,b in pairs(AllowedAdminCommands) do
							if b == string.lower(split[2]) then
								isblocked=true								
								AllowedAdminCommands[a]=nil
								notify("Command"..split[2].." is now unblocked!",Color3.fromRGB(0,255,0))
								break	
							end
						end
						if isblocked==false then
							notify("The command "..split[2].."isnt blocked.",Color3.fromRGB(255,0,0))
						end
					end
				end
			end
		end,
		["allowedcmds"] = function(split)local txt = "List of blocked commands: " for i,v in pairs(AllowedAdminCommands) do txt=txt..v.." | " end if #txt >0 then notify(txt,Color3.fromRGB(0,255,0)) end end,
		["admins"] = function(split) notify("List of admins:",Color3.fromRGB(0,255,0))for i,v in pairs(Admins) do local Plrr = Players:GetPlayerByUserId(v)if Plrr ~= nil then notify(Plrr.Name.." is an admin!",Color3.fromRGB(0,255,0))end end end,
		["inventory"] = function(split) for i,v in pairs(GetPlayer(split[2])) do if v~= nil then local items = 0 local itemss = [[]]for a,b in pairs(v.Backpack:GetChildren()) do if b.ClassName:match("Tool") then items=items+1 itemss=itemss.."\n"..b.Name else continue end end for a,b in pairs(v.Character:GetChildren()) do if b.ClassName:match("Tool") then items=items+1 itemss=itemss.."\n"..b.Name else continue end end if items >0 then notify("Player "..v.Name.." has the following items:"..itemss,Color3.fromRGB(255,255,0))end end end end,
		["antivoid"] = function() if antivoidenabled == true then antivoidenabled=false notify("Antivoid is now disabled.") else antivoidenabled=true notify("Antivoid is now enabled.")end end,
		["nocollisions"] = function() if NoCollisionsEnabled == false then NoCollisionsEnabled=true notify("Player-Collisions is now disabled. [Collidable]")else NoCollisionsEnabled=false notify("Player-Collisions is now enabled. [Non-Collidable]")end end,
		["cmds"] = function() notify("List of commands: "..cmds,Color3.fromRGB(0,255,255)) end,
		["optimise"] = function() notify("Optimised! This will effect your nocollisions however..",Color3.fromRGB(0,200,150))isoptimised=true end,
		["unoptimise"] = function() notify("Restored back to default!",Color3.fromRGB(0,200,0))isoptimised=false end,
		["oldcursor"] = function() if oldcursorenabled==true then oldcursorenabled=false notify("Oldcursor is now disabled.",Color3.fromRGB(255,0,0))else oldcursorenabled=true notify("Oldcursor is now enabled.",Color3.fromRGB(0,255,0))end end,
	}

	local function connectchattedmain(msg)
		lw = string.lower(msg)split = string.split(lw," ")foundcmd = false for i,v in pairs(split) do if MainCMDS[v] ~= nil then foundcmd=true MainCMDS[v](split)break end end

		if foundcmd==false then

			if split[1] == "/antivoidstuds" then
				if tonumber(split[2]) ~= nil then
					if tonumber(split[2]) < 5 then
						STUDS = 5
					else
						STUDS = tonumber(split[2])
					end
				end
			elseif split[1] == "/inventory" then
				MainCMDS["inventory"](split[2])
			elseif split[1] == "/admin" then
				MainCMDS["admin"](split[2])
			elseif split[2] == "/admin" then
				MainCMDS["admin"](split[3])
			elseif split[1] == "/unadmin" then
				MainCMDS["unadmin"](split[2])
			elseif split[2] == "/unadmin" then
				MainCMDS["unadmin"](split[3])
			elseif split[1] == "/fallspeed" then
				if split[2] then
					if tonumber(split[2]) ~= nil then
						fallspeednumberset = tonumber(split[2])
						maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
						notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
					end 
				end
			elseif split[2] == "/fallspeed" then
				if split[3] then
					if tonumber(split[3]) ~= nil then
						fallspeednumberset = tonumber(split[3])
						maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
						notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
					end 
				end
			elseif split[1] == "/pushbind" then
				if split[2] then
					pushbind = split[2]
					notify("Push keybind has been set to "..split[2].."!",Color3.fromRGB(255,255,0))
				end
			elseif split[2] == "/pushbind" then
				if split[3] then
					pushbind = split[3]
					notify("Push keybind has been set to "..split[3].."!",Color3.fromRGB(255,255,0))
				end
			elseif split[2] == "/antivoidstuds" then
				if tonumber(split[3]) ~= nil then
					if tonumber(split[3]) < 5 then
						STUDS = 5
						notify("[Antivoid]: Cannot go below number of 5! New value is 5.",Color3.fromRGB(255,0,0))
					else
						STUDS = tonumber(split[3])
						notify("[Antivoid]: Set new value to: "..tostring(STUDS),Color3.fromRGB(75,78,255))
					end
				end
			end
		end
	end


	plr.Chatted:Connect(function(msg)connectchattedmain(msg)end)
	textchatservice.MessageReceived:Connect(function(TextChat) if TextChat.TextSource ~= nil then if TextChat.TextSource.UserId == plr.UserId then connectchattedmain(TextChat.Text)end end end)


	local function CreateNCgroup(LocalPart,Part,Collision)
		if LocalPart ~= nil and Part ~= nil then
			local verify = Part:FindFirstChild(LocalPart.Name.." NC "..Part.Name) 
			if verify ~= nil then
				if Collision ==true then 
					if not verify:IsDescendantOf(game) then return end verify:Destroy()else
					verify.Part0 = LocalPart
					verify.Part1 = Part
				end
			else
				if Collision==false then
					local nc = Instance.new("NoCollisionConstraint",Part)
					nc.Name = LocalPart.Name.." NC "..Part.Name nc.Part0=LocalPart nc.Part1=Part
				end
			end
		end
	end




	local oldpos = CFrame.new()

	local hackerisdoingFEbring = false

	task.spawn(function()
		while true do
			local foundhacker = false
			WAIT(0.05)
			if plr.Character ~= nil then
				if #plr.Character:GetChildren() >0 then
					if plr.Character:FindFirstChild("Head") ~= nil then
						for i,v in pairs(plr.Character:GetChildren()) do
							if v.ClassName == "Tool" then
								if v:FindFirstChild("Handle") ~= nil then
									if #v.Handle:GetJoints() >1 then
										for a,b in pairs(v.Handle:GetJoints()) do
											if b.Part0 ~= nil then
												if b.Part0:IsDescendantOf(plr.Character) then
												else
													if b:IsDescendantOf(workspace) then 
														foundhacker=true
													end
												end
											end
										end
										break
									end
								end
							end
							if hackerisdoingFEbring ==true then foundhacker=false 
								repeat
									WAIT(0.05)
									for i,v in pairs(plr.Character:GetChildren()) do
										if v.ClassName == "Tool" then
											if v:FindFirstChild("Handle") ~= nil then
												if #v.Handle:GetJoints() >1 then
													for a,b in pairs(v.Handle:GetJoints()) do
														if b.Part0 ~= nil then
															if b.Part0:IsDescendantOf(plr.Character) then
															else
																foundhacker=true
															end
														end
													end
													break
												end
											end
										end
									end
									if foundhacker==false then hackerisdoingFEbring=false break end
								until hackerisdoingFEbring==false
							end
							if foundhacker==false then oldpos = plr.Character.Head.CFrame-Vector3.new(0,1.5,0) end
						end
					end
				end
			end
		end
	end)

	local function antivoid_bring(tool)
		if plr.Character ~= nil then
			if tool:FindFirstChild("Handle") ~= nil then
				for i,v in pairs(tool.Handle:GetJoints()) do
					if v.Part0 ~= nil then
						if v.Part0:IsDescendantOf(plr.Character) then else
							local Player = "87678693"
							for i,v in pairs(Friends) do
								if Players:GetPlayerByUserId(v) ~= nil then
									Player = Players:GetPlayerByUserId(v).Name
									break
								end
							end
							for i,v in pairs(GDAT.AltAccounts) do
								if Players:GetPlayerByUserId(v) ~= nil then
									Player = Players:GetPlayerByUserId(v).Name
									break
								end
							end
							if not string.lower(v.Part0:GetFullName()):match(string.lower(Player)) then
								if Isfarming==true then
									local Part = plr.Character:FindFirstChild("RightHand") or plr.Character:FindFirstChild("Right Arm")
									if Part ~= nil then Part:Destroy() end
								end
								pcall(function()
									task.spawn(function()
										for i,v in pairs(Friends) do
											task.spawn(function()
												if plr:IsFriendsWith(v) then
												else
													Friends[i]=nil
												end
											end)
										end
									end)
								end)
								warn(v.Part0.Parent,"did naughty things to you!") runservice.Heartbeat:Wait() tool.Handle:BreakJoints() plr.Character.Humanoid:UnequipTools()
								for i,v in pairs(plr.Character:GetChildren()) do
									if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
										task.spawn(function()
											local inn = 20 local PositionToCapture = oldpos.Position
											repeat 
												WAIT(0.04) inn=inn-1  if inn<=0 then break end v.Velocity=Vector3.new(0,1,0) v.CFrame=oldpos
											until (v.CFrame.Position-PositionToCapture).Magnitude <= 4
										end)
									end
								end break
							end
						end
					end
				end
			end
		end
	end


	local Steppedfunc

	local refresh=50

	local isspacebarheld = false
	userinputservice.InputBegan:Connect(function(input) if input.UserInputType == Enum.UserInputType.Keyboard then if input.KeyCode == Enum.KeyCode.Space then if focusedtextbox() ~= nil then else isspacebarheld=true end end end end)
	userinputservice.InputEnded:Connect(function(input) if input.UserInputType == Enum.UserInputType.Keyboard then if input.KeyCode == Enum.KeyCode.Space then isspacebarheld=false end end end)

	local torsos = {}

	local SafeHRP = nil
	local SafeHRPWeld = nil
	local SafeHRPBodyV = nil

	local function CreateFakeHRP(Root)
		if Root ~= nil then
			if SafeHRP ~= nil then
				if workspace:FindFirstChild("HR1_") ~= nil then else if not SafeHRP:IsDescendantOf(game) then SafeHRP = nil else SafeHRP.Parent = workspace end end
				SafeHRP.Anchored=false
				if SafeHRPBodyV ~= nil then
					if SafeHRPBodyV.Parent ~= SafeHRP then
						if SafeHRPBodyV:IsDescendantOf(game) then
							SafeHRPBodyV.Parent=SafeHRP
						else
							SafeHRPBodyV = SafeHRPBodyV:Clone()
							SafeHRPBodyV.Parent=SafeHRP
						end
					end
				end
				if SafeHRPWeld ~= nil then
					if not SafeHRPWeld:IsDescendantOf(SafeHRP) then
						SafeHRPWeld = Instance.new("Weld",SafeHRP)
						SafeHRPWeld.Part0=SafeHRP
						SafeHRPWeld.Part1=Root
					else
						SafeHRPWeld.Part0=SafeHRP
						SafeHRPWeld.Part1=Root
					end
				else
					SafeHRPWeld = Instance.new("Weld",SafeHRP)
					SafeHRPWeld.Part0=SafeHRP
					SafeHRPWeld.Part1=Root
				end
			else
				SafeHRP = Instance.new("Part",workspace)
				SafeHRP.Name = "HR1_"
				SafeHRP.Size = Root.Size
				SafeHRP.CanTouch=false
				SafeHRP.Massless=true
				SafeHRP.CanCollide=false
				SafeHRP.CanQuery=false
				SafeHRP.Transparency=1
				SafeHRP:SetAttribute("Cx1",0)
				SafeHRPBodyV = Instance.new("BodyVelocity",SafeHRP)		
				SafeHRPBodyV.MaxForce=Vector3.new(0,0,0)
				SafeHRPBodyV.Velocity=Vector3.new(0,-maxfallingspeed,0)
				SafeHRPWeld = Instance.new("Weld",SafeHRP)
				SafeHRPWeld.Part0=SafeHRP
				SafeHRPWeld.Part1=Root

			end
		else
			if SafeHRP ~= nil then 
				if workspace:FindFirstChild("HR1_") ~= nil then else if not SafeHRP:IsDescendantOf(game) then SafeHRP = nil else SafeHRP.Parent = workspace end end
				if SafeHRPWeld ~= nil then
					if not SafeHRPWeld:IsDescendantOf(SafeHRP) then
						SafeHRP.Anchored=true
					end
				else
					SafeHRP.Anchored=true
				end				
			else
				SafeHRP.Anchored=true
			end
		end
	end

	local isantivoidtrig=false
	Steppedfunc =runservice.Stepped:Connect(function()
		char = plr.Character
		if isspacebarheld==true then
			if char ~= nil then
				local humanoid = char:FindFirstChildOfClass("Humanoid")
				if humanoid ~= nil then
					humanoid:SetStateEnabled("Jumping",false)
					if humanoid.Sit==true then humanoid:ChangeState("Jumping")
					elseif humanoid:GetState() == Enum.HumanoidStateType.Climbing then humanoid:ChangeState("Jumping")
					elseif humanoid:GetState() == Enum.HumanoidStateType.FallingDown then if SafeHRP ~= nil then if SafeHRP.Velocity.Y <= -1 and SafeHRP.Velocity.Y <= 1 then humanoid:ChangeState("Jumping") end end
					elseif humanoid.FloorMaterial == Enum.Material.Air then if SafeHRP ~= nil then if SafeHRP.Velocity.Y >= -0.3 and SafeHRP.Velocity.Y <= 0.125 then humanoid:ChangeState("Jumping") end end else humanoid:ChangeState("Jumping")

					end
				end
			end
		end
		if Isfarming ==true then
			if isinterferanceremoved==true then refresh=refresh-1 if refresh<=0 then refresh=50 sethidden(plr,"MaximumSimulationRadius",4)sethidden(plr,"SimulationRadius", 4) end end end
		if GDAT.Killed==true then warn("Disconnected") Steppedfunc:Disconnect() end
		for i,v in pairs(plr.PlayerGui:GetChildren()) do if v.ClassName == "LocalScript" then if string.lower(v.Name):match("crash") then v.Disabled=true end end end

		if plr.Character ~= nil then
			if antivoidenabled==true then
				torsos = {}
				if char ~= nil then
					local isdead=false
					human = char:FindFirstChildOfClass("Humanoid")
					if human ~= nil then if human:GetState() == Enum.HumanoidStateType.Dead or human:GetState() == Enum.HumanoidStateType.None then isdead=true end end
					if isdead==false then
						for i,v in pairs(char:GetChildren()) do
							if v.ClassName == "Tool" then
								if v:FindFirstChild("Handle") ~= nil then
									if #v.Handle:GetJoints()>1 then if hackerisdoingFEbring==true then else if hackerisdoingFEbring==true then else antivoid_bring(v) end end end
								end
							end
						end

						CreateFakeHRP(char:FindFirstChild("HumanoidRootPart"))

						task.spawn(function()
							if SafeHRP ~= nil then isantivoidtrig=false
								if SafeHRP.Position.Y <= workspace.FallenPartsDestroyHeight then isantivoidtrig=true
									for i,v in pairs(char:GetDescendants()) do
										if v.ClassName:match("Part") then
											if v.ClassName:match("Emit") then continue end
											v.AssemblyAngularVelocity=Vector3.new(0,0,0)
											v.CFrame=CFrame.new(v.Position.X,workspace.FallenPartsDestroyHeight+STUDS,v.Position.Z)
										elseif v.ClassName == "Tool" then
											if v:FindFirstChild("Handle") ~= nil then
												if #v.Handle:GetJoints()>1 then if hackerisdoingFEbring==true then else antivoid_bring(v) end end
											end
										end
									end
								elseif SafeHRP.Position.Y <= workspace.FallenPartsDestroyHeight+STUDS then isantivoidtrig=true
									for i,v in pairs(char:GetDescendants()) do
										if v.ClassName == "Tool" then
											if v:FindFirstChild("Handle") ~= nil then
												if #v.Handle:GetJoints()>1 then if hackerisdoingFEbring==true then else antivoid_bring(v)end end
											end
										elseif v.ClassName:match("Part") then
											if v.ClassName:match("Emit") then continue end
											if v.Velocity.Y <= -maxfallingspeed then
												v.Velocity=Vector3.new(v.Velocity.X,-maxfallingspeed,v.Velocity.Z)
											end
											v.AssemblyAngularVelocity=Vector3.new(0,0,0)
											if SafeHRP.Velocity.X > 300 then
												v.Velocity=Vector3.new(300,Force,SafeHRP.Velocity.Z)
											elseif SafeHRP.Velocity.X < -300 then
												v.Velocity=Vector3.new(-300,Force,SafeHRP.Velocity.Z)
											elseif SafeHRP.Velocity.Z > 300 then
												v.Velocity=Vector3.new(SafeHRP.Velocity.X,Force,300)
											elseif SafeHRP.Velocity.Z < -300 then
												v.Velocity=Vector3.new(SafeHRP.Velocity.X,Force,-300)
											else
												v.Velocity=Vector3.new(SafeHRP.Velocity.X,Force,SafeHRP.Velocity.Z)
											end
										end
									end
								end
								if SafeHRP.Velocity.Y <= -maxfallingspeed then
									if isantivoidtrig==true then
										SafeHRPBodyV.MaxForce=Vector3.new(0,0,0)
									else
										SafeHRPBodyV.MaxForce=Vector3.new(0,"inf",0)
										SafeHRPBodyV.Velocity=Vector3.new(0,-maxfallingspeed,0)
									end
								else
									SafeHRPBodyV.MaxForce=Vector3.new(0,0,0)
								end
							else
								for i,v in pairs(plr.Character:GetChildren()) do
									if v.ClassName:match("Part") then
										if v.ClassName:match("Emit") then continue end
										if string.lower(v.Name):match("torso") then table.insert(torsos,v) end
									end
								end
								for i,v in pairs(torsos) do
									if v.Position.Y <= workspace.FallenPartsDestroyHeight then
										for i,v in pairs(char:GetDescendants()) do
											if v.ClassName:match("Part") then
												if v.ClassName:match("Emit") then continue end
												v.AssemblyAngularVelocity=Vector3.new(0,0,0)
												v.CFrame=CFrame.new(v.Position.X,workspace.FallenPartsDestroyHeight+STUDS,v.Position.Z)
											elseif v.ClassName == "Tool" then
												if v:FindFirstChild("Handle") ~= nil then
													if #v.Handle:GetJoints()>1 then
														if hackerisdoingFEbring==true then else antivoid_bring(v) end end
												end
											end
										end
									elseif v.Position.Y <= workspace.FallenPartsDestroyHeight+STUDS then
										for i,v in pairs(char:GetDescendants()) do
											if v.ClassName == "Tool" then
												if v:FindFirstChild("Handle") ~= nil then
													if #v.Handle:GetJoints()>1 then if hackerisdoingFEbring==true then else antivoid_bring(v)end end
												end
											elseif v.ClassName:match("Part") then
												if v.ClassName:match("Emit") then continue end
												v.AssemblyAngularVelocity=Vector3.new(0,0,0)
												if v.Velocity.X > 300 then
													v.Velocity=Vector3.new(300,Force,v.Velocity.Z)
												elseif v.Velocity.X < -300 then
													v.Velocity=Vector3.new(-300,Force,v.Velocity.Z)
												elseif v.Velocity.Z > 300 then
													v.Velocity=Vector3.new(v.Velocity.X,Force,300)
												elseif v.Velocity.Z < -300 then
													v.Velocity=Vector3.new(v.Velocity.X,Force,-300)
												else
													v.Velocity=Vector3.new(v.Velocity.X,Force,v.Velocity.Z)
												end
											end
										end
									end
								end
							end
						end)
					end
				end
			end
		end
	end)

	notify("[Antikill]: Antivoid successfully loaded. To toggle, type /antivoid in chat to toggle or type /e /antivoid to toggle.",Color3.fromRGB(255,0,255))
	notify("[ModifyAntikill]: To change the height of antivoid, type /antivoidstuds {number} in chat to set.",Color3.fromRGB(255,0,255))
	notify("[Player_Collision]: To toggle player-collision, type /nocollisions to toggle player collision.",Color3.fromRGB(255,255,0))
	notify("List of commands: "..cmds,Color3.fromRGB(0,255,255))

	local connectAdminFunc = function(Player,Message)
		if Player:GetAttribute("Deb") ~= nil then return end
		if Message == nil then return end
		local Success=false
		local lower = string.lower(Message)
		local split = string.split(lower," ")

		local RequestedCommand,Func = "",nil

		if split[1] ~= nil then else return end
		for a,b in pairs(IngameCMDS) do
			if "/"..a == string.lower(split[1]) then
				RequestedCommand,Func = a,b
				break

			end
		end

		local blocked=false

		for i,v in pairs(split) do
			if GetPlayer(v) ~= nil then
				for i,v in pairs(GetPlayer(v)) do
					if v == plr then 
						if canadminsdocmdsonU ==false then 
							blocked=true 
							break 
						end
					end
				end
			end
		end

		if blocked==true then 
			notify(Player.Name.." Attempted to use a command against u!",Color3.fromRGB(255,0,0)) 
		end

		if blocked==true then return nil end

		local verify = false
		for i,v in pairs(AllowedAdminCommands) do 
			if v == RequestedCommand then verify = true break end
		end
		if verify==true then
			Success=true
			table.remove(split,1)
			local txt = ""
			for a,b in pairs(split) do txt=txt..b.." " end
			task.spawn(function()Func(txt,Player)end)
		end 

		if Success==true then 
			Player:SetAttribute("Deb","")
			WAIT(0.5)
			Player:SetAttribute("Deb",nil)
		end 
	end

	local function recheckingamecmds(gamename)
		if gamename ==nil then gamename = ""end

		if game.PlaceId==893973440 or gamename:match("Flee the facility") then
			local crystalcovepart = nil
			local function GotoPlayerr(player) for i,v in pairs(workspace:GetChildren()) do if v.ClassName == "Part" then if v.Name == "Part" then if v.Position == Vector3.new(251.04998779296875, -14, -366) then if v:FindFirstChildOfClass("TouchTransmitter") then crystalcovepart=v break end end end end end if Players.LocalPlayer:FindFirstChild("IsTeleporting") ~= nil then Players.LocalPlayer.IsTeleporting.Value = true end local i = 0 local cc = 25 if Players.LocalPlayer.Character:FindFirstChild("Torso") ~= nil then if Players.LocalPlayer:FindFirstChild("TempPlayerStatsModule") ~= nil then if Players.LocalPlayer.TempPlayerStatsModule:FindFirstChild("Ragdoll") ~= nil then  if Players.LocalPlayer.TempPlayerStatsModule.Ragdoll.Value == true then  if player ~= nil then if player.Character ~= nil then if player.Character:FindFirstChild("Torso") ~= nil then if player.Character.Torso.Position.Y <= -500 then else firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,0) firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,1) while true do if i >= 125 then break end if player ~= nil then else break end  if player.Character ~= nil then else break end  if player.Character:FindFirstChild("Torso") ~= nil then if (Players.LocalPlayer:DistanceFromCharacter(Vector3.new(196.5,3.2,-401.5)) <= 200) then if Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil then WAIT(0.25) for count = 6,0,-1 do local tppart = player.Character.Torso Players.LocalPlayer.Character.HumanoidRootPart.CFrame = tppart.CFrame for i,v in pairs(Players.LocalPlayer.Character:GetChildren()) do if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end Players.LocalPlayer.Character.HumanoidRootPart.CFrame = tppart.CFrame v.CFrame = tppart.CFrame end end WAIT(0.1)end break else  break end else if i >= cc then firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,0) firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,1) cc=cc+25 end i=i+1 end else  break  end WAIT(0.03)end end end end end else if player ~= nil then if player.Character ~= nil then if player.Character:FindFirstChild("Torso") ~= nil then if player.Character.Torso.Position.Y <= -500 then else firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,0) firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,1) while true do if i >= 125 then break end if player ~= nil then else break end if player.Character ~= nil then else break end if player.Character:FindFirstChild("Torso") ~= nil then if (Players.LocalPlayer:DistanceFromCharacter(Vector3.new(196.5,3.2,-401.5)) <= 20) then if Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") ~= nil then WAIT(0.25) for count = 15,0,-1 do Players.LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.Torso.CFrame WAIT(0.02) end break else  break end else if i >= cc then firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,0)firetouchinterest(Players.LocalPlayer.Character.Torso,crystalcovepart,1)cc=cc+25 end i=i+1 end else  break  end WAIT(0.03)end end end end end end end end  end if Players.LocalPlayer:FindFirstChild("IsTeleporting") ~= nil then Players.LocalPlayer.IsTeleporting.Value = false end end

			local autoopenexit =false local godded=false local autocapture=false local autoescape = false

			local immortal_players = Instance.new("Folder",script)immortal_players.Name="Immortal"


			local CMDS = {
				["god"] = function()if godded then godded=false notify("You are no longer godded.",Color3.fromRGB(255,0,0))else godded=true notify("You are now godded.",Color3.fromRGB(0,255,0))end end,
				["autocapture"] = function()if autocapture then autocapture=false notify("autocapture: Disabled.",Color3.fromRGB(255,0,0))else  autocapture=true notify("autocapture: Enabled",Color3.fromRGB(0,255,0)) end end,
				["autoopenexit"] = function() if autoopenexit then autoopenexit=false notify("autoopenexit: Disabled.",Color3.fromRGB(255,0,0)) else autoopenexit=true notify("autoopenexit: Enabled",Color3.fromRGB(0,255,0)) end end,
				["autoescape"] = function() if autoescape then autoescape=false notify("autoescape: Disabled.",Color3.fromRGB(255,0,0)) else autoescape=true notify("autoescape: Enabled",Color3.fromRGB(0,255,0)) end end,
			}

			IngameCMDS=CMDS

			plr.Chatted:Connect(function(msg)
				local lwr = string.lower(msg) split=string.split(lwr," ")foundcmd = false for i,v in pairs(split) do for a,b in pairs(CMDS) do if "/"..a == v then b() foundcmd=true end end end

				if foundcmd==false then
					if split[1] == "/immortal" then if split[2] then for i,v in pairs(GetPlayer(split[2])) do if v.Name == plr.Name then notify("You cannot immortalise yourself.",Color3.fromRGB(255,0,0)) else if immortal_players:FindFirstChild(v.Name) ~= nil then notify(v.Name.." is already immortalised!",Color3.fromRGB(255,0,0)) else objvalue = Instance.new("ObjectValue") objvalue.Name=v.Name objvalue.Value=v objvalue.Parent=immortal_players notify("Successfully immortalised: "..v.Name.."!",Color3.fromRGB(0,255,0)) end break end end end
					elseif split[1] == "/unimmortal" then if split[2] then for i,v in pairs(GetPlayer(split[2])) do if v.Name == plr.Name then notify("You cannot immortalise yourself.",Color3.fromRGB(255,0,0)) else if immortal_players:FindFirstChild(v.Name) ~= nil then immortal_players[v.Name]:Destroy() notify(v.Name.." is no longer immortalised!",Color3.fromRGB(0,255,0)) else notify(v.Name.." is not immortalised!",Color3.fromRGB(255,0,0)) end break end end end
					elseif split[1] == "/goto" then if split[2] then for i,v in pairs(GetPlayer(split[2])) do if v ~= nil then if v.Name == plr.Name then  else GotoPlayerr(v) break end end end end
					elseif split[2] == "/immortal" then if split[3] then for i,v in pairs(GetPlayer(split[3])) do if v.Name == plr.Name then notify("You cannot immortalise yourself.",Color3.fromRGB(255,0,0)) else if immortal_players:FindFirstChild(v.Name) ~= nil then notify(v.Name.." is already immortalised!",Color3.fromRGB(255,0,0)) else objvalue = Instance.new("ObjectValue") objvalue.Name=v.Name objvalue.Value=v objvalue.Parent=immortal_players notify("Successfully immortalised: "..v.Name.."!",Color3.fromRGB(0,255,0)) end break end end end
					elseif split[2] == "/unimmortal" then if split[3] then for i,v in pairs(GetPlayer(split[3])) do if v.Name == plr.Name then notify("You cannot immortalise yourself.",Color3.fromRGB(255,0,0)) else if immortal_players:FindFirstChild(v.Name) ~= nil then immortal_players[v.Name]:Destroy() notify(v.Name.." is no longer immortalised!",Color3.fromRGB(0,255,0)) else notify(v.Name.." is not immortalised!",Color3.fromRGB(255,0,0)) end break end end end
					elseif split[2] == "/goto" then if split[3] then for i,v in pairs(GetPlayer(split[3])) do if v ~= nil then if v.Name == plr.Name then else GotoPlayerr(v) break end end end end end
				end
			end)

			local cmds = [[\n
======================
Hello it seems like you are playing FTF! here are some commands.
/god
/immortal {playername}
/unimmortal {playername}
/autocapture
/autoopenexit
/autoescape
/goto {playername}
======================
]]
			notify("List of commands: "..cmds,Color3.fromRGB(0,255,155))
			local function openexits() for i,v in pairs(replicatedstorage.CurrentMap.Value:GetChildren()) do if v.Name == "ExitDoor" then if v:FindFirstChild("ExitDoorTrigger") then if v.ExitDoorTrigger:FindFirstChild("ActionSign") ~= nil then if v.ExitDoorTrigger.ActionSign.Value>0 then local args = {[1] = "Input",[2] = "Trigger",[3] = true,[4] = v.ExitDoorTrigger.Event} game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args)) local args = {[1] = "Input",[2] = "Action",[3] = true} game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args)) end end end end end end 
			local function escape() if plr.TempPlayerStatsModule.Health.Value>0 then for i,v in pairs(replicatedstorage.CurrentMap.Value:GetChildren()) do if v.Name == "ExitDoor" then if v:FindFirstChild("ExitDoorTrigger") then else if v:FindFirstChild("ExitArea") ~= nil then plr.Character.HumanoidRootPart.CFrame = v.ExitArea.CFrame firetouchinterest(plr.Character.HumanoidRootPart,v.ExitArea,0) firetouchinterest(plr.Character.HumanoidRootPart,v.ExitArea,1) firetouchinterest(plr.Character.HumanoidRootPart,v.ExitArea,0) firetouchinterest(plr.Character.HumanoidRootPart,v.ExitArea,1) break end end end end end end 
			local function capture() if plr:FindFirstChild("TempPlayerStatsModule") ~= nil then if plr.TempPlayerStatsModule:FindFirstChild("ActionEvent") ~= nil then local OLDEVENT = plr.TempPlayerStatsModule.ActionEvent.Value local freezepod = nil local args = {}for i,v in pairs(replicatedstorage.CurrentMap.Value:GetChildren()) do if v.Name == "FreezePod" then if v:FindFirstChild("PodTrigger") ~= nil then if v.PodTrigger:FindFirstChild("CapturedTorso") ~= nil then if v.PodTrigger.CapturedTorso.Value ~= nil then else freezepod = v args = {[1] = "Input",[2] = "Trigger",[3] = true,[4] = v.PodTrigger.Event}break end end end end  end 
						if freezepod ~= nil then game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))local args = {[1] = "Input",[2] = "Action",[3] = true}game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))if OLDEVENT ~= nil then WAIT() args = {[1] = "Input",[2] = "Trigger",[3] = true,[4] = OLDEVENT}game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))end end end end end 
			local myalt = { 
				[1] = 2787357184,
				[2] = 3498663874,
				[3] = 2782718467,
			} -- Alt accounts by userid.


			local function getbeast()local beast=nil for i,v in pairs(Players:GetPlayers()) do if v:FindFirstChild("TempPlayerStatsModule") ~= nil then if v.TempPlayerStatsModule:FindFirstChild("IsBeast") ~= nil then if v.TempPlayerStatsModule.IsBeast.Value==true then  beast=v  break  end  end  end  end  return beast end
			task.spawn(function()local beast=nil while true do beast=nil if GDAT.Killed == true then warn("broke") break end beast = getbeast()if beast ~= nil then if beast.Name == plr.Name then if autocapture==true then if beast.Character ~= nil then if beast.Character:FindFirstChild("CarriedTorso") ~= nil then if beast.Character.CarriedTorso.Value ~= nil then capture() end end end end  else if autoopenexit ==true then if replicatedstorage:FindFirstChild("ComputersLeft") ~= nil then if replicatedstorage.ComputersLeft.Value <=0 then openexits() end end end  if autoescape == true then if replicatedstorage:FindFirstChild("ComputersLeft") ~= nil then if replicatedstorage.ComputersLeft.Value <=0 then escape() end end end if godded == true then if beast.UserId == myalt[1] or beast.UserId == myalt[2] or beast.UserId == myalt[3] then else  if plr:FindFirstChild("TempPlayerStatsModule") ~= nil then if plr.TempPlayerStatsModule.Ragdoll.Value==true then if (beast:DistanceFromCharacter(plr.Character.Torso.Position) <= 30) then if beast.Character:FindFirstChild("Part") ~= nil then if beast.Character:FindFirstChild("Hammer") ~= nil then if beast.Character.Hammer:FindFirstChild("HammerEvent") ~= nil then beast.Character.Hammer.HammerEvent:FireServer("HammerClick",true) end end end end end end  end end end end WAIT()end end)
			local function save(player) local OLDEVENT = plr.TempPlayerStatsModule.ActionEvent.Value local freezepod=nil local args = {} for i,v in pairs(replicatedstorage.CurrentMap.Value:GetChildren()) do if v.Name == "FreezePod" then if v:FindFirstChild("PodTrigger") ~= nil then if v.PodTrigger:FindFirstChild("CapturedTorso") ~= nil then if v.PodTrigger.CapturedTorso.Value ~= nil then if v.PodTrigger.CapturedTorso.Value.Parent.Name == player.Name then freezepod = v args = {[1] = "Input",[2] = "Trigger",[3] = true,[4] = v.PodTrigger.Event}break end end end end end end if freezepod ~= nil then game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))local args = {[1] = "Input",[2] = "Action",[3] = true}game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args))end if OLDEVENT ~= nil then args = { [1] = "Input", [2] = "Trigger", [3] = true, [4] = OLDEVENT } game:GetService("ReplicatedStorage").RemoteEvent:FireServer(unpack(args)) end end  task.spawn(function()while true do if GDAT.Killed == true then break end for i,v in pairs(immortal_players:GetChildren()) do if plr.TempPlayerStatsModule.IsBeast.Value==true then else if v.ClassName == "ObjectValue" then if v.Value ~= nil then if v.Value:FindFirstChild("TempPlayerStatsModule") ~= nil then if v.Value.TempPlayerStatsModule:FindFirstChild("Captured") ~= nil then if v.Value.TempPlayerStatsModule.Captured.Value==true then save(v.Value) end end end else if Players:FindFirstChild(v.Name) ~= nil then v.Value=Players[v.Name] end end end end end WAIT() end end)



		else
			local CMDS = {}
			if game.PlaceId == 335132309 --[[MM2 Hardcore]] or game.PlaceId == 142823291 --[[MM2 Casual]] or gamename:match("Murder Mystery 2") then
				local cmds = [[]]
				if game.PlaceId == 335132309 then
					cmds = [[

======================
Hello it seems like you are playing MM2 Hardcore! here are some commands.
/alwaysblack [Ninja]
/thirdperson [casual POV]
/esp [see everyone including roles]
/cointype [Heart, Coin, Token, auto]
/deadchat [see spectator chat]
/safecoinfarm [Invis + slower]
/coinfarm [Normal Coinfarm]
/clicktrap [Hold ctrl+Click to use traps]
/sharpaim [Shoot more percise]
/autogun [auto gun grabber]
/alwaysinvis [always vanish ~ requires ghostperk]
/alwaystrail [Gives you a murderer trail]
/toggleall [toggles all features]
======================]]
				else
					cmds = [[

======================
Hello it seems like you are playing MM2 Casual! here are some commands.
/esp [see everyone including roles]
/autogun [auto gun grabber]
/deadchat [see spectator chat]
/cointype [Heart, Coin, Token, auto]
/safecoinfarm [Coinfarm with FE godmode + slower]
/coinfarm [Normal Coinfarm]
/clicktrap [Hold ctrl+Click to use traps]
/sharpaim [Shoot more percise]
/alwaysinvis [always vanish ~ requires ghostperk]
/alwaystrail [Gives you a murderer trail]
/toggleall [toggles all features]
======================]]
				end
				notify("List of commands: "..cmds,Color3.fromRGB(20, 255, 197))
				print("List of commands: "..cmds,Color3.fromRGB(20, 255, 197))
				local sharpaimenabled=false


				local MAXCOINS = 40


				local CoinTypes = {"Heart", "Coin", "Token"}
				local CoinTargetType = nil


				local isEsp=false
				local isThirdPerson=false
				local isDeadChat=false
				local isalwaysblack=false
				local isgod=false
				local isalwaysinvis=false
				local isautogun=false
				local isSafecoinfarm=false
				local isCoinfarm=false
				local isCTRLClicktrap=false
				local isalwaystrail=false
				local isgunhitbox=false

				local Ownsinvis=false

				local isnormalgod=false

				local iscrouching=false

				userinputservice.InputBegan:Connect(function(input,gameprocessed)
					if input.UserInputType == Enum.UserInputType.Keyboard then
						if input.KeyCode==Enum.KeyCode.C then
							if focusedtextbox() ~= nil then else
								if iscrouching==true then
									iscrouching=false
									humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
									if humanoid ~= nil then
										humanoid.HipHeight=2.125
										for i,v in pairs(humanoid:GetPlayingAnimationTracks()) do
											if v.Animation.AnimationId == "rbxassetid://5792999092" then
												v:Stop()
											end
										end
									end
								else
									iscrouching=true
									humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
									if humanoid ~= nil then
										humanoid.HipHeight=0.8
										local anim = Instance.new("Animation") anim.AnimationId="rbxassetid://5792999092"
										humanoid:LoadAnimation(anim):Play()
									end
								end
							end
						end
					end
				end)

				local PlayerData = {}
				task.spawn(function() while true do WAIT(2) local plrgui = plr:FindFirstChildWhichIsA("PlayerGui") if plrgui ~= nil then local loadinggui = plrgui:FindFirstChild("Loading") if loadinggui ~= nil then loadinggui.Enabled=false end end PlayerData = game:GetService("ReplicatedStorage").Remotes.Extras.GetPlayerData:InvokeServer() GDAT.PlayerData = PlayerData end end)
				local func_esp = function(playertarget,role,coins)
					task.spawn(function()
						local plr = Players:FindFirstChild(playertarget)
						if plr ~= nil then
							if plr.Name == Players.LocalPlayer.Name then
							else
								if plr.Character ~= nil then
									local head = plr.Character:FindFirstChild("Head") or plr.Character:FindFirstChild("HumanoidRootPart")
									if head ~= nil then
										local bgui = head:FindFirstChildWhichIsA("BillboardGui")
										if bgui ~= nil then
											local txtlabel = bgui:FindFirstChildOfClass("TextLabel")
											if txtlabel ~= nil then
												txtlabel.Text = 'Name: '..plr.Name.." ["..tostring(coins).."]"
												if role == "murderer" then
													txtlabel.TextColor3 = Color3.new(0.8,0,0)
												elseif role == "sheriff" then
													txtlabel.TextColor3 = Color3.new(0,0,0.8)
												elseif role == "innocent" then
													txtlabel.TextColor3 = Color3.new(0,0.8,0)
												elseif role == "hero" then
													txtlabel.TextColor3=Color3.new(0.8,0.8,0)
												elseif role == "oldsheriff" then
													txtlabel.TextColor3=Color3.new(0.8,0.7,0.4)
												end
											end
										else
											local BillboardGui = Instance.new("BillboardGui")
											local TextLabel = Instance.new("TextLabel")
											BillboardGui.Adornee = head BillboardGui.Name = plr.Name BillboardGui.Parent = head
											BillboardGui.LightInfluence=0 BillboardGui.Size = UDim2.new(0, 100, 0, 150) BillboardGui.StudsOffset = Vector3.new(0, 1, 0) BillboardGui.AlwaysOnTop = true
											TextLabel.Parent = BillboardGui TextLabel.BackgroundTransparency = 1 TextLabel.TextTransparency = 0.5 TextLabel.Position = UDim2.new(0, 0, 0, -50) TextLabel.Size = UDim2.new(0, 100, 0, 100)
											TextLabel.Font = Enum.Font.SourceSansSemibold TextLabel.TextSize = 20 TextLabel.TextTransparency=0.7
											TextLabel.TextStrokeTransparency=0.7 TextLabel.TextColor3 = Color3.new(1, 1, 1) TextLabel.TextStrokeTransparency = 0.5
											TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom TextLabel.Text = 'Name: '..plr.Name.." ["..tostring(coins).."]" TextLabel.ZIndex = 10
											if role == "murderer" then
												TextLabel.TextColor3 = Color3.new(0.8,0,0)
											elseif role == "sheriff" then
												TextLabel.TextColor3 = Color3.new(0,0,0.8)
											elseif role == "innocent" then
												TextLabel.TextColor3 = Color3.new(0,0.8,0)
											elseif role == "hero" then
												TextLabel.TextColor3=Color3.new(0.8,0.8,0)
											elseif role == "oldsheriff" then
												TextLabel.TextColor3=Color3.new(0.8,0.7,0.4)
											elseif role == "gun" then
												TextLabel.TextColor3=Color3.new(0.8,0,0.8)
											end
										end
									end
									for i,v in pairs(plr.Character:GetChildren()) do
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
											if string.lower(v.Name):match("leg") or string.lower(v.Name):match("arm") or string.lower(v.Name):match("torso") or string.lower(v.Name):match("head") or string.lower(v.Name):match("root") then
												local checkforESP = v:FindFirstChildWhichIsA("BoxHandleAdornment")
												if checkforESP ~= nil then

													if role == "murderer" then checkforESP.Color3 = Color3.new(0.8,0,0)
													elseif role == "sheriff" then checkforESP.Color3 = Color3.new(0,0,0.8)
													elseif role == "innocent" then checkforESP.Color3 = Color3.new(0,0.8,0)
													elseif role == "hero" then checkforESP.Color3=Color3.new(0.8,0.8,0)
													elseif role == "oldsheriff" then checkforESP.Color3=Color3.new(0.8,0.7,0.4)
													elseif role == "gun" then checkforESP.Color3=Color3.new(0.8,0,0.8)end
												else
													local espPart = Instance.new("BoxHandleAdornment",v) espPart.Name="Visual"
													espPart.Transparency=0.75 espPart.Size=v.Size espPart.ZIndex=10
													espPart.AlwaysOnTop=true espPart.Adornee=v espPart.Visible=true
													if role == "murderer" then espPart.Color3 = Color3.new(0.8,0,0)
													elseif role == "sheriff" then espPart.Color3 = Color3.new(0,0,0.8)
													elseif role == "innocent" then espPart.Color3 = Color3.new(0,0.8,0)
													elseif role == "hero" then espPart.Color3=Color3.new(0.8,0.8,0)
													elseif role == "oldsheriff" then espPart.Color3=Color3.new(0.8,0.7,0.4)
													elseif role == "gun" then espPart.Color3=Color3.new(0.8,0,0.8)end
												end
											end
										end
									end
								end
							end
						end
					end)
				end

				CMDS = {
					["clicktrap"] = function()
						if isCTRLClicktrap==true then
							isCTRLClicktrap=false
							notify("CTRL+Click trap disabled.",Color3.new(1,0,0))
						else
							local MAXCPS = 20 -- Help prevent replication lag
							local CPS=0
							isCTRLClicktrap=true
							notify("CTRL+Click trap enabled!",Color3.new(0,1,0))
							local inputfunc = nil
							local inputfunc_1 = nil
							local mousefunc = nil
							local isholdingCTRL = false
							inputfunc=userinputservice.InputBegan:Connect(function(input) if focusedtextbox() ~= nil then else if input.KeyCode==Enum.KeyCode.LeftControl or input.KeyCode==Enum.KeyCode.RightControl then isholdingCTRL=true end end end)
							inputfunc_1=userinputservice.InputEnded:Connect(function(input) if focusedtextbox() ~= nil then else if input.KeyCode==Enum.KeyCode.LeftControl or input.KeyCode==Enum.KeyCode.RightControl then isholdingCTRL=false end end end)
							mousefunc=mouse.Button1Down:Connect(function()
								if plr.Character ~= nil then
									if plr.Character:FindFirstChild("Knife") ~= nil then
										local revent = plr.Character:FindFirstChildOfClass("RemoteEvent")
										if revent ~= nil then
											if not revent:GetAttribute("Deb") then 
												revent:FireServer("Slash")
												revent:SetAttribute("Deb","")
												wait(0.5)
												revent:SetAttribute("Deb",nil)
											end
										end
									end
								end
								if CPS > MAXCPS then
									warn("You are clicking too fast!")
								else
									if isholdingCTRL==true then
										if mouse.Target ~= nil then
											CPS=CPS+1
											replicatedstorage.TrapSystem.PlaceTrap:InvokeServer(mouse.Hit+Vector3.new(0,1,0))
										end
									end
								end
							end)
							while true do WAIT(0.5)if CPS <=0 then CPS=0 else CPS=CPS-5 end if isCTRLClicktrap==false or GDAT.Killed==true then  mousefunc:Disconnect()inputfunc:Disconnect()inputfunc_1:Disconnect() break  end end
						end
					end,
					["cointype"] = function()if CoinTargetType==nil then CoinTargetType = "Heart"elseif CoinTargetType == "Heart"then CoinTargetType = "Coin" elseif CoinTargetType == "Coin"then CoinTargetType = "Token"elseif CoinTargetType == "Token"then CoinTargetType = nil else CoinTargetType = "Coin" end notify("CoinTarget for farming is now: "..tostring(CoinTargetType),Color3.new(0,1,0))end,
					["thirdperson"] = function()if game.PlaceId==335132309 then if isThirdPerson==true then isThirdPerson=false notify("Thirdperson disabled.",Color3.new(1,0,0))else isThirdPerson=true notify("Thirdperson enabled!",Color3.new(0,1,0))local thirdpersonfunc = nil plr.CameraMode=Enum.CameraMode.Classic thirdpersonfunc=plr:GetPropertyChangedSignal("CameraMode"):Connect(function()if isThirdPerson==false then thirdpersonfunc:Disconnect()else plr.CameraMode=Enum.CameraMode.Classic end end)end end end,
					["sharpaim"] = function()
						if sharpaimenabled==false then
							sharpaimenabled=true notify("Sharpaim enabled!",Color3.new(0,1,0))

							local mousefunc = nil 
							mousefunc = mouse.Button1Down:Connect(function()
								if sharpaimenabled==false then mousefunc:Disconnect() end
								if plr.Character ~= nil then
									local gun = plr.Character:FindFirstChild("Gun")
									if gun ~= nil then
										if gun:FindFirstChild("KnifeLocal") ~= nil then gun.KnifeLocal.Disabled=true end
										if gun.KnifeServer:FindFirstChild("ShootGun") ~= nil then
											gun.KnifeServer.ShootGun:InvokeServer(1,mouse.Hit.Position,"AH")
										end
									end
								end
							end)
						else
							notify("Sharpaim disabled.",Color3.new(1,0,0))sharpaimenabled=false
						end
					end,
					["safecoinfarm"] = function()
						if isSafecoinfarm==false then
							isSafecoinfarm=true
							Isfarming=true
							GDAT.Showwarning=false
							GDAT.Showprinting=false
							notify("Safecoinfarm enabled!",Color3.new(0,1,0))

							local NoclipFunc = nil

							local CoinDump = Instance.new("Folder",replicatedstorage)
							CoinDump.Name = "CoinObjects_2"

							pcall(function()
								local part = replicatedstorage.CoinObjects.Coin.DecalPart 
								local oldp = Instance.new("ObjectValue",part)
								oldp.Name = "LastParent"
								oldp.Value=part.Parent
								part.Parent=CoinDump

								part = replicatedstorage.CoinObjects.Coin["2Part"]
								oldp = Instance.new("ObjectValue",part)
								oldp.Name = "LastParent"
								oldp.Value=part.Parent
								part.Parent=CoinDump

								part = replicatedstorage.CoinObjects.SpinningVisual.Part
								oldp = Instance.new("ObjectValue",part)
								oldp.Name = "LastParent"
								oldp.Value=part.Parent
								part.Parent=CoinDump

								part = replicatedstorage.CoinObjects.SpinningVisual.Part
								oldp = Instance.new("ObjectValue",part)
								oldp.Name = "LastParent"
								oldp.Value=part.Parent
								part.Parent=CoinDump

								part = replicatedstorage.CoinObjects.Coin.MainCoin
								part:SetAttribute("MeshId",part.MeshId)
								part:SetAttribute("TextureID",part.TextureID)
								part.TextureID = ""
								part.MeshId = ""

								part = replicatedstorage.CoinObjects.SpinningVisual.Coin
								part:SetAttribute("MeshId",part.MeshId)
								part:SetAttribute("TextureID",part.TextureID)
								part.TextureID = ""
								part.Meshid = ""
							end)

							task.spawn(function()
								NoclipFunc=runservice.Stepped:Connect(function()
									if PlayerData ~= nil then
										if PlayerData[plr.Name] ~= nil then
											if PlayerData[plr.Name]["Dead"]==false then
												local char = plr.Character
												if char ~= nil then
													for i,v in pairs(char:GetChildren()) do
														if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
															v.CanCollide=false
														end
													end
												end
											end
										end
									end
									if isSafecoinfarm==false or GDAT.Killed==true then 
										pcall(function()
											for i,v in pairs(replicatedstorage.CoinObjects:GetChildren()) do
												if v:GetAttribute("MeshId") ~=nil then
													v.MeshId = v:GetAttribute("MeshId")
													v:SetAttribute("MeshId",nil)
												end
												if v:GetAttribute("TextureID") ~=nil then
													v.TextureID = v:GetAttribute("TextureID")
													v:SetAttribute("TextureID",nil)
												end
											end

											for i,v in pairs(CoinDump:GetChildren()) do
												if v:FindFirstChild("LastParent") ~= nil then
													local dir = v.LastParent.Value
													v.LastParent:Destroy()
													v.Parent=dir
												end
											end
											CoinDump:Destroy()end)
										NoclipFunc:Disconnect() 
									end
								end)
							end)

							pcall(function()plr.PlayerScripts.ThrowingKnifeVisuals.Disabled=true warn("ThrowingKnifeVisuals!")end)
							pcall(function()plr.PlayerScripts.GameplayAnimations.Disabled=true warn("GameplayAnimations!")end)

							if Ownsinvis == true then
							else
								local char = plr.Character
								if char ~= nil then
									local head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
									if head ~= nil then
										replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
										WAIT(1)
										if head.Transparency >0 then
											Ownsinvis=true
										end
									end
								end

							end


							local delaytime=0.9
							local timelapsing=0.8

							local tweeninfo = TweenInfo.new(timelapsing,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,delaytime)

							local function getclosestcoin(PartToMove,coinstorage)
								local ISNIL=false
								if PartToMove == nil then return nil end
								if coinstorage == nil then return nil end
								if not PartToMove:IsDescendantOf(workspace) then return end
								if not coinstorage:IsDescendantOf(workspace) then return end
								local pscripts = Players.LocalPlayer:FindFirstChildWhichIsA("PlayerScripts")
								if pscripts ~= nil then for i,v in pairs(pscripts:GetDescendants()) do if v.ClassName == "LocalScript" then if v.Name:match("Chat") or v.Name:match("Visual") or v.Name:match("Stat") then else v.Disabled=true end end end end

								if PlayerData ~= nil then
									if PlayerData[plr.Name] ~= nil then
										local Userdead,UserRole,UserCoins = PlayerData[plr.Name]["Dead"],PlayerData[plr.Name]["Role"],tonumber(PlayerData[plr.Name]["Coins"])
										if Userdead == nil  then return nil end
										if UserRole == nil  then return nil end
										if UserCoins == nil  then return nil end
										local char = plr.Character
										local Human = char:FindFirstChildOfClass("Humanoid")
										if char ~= nil then
											PartToMove.Size=Vector3.new(2,2,9)
											if Human ~= nil then
												Human.PlatformStand=true
											end
										end
										if PartToMove:FindFirstChildOfClass("BodyVelocity") ~= nil then
											if PartToMove:FindFirstChildOfClass("Animation") then
											else
												if Human ~= nil then local Anim = Instance.new("Animation",PartToMove)Anim.AnimationId = "rbxassetid://4555816777"local Track = Human:LoadAnimation(Anim)Track:Play() Track:AdjustSpeed(0)end
											end
										else
											if Human ~= nil then local Anim = Instance.new("Animation",PartToMove)Anim.AnimationId = "rbxassetid://4555816777"local Track = Human:LoadAnimation(Anim)Track:Play() Track:AdjustSpeed(0)end
											local Bvel = Instance.new("BodyVelocity",PartToMove)
											Bvel.Name = "cool"
											Bvel.MaxForce = Vector3.new("inf","inf","inf")
											Bvel.Velocity=Vector3.new(0,0,0)
											Bvel.P=1250
										end
										if Userdead==true then
											for i=10,0,-1 do
												PartToMove.Velocity=Vector3.new(0,0,0)
												WAIT(0.1)
											end
										else
											if GDAT.AltAccounts ~= nil then
												for i,v in pairs(GDAT.AltAccounts) do
													local Player = Players:GetPlayerByUserId(v)
													if Player ~= nil then
														local char = Player.Character
														if char ~= nil then
															local HRP = char:FindFirstChild("HumanoidRootPart")
															if HRP ~= nil then
																if (HRP.Position - PartToMove.Position).Magnitude <= 10 then
																	if PlayerData[Player.Name] ~= nil then
																		local Coins = tonumber(PlayerData[Player.Name]["Coins"])
																		if Coins ~= nil then
																			if Coins < MAXCOINS then
																				PartToMove.CFrame = PartToMove.CFrame+Vector3.new(math.random(-150,150),math.random(50,50),math.random(-150,150))
																				for i=15,0,-1 do
																					PartToMove.Velocity=Vector3.new(0,0,0)
																					WAIT(0.1)
																				end
																			end
																		end
																	end
																end
															end
														end
													end
												end
											end
										end
										if Userdead==true then wait(0.5) else
											if not Ownsinvis then
												if UserRole == "Murderer" then
													local char = plr.Character
													if char ~= nil then
														PartToMove.Size=Vector3.new(2,2,13)
														local LowerTorso = char:FindFirstChild("LowerTorso")
														if LowerTorso ~= nil then
															local Root = LowerTorso:FindFirstChild("Root")
															if Root ~= nil then
																local oldcf = PartToMove.CFrame PartToMove.CFrame = CFrame.new(math.random(-1000,1000),50000000,math.random(-1000,1000))WAIT(4)Root:Destroy()WAIT(1.5)PartToMove.CFrame=oldcf
															end
														end
													end
												end
											end
											if UserCoins >= MAXCOINS then
												local char = plr.Character
												if char ~= nil then
													PartToMove.CFrame = PartToMove.CFrame -Vector3.new(0,30,0)
													WAIT(0.5)
													if char:FindFirstChildOfClass("Humanoid") then
													char:FindFirstChildOfClass("Humanoid"):ChangeState(15)
													end
													char:BreakJoints()
													if Ownsinvis==true then
														replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
														replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
													end
												end
											end
										end
									end
								end

								if CoinTargetType == nil then for i,v in pairs(coinstorage:GetChildren()) do if not coinstorage:IsDescendantOf(workspace) then break end local cointype = v:FindFirstChild("CoinType") if cointype ~= nil then if cointype.Value == "Coin" then else CoinTargetType = cointype.Value break end end end  end
								if CoinTargetType==nil then
									ISNIL=true
									CoinTargetType="Coin"
								end

								local coin = nil
								local dist = math.huge

								if PartToMove ~= nil and coinstorage ~= nil then


									for i,v in pairs(coinstorage:GetChildren()) do
										if (v.Position-PartToMove.Position).Magnitude < dist then
											local CoinType,Coin = v:FindFirstChild("CoinType"),v:FindFirstChild("Coin")
											if CoinType ~= nil and Coin ~= nil then
												if string.lower(CoinType.Value) == string.lower(CoinTargetType) then
													v.CanTouch=true
													if Coin.Transparency==0 then
														dist = (v.Position-PartToMove.Position).Magnitude
														coin=v
													else
														local Verify = Coin:FindFirstChild("MainCoin") or Coin:FindFirstChild("Coin")
														if Verify ~= nil then
															if Verify.Transparency ==0 then
																dist = (v.Position-PartToMove.Position).Magnitude
																coin=v
															end
														end
													end
												else
													v.CanTouch=false
												end
											end
										end
										if (v.Position -PartToMove.Position).Magnitude <= 4 then
											if v.CanTouch then
												local CoinType=v:FindFirstChild("CoinType")
												if CoinType ~= nil then
													if string.lower(CoinType.Value) == string.lower(CoinTargetType) then
														v.CFrame = PartToMove.CFrame
													end
												end
											end
										end
									end
								end

								if ISNIL==true then
									CoinTargetType=nil
								end
								if coin ~= nil then
									if not coin:GetAttribute("Strike") then
										coin:SetAttribute("Strike",1)
										wait(0.05)
									else
										if coin:GetAttribute("Strike") >3 then coin:Destroy() end
										coin:SetAttribute("Strike",coin:GetAttribute("Strike")+1)
										wait(0.05)
									end
								end
								return coin
							end

							local PartToMove = nil
							local head = nil

							while true do
								if Ownsinvis==true then
									if PlayerData[plr.Name] ~= nil then
										local char = plr.Character
										if char ~= nil then
											PartToMove = char:FindFirstChild("HumanoidRootPart")
											if PartToMove ~= nil then
												if char ~= nil then
													local head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
													if head ~= nil then
														if head.Transparency >0 then
														else
															replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
															WAIT(0.1)
														end
													end
												end
											end
										end
									end
								end
								timelapsing=0
								if isSafecoinfarm==false or GDAT.Killed==true then break end
								local coinstorage = nil

								repeat 
									WAIT(0.05)
									if PlayerData[plr.Name] ~= nil then
										local char = plr.Character
										if char ~= nil then
											PartToMove = char:FindFirstChild("HumanoidRootPart")
											if PartToMove ~= nil then
												if Ownsinvis==true then
													if char ~= nil then
														head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
														if head ~= nil then
															if head.Transparency >0 then
															else
																replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
																WAIT(0.1)
															end
														end
													end
												end
											end
										end
									end
									if isSafecoinfarm==false or GDAT.Killed==true then break end
									for i,v in pairs(workspace:GetChildren()) do
										if v:FindFirstChild("CoinContainer") ~= nil then
											coinstorage = v.CoinContainer
										end
									end
								until coinstorage ~= nil
								if coinstorage ~= nil then
									if isSafecoinfarm==false or GDAT.Killed==true then break end
									repeat 
										WAIT(0.01)
										if PlayerData[plr.Name] ~= nil then
											local char = plr.Character
											if char ~= nil then
												PartToMove = char:FindFirstChild("HumanoidRootPart")
												if PartToMove ~= nil then
													if char ~= nil then
														if Ownsinvis==true then
															local head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
															if head ~= nil then
																if head.Transparency >0 then
																else
																	replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
																	WAIT(0.1)
																end
															end
														end
													end
												end
											end
										end
										if not coinstorage:IsDescendantOf(workspace) then break end
										if isSafecoinfarm==false or GDAT.Killed==true then break end
										local Char = plr.Character
										if Char ~= nil then
											local Root = Char:FindFirstChild("HumanoidRootPart")
											if Root ~= nil then Root.CFrame = CFrame.new(0,0,0) Root.Velocity=Vector3.new(0,0,0) end
										end
									until #coinstorage:GetChildren() >1
									local Char = plr.Character
									if Char ~= nil then
										local Root = Char:FindFirstChild("HumanoidRootPart")
										if Root ~= nil then
											PartToMove = Root


											local isfullcoins=false

											local func = nil

											local MainGui = plr.PlayerGui:FindFirstChild("MainGUI")
											repeat  WAIT(0) MainGui = plr.PlayerGui:FindFirstChild("MainGUI") until MainGui ~= nil
											local Gamee = MainGui:FindFirstChild("Game")
											repeat  WAIT(0) Gamee = MainGui:FindFirstChild("Game") until Gamee ~= nil
											local CoinBag = Gamee:FindFirstChild("CoinBagFull")
											repeat  WAIT(0) CoinBag = Gamee:FindFirstChild("CoinBagFull") until CoinBag ~= nil
											isfullcoins=false
											func = CoinBag.Changed:Connect(function(a) 
												if a == "Visible" then
													if CoinBag.Visible==true then
														isfullcoins=true
														if Ownsinvis==true then replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false) end
														for i=8,0,-1 do
															local char = plr.Character
															if char ~= nil then
																char:BreakJoints()
															end
															WAIT(0.2)
														end
														if Ownsinvis==true then
															replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
															replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
														end
														func:Disconnect()
													end
												end

											end)
											if isSafecoinfarm==false or GDAT.Killed==true then break end

											local Player = nil

											local TweeninfoCopy = "nil"
											while true do
												WAIT(0.005)
												if not coinstorage:IsDescendantOf(workspace) then break end
												if isSafecoinfarm==false or GDAT.Killed==true then break end
												if PartToMove:IsDescendantOf(plr.Character) then else break end
												if isfullcoins == true then break end

												local closestcoin=getclosestcoin(PartToMove,coinstorage)


												if PlayerData ~= nil then
													if PlayerData[plr.Name] ~= nil then
														local UserDead,UserCoins = PlayerData[plr.Name]["Dead"],tonumber(PlayerData[plr.Name]["Coins"])
														if UserDead == nil  then return nil end
														if UserCoins == nil  then return nil end
														if UserDead==true then wait(0.5) else
															if UserCoins >= MAXCOINS then
																local char = plr.Character
																if char ~= nil then
																	PartToMove.CFrame = PartToMove.CFrame -Vector3.new(0,30,0)
																	WAIT(0.5)
																	char:BreakJoints()
																	if Ownsinvis==true then
																		replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
																		replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
																	end
																end
															end
														end
													end
												end

												if closestcoin ~= nil then
													if PlayerData[plr.Name] ~= nil then
														local UserDead,UserCoins = PlayerData[plr.Name]["Dead"],tonumber(PlayerData[plr.Name]["Coins"])
														if UserDead ~= nil and UserCoins ~= nil then
															if UserDead==true then wait(0.5) else
																if UserCoins >= MAXCOINS then
																	local char = plr.Character
																	if char ~= nil then
																		PartToMove.CFrame = PartToMove.CFrame -Vector3.new(0,30,0)
																		WAIT(0.15)
																		char:BreakJoints()
																		if Ownsinvis==true then
																			replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
																			replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false)
																		end
																	end
																end
																local Coin = closestcoin:FindFirstChild("Coin")
																if Coin ~= nil then
																	if Coin.Transparency==0 then
																		local RealCoin = Coin
																		if RealCoin ~= nil then
																			if RealCoin.Transparency >0 then else
																				if (closestcoin.Position -PartToMove.Position).Magnitude >= 0.7 then
																					local properties = {}
																					properties.CFrame = CFrame.new(closestcoin.Position-Vector3.new(0,4,0))*CFrame.Angles(math.rad(90),0,0)

																					if TweeninfoCopy ~= nil then
																						if (closestcoin.Position -PartToMove.Position).Magnitude <= 6 then
																							TweeninfoCopy = TweenInfo.new(0.1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.02)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 9 then
																							TweeninfoCopy = TweenInfo.new(0.13,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.05)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 12 then
																							TweeninfoCopy = TweenInfo.new(0.17,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.1)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 15 then
																							TweeninfoCopy = TweenInfo.new(0.225,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.15)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 19 then
																							TweeninfoCopy = TweenInfo.new(0.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.175)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 22 then
																							TweeninfoCopy = TweenInfo.new(0.5,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.225)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 25 then
																							TweeninfoCopy = TweenInfo.new(1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.3)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 20 then
																							TweeninfoCopy = TweenInfo.new(1.15,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.325)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 35 then
																							TweeninfoCopy = TweenInfo.new(1.25,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.345)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 40 then
																							TweeninfoCopy = TweenInfo.new(1.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.355)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 45 then
																							TweeninfoCopy = TweenInfo.new(1.45,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.365)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 60 then
																							TweeninfoCopy = TweenInfo.new(1.6,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.39)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 65 then
																							TweeninfoCopy = TweenInfo.new(1.65,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.395)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 70 then
																							TweeninfoCopy = TweenInfo.new(1.7,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.4)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 75 then
																							TweeninfoCopy = TweenInfo.new(1.725,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.405)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 80 then
																							TweeninfoCopy = TweenInfo.new(1.75,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.41)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 200 then
																							TweeninfoCopy = tweeninfo
																						else
																							TweeninfoCopy = TweenInfo.new(4,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,1)
																						end
																					else TweeninfoCopy = TweenInfo.new(0.8,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0)
																					end


																					local Tween = tservice:Create(PartToMove,TweeninfoCopy,properties)
																					Tween:Play()

																					local ffff = nil

																					local tweenfinished=false
																					local coincollectedbeforetouched=false
																					ffff =RealCoin.Changed:Connect(function()
																						if not RealCoin:IsDescendantOf(workspace) or RealCoin.Transparency>0 then
																							tweenfinished=true
																							Tween:Cancel()
																							if (closestcoin.Position - PartToMove.Position).Magnitude >1 then
																								coincollectedbeforetouched=true
																							end
																							ffff:Disconnect()
																						end
																					end)


																					Tween.Completed:Connect(function()
																						tweenfinished=true
																					end)
																					repeat runservice.Heartbeat:Wait() if RealCoin.Transparency ==0 or RealCoin.LocalTransparencyModifier ==0 then else Tween:Cancel() break end PartToMove.Velocity=Vector3.new(0,0.1,0)
																					until tweenfinished==true or coincollectedbeforetouched==true
																					if coincollectedbeforetouched==true then
																						TweeninfoCopy=nil
																					else
																						if math.round(game:GetService("Stats").Workspace.Heartbeat:GetValue()) > 3 then 
																							WAIT(0.05)
																						end
																					end
																				end
																			end
																		end
																	else
																		local RealCoin = Coin:FindFirstChild("Coin") or Coin:FindFirstChild("MainCoin")
																		if RealCoin ~= nil then
																			if RealCoin.Transparency >0 then else
																				if (closestcoin.Position -PartToMove.Position).Magnitude >= 0.7 then
																					local properties = {}
																					properties.CFrame = CFrame.new(closestcoin.Position-Vector3.new(0,4,0))*CFrame.Angles(math.rad(90),0,0)

																					if TweeninfoCopy ~= nil then
																						if (closestcoin.Position -PartToMove.Position).Magnitude <= 6 then
																							TweeninfoCopy = TweenInfo.new(0.1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.02)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 9 then
																							TweeninfoCopy = TweenInfo.new(0.13,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.05)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 12 then
																							TweeninfoCopy = TweenInfo.new(0.17,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.1)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 15 then
																							TweeninfoCopy = TweenInfo.new(0.225,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.15)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 19 then
																							TweeninfoCopy = TweenInfo.new(0.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.175)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 22 then
																							TweeninfoCopy = TweenInfo.new(0.5,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.225)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 25 then
																							TweeninfoCopy = TweenInfo.new(1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.3)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 20 then
																							TweeninfoCopy = TweenInfo.new(1.15,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.325)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 35 then
																							TweeninfoCopy = TweenInfo.new(1.25,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.345)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 40 then
																							TweeninfoCopy = TweenInfo.new(1.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.355)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 45 then
																							TweeninfoCopy = TweenInfo.new(1.45,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.365)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 60 then
																							TweeninfoCopy = TweenInfo.new(1.6,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.39)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 65 then
																							TweeninfoCopy = TweenInfo.new(1.65,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.395)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 70 then
																							TweeninfoCopy = TweenInfo.new(1.7,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.4)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 75 then
																							TweeninfoCopy = TweenInfo.new(1.725,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.405)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 80 then
																							TweeninfoCopy = TweenInfo.new(1.75,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.41)
																						elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 200 then
																							TweeninfoCopy = tweeninfo
																						else
																							TweeninfoCopy = TweenInfo.new(4,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,1)
																						end
																					else TweeninfoCopy = TweenInfo.new(0.8,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0)
																					end


																					local Tween = tservice:Create(PartToMove,TweeninfoCopy,properties)
																					Tween:Play()

																					local ffff = nil

																					local tweenfinished=false
																					local coincollectedbeforetouched=false
																					ffff =RealCoin.Changed:Connect(function()
																						if not RealCoin:IsDescendantOf(workspace) or RealCoin.Transparency>0 then
																							tweenfinished=true
																							Tween:Cancel()
																							if (closestcoin.Position - PartToMove.Position).Magnitude >1 then
																								coincollectedbeforetouched=true
																							end
																							ffff:Disconnect()
																						end
																					end)


																					Tween.Completed:Connect(function()
																						tweenfinished=true
																					end)
																					repeat runservice.Heartbeat:Wait() if RealCoin.Transparency ==0 or RealCoin.LocalTransparencyModifier ==0 then else Tween:Cancel() break end PartToMove.Velocity=Vector3.new(0,0.1,0)
																					until tweenfinished==true or coincollectedbeforetouched==true
																					if coincollectedbeforetouched==true then
																						TweeninfoCopy=nil
																					else
																						if math.round(game:GetService("Stats").Workspace.Heartbeat:GetValue()) >= 3 then 
																							WAIT(0.05)
																						end
																					end
																				end
																			end
																		end
																	end
																end
															end
														end
													end
												end

												if not coinstorage:IsDescendantOf(workspace) then break end
											end
										end
									end
								end


								if isSafecoinfarm==false or GDAT.Killed==true then break end


								WAIT(0.065)
							end




						else
							local char = plr.Character if char ~= nil then local HRP,Human = char:FindFirstChild("HumanoidRootPart"),char:FindFirstChildOfClass("Humanoid")if HRP ~= nil then if HRP:FindFirstChildOfClass("BodyVelocity") then HRP:FindFirstChildOfClass("BodyVelocity"):Destroy()end end if Human ~= nil then Human.PlatformStand=false end end
							GDAT.Showprinting=true
							GDAT.Showwarning=true
							Isfarming=false
							isSafecoinfarm=false
							notify("Safecoinfarm disabled.",Color3.new(1,0,0))
							pcall(function()plr.PlayerScripts.ThrowingKnifeVisuals.Disabled=false print("ThrowingKnifeVisuals!")end)
							pcall(function()plr.PlayerScripts.GameplayAnimations.Disabled=false print("GameplayAnimations!")end)
						end
					end,
					["coinfarm"] = function()
						if isCoinfarm==false then
							isCoinfarm=true
							notify("Coinfarm enabled!",Color3.new(0,1,0))


							local delaytime=0.775
							local timelapsing=0.9

							local tweeninfo = TweenInfo.new(timelapsing,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,delaytime)

							local NoclipFunc = nil

							NoclipFunc=runservice.Stepped:Connect(function()
								if PlayerData ~= nil then
									if PlayerData[plr.Name] ~= nil then
										if PlayerData[plr.Name]["Dead"]==false then
											local char = plr.Character
											if char ~= nil then
												for i,v in pairs(char:GetChildren()) do
													if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
														v.CanCollide=false
													end
												end
											end
										end
									end
								end
								if isSafecoinfarm==false or GDAT.Killed==true then NoclipFunc:Disconnect() end
							end)

							local function getclosestcoin(PartToMove,coinstorage)
								local ISNIL = false
								pcall(function()
									if PlayerData ~= nil then
										if PlayerData[plr.Name] ~= nil then
											local char = plr.Character
											if char ~= nil then
												PartToMove.Size=Vector3.new(2,2,9)
												local Human = char:FindFirstChildOfClass("Humanoid")
												if Human ~= nil then
													Human.PlatformStand=true
													if PartToMove:FindFirstChildOfClass("BodyVelocity") ~= nil then
														if PartToMove:FindFirstChildOfClass("Animation") then
														else
															if Human ~= nil then local Anim = Instance.new("Animation",PartToMove)Anim.AnimationId = "rbxassetid://4555816777"local Track = Human:LoadAnimation(Anim)Track:Play() Track:AdjustSpeed(0)end
														end
													else
														if Human ~= nil then
															local Anim = Instance.new("Animation",PartToMove)Anim.AnimationId = "rbxassetid://4555816777"local Track = Human:LoadAnimation(Anim)Track:Play() Track:AdjustSpeed(0)end
														local Bvel = Instance.new("BodyVelocity",PartToMove)
														Bvel.Name = "cool"
														Bvel.MaxForce = Vector3.new("inf","inf","inf")
														Bvel.Velocity=Vector3.new(0,0,0)
														Bvel.P=1250
													end
												end
											end
											if PlayerData[plr.Name]["Dead"]==true then
												for i=10,0,-1 do
													PartToMove.Velocity=Vector3.new(0,0,0)
													WAIT(0.1)
												end
											else
												if GDAT.AltAccounts ~= nil then
													for i,v in pairs(GDAT.AltAccounts) do
														local Player = Players:GetPlayerByUserId(v)
														if Player ~= nil then
															local char = Player.Character
															if char ~= nil then
																local HRP,Human = char:FindFirstChild("HumanoidRootPart"),char:FindFirstChildOfClass("Humanoid")
																if HRP ~= nil then
																	if (HRP.Position - PartToMove.Position).Magnitude <= 10 then
																		PartToMove.CFrame = PartToMove.CFrame+Vector3.new(math.random(-150,150),math.random(50,50),math.random(-150,150))
																		for i=15,0,-1 do
																			if Human ~= nil then
																				Human.PlatformStand=true
																			end
																			PartToMove.Velocity=Vector3.new(0,0,0)
																			WAIT(0.1)
																		end
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end)
								if CoinTargetType == nil then for i,v in pairs(coinstorage:GetChildren()) do if not coinstorage:IsDescendantOf(workspace) then break end local cointype = v:FindFirstChild("CoinType") if cointype ~= nil then if cointype.Value == "Coin" then else CoinTargetType = cointype.Value break end end end  end
								if CoinTargetType==nil then
									ISNIL=true
									CoinTargetType="Coin"
								end

								local coin = nil
								local dist = math.huge

								pcall(function()
									for i,v in pairs(coinstorage:GetChildren()) do
										if (v.Position-PartToMove.Position).Magnitude < dist then
											local CoinType,Coin = v:FindFirstChild("CoinType"),v:FindFirstChild("Coin")
											if CoinType ~= nil and Coin ~= nil then
												if string.lower(CoinType.Value) == string.lower(CoinTargetType) then
													v.CanTouch=true
													if Coin.Transparency==0 then
														dist = (v.Position-PartToMove.Position).Magnitude
														coin=v
													else
														local Verify = Coin:FindFirstChild("MainCoin") or Coin:FindFirstChild("Coin")
														if Verify ~= nil then
															if Verify.Transparency ==0 then
																dist = (v.Position-PartToMove.Position).Magnitude
																coin=v
															end
														end
													end
												else
													v.CanTouch=false
												end
											end
										end
										if (v.Position -PartToMove.Position).Magnitude <= 4 then
											if v.CanTouch then
												local CoinType=v:FindFirstChild("CoinType")
												if CoinType ~= nil then
													if string.lower(CoinType.Value) == string.lower(CoinTargetType) then
														v.CFrame = PartToMove.CFrame
													else
														v.CanTouch=false
													end
												end
											end
										end
									end
								end)

								if ISNIL==true then
									CoinTargetType=nil
								end
								if coin ~= nil then
									if not coin:GetAttribute("Strike") then
										coin:SetAttribute("Strike",1)
										wait(0.05)
									else
										if coin:GetAttribute("Strike") >3 then coin:Destroy() end
										coin:SetAttribute("Strike",coin:GetAttribute("Strike")+1)
										wait(0.05)
									end
								end
								return coin
							end

							local PartToMove = nil

							while true do
								PartToMove = nil
								if isCoinfarm==false or GDAT.Killed==true then break end
								local coinstorage = nil

								repeat 
									WAIT(0.25)
									if isCoinfarm==false or GDAT.Killed==true then break end
									for i,v in pairs(workspace:GetChildren()) do
										if v:FindFirstChild("CoinContainer") ~= nil then
											coinstorage = v.CoinContainer
										end
									end
								until coinstorage ~= nil
								if coinstorage ~= nil then
									if isCoinfarm==false or GDAT.Killed==true then break end
									repeat 
										WAIT(0.07)
										if not coinstorage:IsDescendantOf(workspace) then break end
										if isCoinfarm==false or GDAT.Killed==true then break end
									until #coinstorage:GetChildren() >1
									PartToMove = plr.Character.HumanoidRootPart


									local isfullcoins=false

									local roundfunc = nil
									local func = nil

									local MainGui = plr.PlayerGui:FindFirstChild("MainGUI")
									repeat WAIT(0.015) MainGui = plr.PlayerGui:FindFirstChild("MainGUI") until MainGui ~= nil
									local Gamee = MainGui:FindFirstChild("Game")
									repeat WAIT(0.015) Gamee = MainGui:FindFirstChild("Game") until Gamee ~= nil
									local CoinBag = Gamee:FindFirstChild("CoinBagFull")
									repeat WAIT(0.015) CoinBag = Gamee:FindFirstChild("CoinBagFull") until CoinBag ~= nil
									roundfunc = replicatedstorage.Gameplay.RoundStart.OnClientEvent:Connect(function()
										isfullcoins=false
										func = CoinBag.Changed:Connect(function(a) 
											if a == "Visible" then
												if CoinBag.Visible==true then
													isfullcoins=true
													func:Disconnect()
													roundfunc:Disconnect()
												end
											end
										end)


									end)
									if isCoinfarm==false or GDAT.Killed==true then break end

									local TweeninfoCopy = "nil"
									local Player = nil
									while true do
										WAIT(0.005)
										WAIT(0.15)
										if not coinstorage:IsDescendantOf(workspace) then break end
										if isCoinfarm==false or GDAT.Killed==true then break end
										if PartToMove:IsDescendantOf(plr.Character) then else break end
										if isfullcoins == true then break end

										local closestcoin=getclosestcoin(PartToMove,coinstorage)

										if closestcoin ~= nil then
											if PlayerData[plr.Name] ~= nil then
												if PlayerData[plr.Name]["Dead"]==true then wait(0.5) else
													local Coin = closestcoin:FindFirstChild("Coin")
													if Coin ~= nil then
														if Coin.Transparency == 0 then
															local RealCoin = Coin
															if RealCoin ~= nil then
																if RealCoin.Transparency >0 then else
																	if (closestcoin.Position -PartToMove.Position).Magnitude >= 0.7 then
																		local properties = {}
																		properties.CFrame = CFrame.new(closestcoin.Position-Vector3.new(0,4,0))*CFrame.Angles(math.rad(90),0,0)

																		if TweeninfoCopy ~= nil then
																			if (closestcoin.Position -PartToMove.Position).Magnitude <= 6 then
																				TweeninfoCopy = TweenInfo.new(0.08,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.02)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 9 then
																				TweeninfoCopy = TweenInfo.new(0.1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.05)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 12 then
																				TweeninfoCopy = TweenInfo.new(0.13,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.1)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 15 then
																				TweeninfoCopy = TweenInfo.new(0.175,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.15)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 19 then
																				TweeninfoCopy = TweenInfo.new(0.25,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.175)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 22 then
																				TweeninfoCopy = TweenInfo.new(0.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.225)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 25 then
																				TweeninfoCopy = TweenInfo.new(0.45,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.3)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 20 then
																				TweeninfoCopy = TweenInfo.new(0.75,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.325)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 35 then
																				TweeninfoCopy = TweenInfo.new(0.85,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.345)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 500 then
																				TweeninfoCopy = tweeninfo
																			else
																				TweeninfoCopy = TweenInfo.new(4,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,1)
																			end
																		else TweeninfoCopy = TweenInfo.new(0.8,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0)
																		end


																		local Tween = tservice:Create(PartToMove,TweeninfoCopy,properties)

																		Tween:Play()

																		local ffff = nil

																		local tweenfinished=false
																		local coincollectedbeforetouched=false
																		ffff =RealCoin.Changed:Connect(function()
																			if not RealCoin:IsDescendantOf(workspace) or RealCoin.Transparency>0 then
																				tweenfinished=true
																				Tween:Cancel()
																				if (closestcoin.Position - PartToMove.Position).Magnitude >1 then
																					coincollectedbeforetouched=true TweeninfoCopy=nil
																				end
																				ffff:Disconnect()
																			end
																		end)


																		Tween.Completed:Connect(function()
																			tweenfinished=true
																		end)
																		repeat runservice.Heartbeat:Wait() if RealCoin.Transparency ==0 or RealCoin.LocalTransparencyModifier ==0 then else Tween:Cancel() break end PartToMove.Velocity=Vector3.new(0,0,0.1)
																		until tweenfinished==true or coincollectedbeforetouched==true
																		if coincollectedbeforetouched==false then
																			WAIT(0.16) else TweeninfoCopy=nil
																		end
																	end
																end
															end
														else
															local RealCoin = Coin:FindFirstChild("Coin") or Coin:FindFirstChild("MainCoin")
															if RealCoin ~= nil then
																if RealCoin.Transparency >0 then else
																	if (closestcoin.Position -PartToMove.Position).Magnitude >= 0.7 then
																		local properties = {}
																		properties.CFrame = CFrame.new(closestcoin.Position-Vector3.new(0,4,0))*CFrame.Angles(math.rad(90),0,0)

																		if TweeninfoCopy ~= nil then
																			if (closestcoin.Position -PartToMove.Position).Magnitude <= 6 then
																				TweeninfoCopy = TweenInfo.new(0.08,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.02)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 9 then
																				TweeninfoCopy = TweenInfo.new(0.1,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.05)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 12 then
																				TweeninfoCopy = TweenInfo.new(0.13,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.1)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 15 then
																				TweeninfoCopy = TweenInfo.new(0.175,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.15)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 19 then
																				TweeninfoCopy = TweenInfo.new(0.25,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.175)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 22 then
																				TweeninfoCopy = TweenInfo.new(0.35,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.225)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 25 then
																				TweeninfoCopy = TweenInfo.new(0.45,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.3)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 20 then
																				TweeninfoCopy = TweenInfo.new(0.75,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.325)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 35 then
																				TweeninfoCopy = TweenInfo.new(0.85,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0.345)
																			elseif (closestcoin.Position -PartToMove.Position).Magnitude <= 500 then
																				TweeninfoCopy = tweeninfo
																			else
																				TweeninfoCopy = TweenInfo.new(4,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,1)
																			end
																		else TweeninfoCopy = TweenInfo.new(0.8,Enum.EasingStyle.Linear,Enum.EasingDirection.In,0,false,0)
																		end


																		local Tween = tservice:Create(PartToMove,TweeninfoCopy,properties)

																		Tween:Play()

																		local ffff = nil

																		local tweenfinished=false
																		local coincollectedbeforetouched=false
																		ffff =RealCoin.Changed:Connect(function()
																			if not RealCoin:IsDescendantOf(workspace) or RealCoin.Transparency>0 then
																				tweenfinished=true
																				Tween:Cancel()
																				if (closestcoin.Position - PartToMove.Position).Magnitude >1 then
																					coincollectedbeforetouched=true TweeninfoCopy=nil
																				end
																				ffff:Disconnect()
																			end
																		end)


																		Tween.Completed:Connect(function()
																			tweenfinished=true
																		end)
																		repeat runservice.Heartbeat:Wait() if RealCoin.Transparency ==0 or RealCoin.LocalTransparencyModifier ==0 then else Tween:Cancel() break end PartToMove.Velocity=Vector3.new(0,0.1,0)
																		until tweenfinished==true or coincollectedbeforetouched==true
																		if coincollectedbeforetouched==false then
																			WAIT(0.06) else TweeninfoCopy=nil
																		end
																	end
																end
															end
														end
													end
												end
											end
										end


										if not coinstorage:IsDescendantOf(workspace) then break end

									end
								end


								if isCoinfarm==false or GDAT.Killed==true then break end




								WAIT(0.2)
							end


						else
							isCoinfarm=false
							notify("Coinfarm disabled.",Color3.new(1,0,0))
						end
					end,
					["gunhitbox"] = function()
						if isgunhitbox==true then
							isgunhitbox=false
							if workspace:FindFirstChild("GunDrop") ~= nil then
								workspace:FindFirstChild("GunDrop").Size=Vector3.new(3,3,3)
							end
							notify("Gunhitbox disabled.",Color3.new(1,0,0))
						else
							isgunhitbox=true
							notify("Gunhitbox enabled.",Color3.new(0,1,0))
							local autogungrab_func = nil
							if workspace:FindFirstChild("GunDrop") ~= nil then
								workspace:FindFirstChild("GunDrop").Size=Vector3.new(13,13,13)
							end
							autogungrab_func=workspace.ChildAdded:Connect(function(object)
								if isgunhitbox==false then autogungrab_func:Disconnect() end
								if object.Name == "GunDrop" then
									object.Size=Vector3.new(15,15,15)
								end
							end)
						end
					end,
					["autogun"] = function()
						if isautogun==true then
							isautogun=false
							notify("Autogun disabled.",Color3.new(1,0,0))
						else
							isautogun=true
							notify("Autogun enabled!",Color3.new(0,1,0))
							local autogungrab_func = nil

							autogungrab_func=workspace.ChildAdded:Connect(function(object)
								if object.Name == "GunDrop" then
									if PlayerData ~= nil then
										if PlayerData[plr.Name] ~= nil then
											if PlayerData[plr.Name]["Role"] == "Innocent" and PlayerData[plr.Name]["Dead"] == false then
												local HRP = plr.Character:FindFirstChild("HumanoidRootPart")
												if HRP ~= nil then
													if (object.Position - HRP.Position).Magnitude <= 7 then
														repeat wait(0.1)
															human = plr.Character:FindFirstChildOfClass("Humanoid") if human ~= nil then human:MoveTo(object.Position) end
															firetouchinterest(HRP,object,0)firetouchinterest(HRP,object,1)
														until not object:IsDescendantOf(workspace)
													else
														local rayOrigin = object.Position
														local partsallowed = {}
														for a,b in pairs(workspace:GetPartBoundsInRadius(object.Position-Vector3.new(0,4,0),10)) do
															if b:IsGrounded() then table.insert(partsallowed,b) end
														end
														local rayDirection = Vector3.new(0, -50, 0)

														local raycastParams = RaycastParams.new()
														raycastParams.FilterDescendantsInstances = partsallowed
														raycastParams.FilterType = Enum.RaycastFilterType.Whitelist
														raycastParams.IgnoreWater = true

														local raycastResult = workspace:Raycast(rayOrigin, rayDirection, raycastParams)


														local oldpos = HRP.CFrame local oldvel = HRP.Velocity
														repeat wait(0.1)
															if raycastResult then
																if raycastResult.Distance <= 3.5 then
																	HRP.CFrame = object.CFrame*CFrame.Angles(math.rad(90),0,0)-Vector3.new(0,3.5,0) HRP.Velocity=Vector3.new(0,0,0)
																else
																	HRP.CFrame = object.CFrame*CFrame.Angles(math.rad(90),0,0)+Vector3.new(0,3.5,0) HRP.Velocity=Vector3.new(0,0,0)
																end
															else
																print("Regular")
																HRP.CFrame = object.CFrame*CFrame.Angles(math.rad(90),0,0)-Vector3.new(0,3.5,0) HRP.Velocity=Vector3.new(0,0,0)
															end
															firetouchinterest(HRP,object,0)firetouchinterest(HRP,object,1)
														until not object:IsDescendantOf(workspace)
														HRP.CFrame = oldpos
														HRP.Velocity=oldvel
														human = plr.Character:FindFirstChildOfClass("Humanoid") if human ~= nil then if human.PlatformStand==false then human:ChangeState("Jumping") end end
													end
												end
											end
										end
									end
								end
							end)

							while true do WAIT(0.3) if GDAT.Killed==true then if autogungrab_func then autogungrab_func:Disconnect() end break end if isautogun==false then if autogungrab_func then autogungrab_func:Disconnect() end break end end
						end
					end,
					["toggleall"] = function()for i,v in pairs(CMDS) do if i == "toggleall" or i == "cointype" or i == "alwaystrail" or i == "coinfarm" or i == "safecoinfarm" or i == "alwaysinvis" then else task.spawn(function() v() end) end end end,
					["alwaystrail"] = function()
						if isalwaystrail==true then
							isalwaystrail=false
							notify("Alwaystrail disabled.",Color3.new(1,0,0))
							pcall(function() plr.Character.SpeedTrail.Toggle:FireServer(false) end)
						else
							pcall(function() plr.Character.SpeedTrail.Toggle:FireServer(true) end)
							isalwaystrail=true
							notify("Alwaystrail enabled!",Color3.new(0,1,0))
							local addedevent = nil
							addedevent = plr.CharacterAdded:Connect(function(char)
								if isalwaystrail==false then addedevent:Disconnect() end
								local charr = char
								local uppertorso = nil
								local speedtrail = nil
								while charr:IsDescendantOf(workspace) do
									uppertorso=nil
									speedtrail=nil
									if isalwaystrail==false then addedevent:Disconnect() break end
									if not charr:IsDescendantOf(workspace) then break end
									uppertorso = char:FindFirstChild("UpperTorso")
									if uppertorso~= nil then
										speedtrail = uppertorso:FindFirstChildOfClass("Trail")
										if speedtrail ~= nil then
											if speedtrail.Enabled==false then
												plr.Character.SpeedTrail.Toggle:FireServer(true) 
												WAIT(0.2)
											else 
												WAIT(0.5)
											end
										end
									end

									WAIT(0.3)
								end
							end)
						end
					end,
					["alwaysinvis"] = function()
						if isalwaysinvis==true then
							isalwaysinvis=false
							notify("Alwaysinvis disabled.",Color3.new(1,0,0))
						else
							isalwaysinvis=true
							notify("Alwaysinvis enabled!",Color3.new(0,1,0))
							local ownsinvis=nil
							local addedevent = nil
							addedevent = plr.CharacterAdded:Connect(function(char)
								if isalwaysinvis==false then addedevent:Disconnect() end
								WAIT(0.5)
								if Ownsinvis==false then
									if ownsinvis ~= nil then 
										local head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
										for i=5,0,-1 do
											replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
											if head.Transparency>0 then Ownsinvis=true break end
											WAIT(2)
										end
									else
										local head = char:FindFirstChild("Head") or char:FindFirstChild("UpperTorso")
										if head ~= nil then
											replicatedstorage.Remotes.Gameplay.Stealth:FireServer(true)
											WAIT(2)
											if head.Transparency>0 then Ownsinvis=true ownsinvis=true end
										end

									end
								end
								local humanoid = char:FindFirstChildOfClass("Humanoid")
								if humanoid ~= nil then
									humanoid.Died:Connect(function() replicatedstorage.Remotes.Gameplay.Stealth:FireServer(false) end)
								end
							end)
						end
					end,
					["deadchat"] = function() if isDeadChat==false then isDeadChat=true notify("dead chat enabled!",Color3.new(0,1,0))local deadchatfunc = nil local args = {[1] = "/join dead",[2] = "normalchat"} deadchatfunc =replicatedstorage.Gameplay.RoundStart.OnClientEvent:Connect(function() game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))end) while true do WAIT(0.2) if isDeadChat==false then deadchatfunc:Disconnect() break end end else notify("dead chat disabled.",Color3.new(1,0,0)) isDeadChat=false end end,
					["esp"] = function()
						if isEsp==false then
							isEsp=true notify("Esp enabled!",Color3.new(0,1,0))
							local func1 = nil
							task.spawn(function()
								while true do
									if GDAT.Killed==true then break end
									if isEsp==false then break end
									local GDrop = workspace:FindFirstChild("GunDrop")
									if GDrop ~= nil then
										local EspPart = GDrop:FindFirstChildOfClass("BoxHandleAdornment")
										local bgui= GDrop:FindFirstChildOfClass("BillboardGui")
										if bgui ~= nil then
										else
											local BillboardGui = Instance.new("BillboardGui")
											local TextLabel = Instance.new("TextLabel")
											BillboardGui.Adornee = GDrop BillboardGui.Name = "GunDropp" BillboardGui.Parent = GDrop
											BillboardGui.LightInfluence=0 BillboardGui.Size = UDim2.new(0, 100, 0, 150) BillboardGui.StudsOffset = Vector3.new(0, 1, 0) BillboardGui.AlwaysOnTop = true
											TextLabel.Parent = BillboardGui TextLabel.BackgroundTransparency = 1 TextLabel.TextTransparency = 0.5 TextLabel.Position = UDim2.new(0, 0, 0, -50) TextLabel.Size = UDim2.new(0, 100, 0, 100)
											TextLabel.Font = Enum.Font.SourceSansSemibold TextLabel.TextSize = 20 TextLabel.TextTransparency=0.7
											TextLabel.TextStrokeTransparency=0.7 TextLabel.TextColor3 = Color3.new(1, 1, 1) TextLabel.TextStrokeTransparency = 0.5
											TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom TextLabel.Text = 'Gundrop' TextLabel.ZIndex = 10
											TextLabel.TextColor3=Color3.new(0.8,0,0.8)

										end
										if EspPart ~= nil then
										else
											local espPart = Instance.new("BoxHandleAdornment",GDrop) espPart.Name="Visual"
											espPart.Transparency=0.75 espPart.Size=GDrop.Size espPart.ZIndex=10
											espPart.AlwaysOnTop=true espPart.Adornee=GDrop espPart.Visible=true

											espPart.Color3=Color3.new(0.8,0,0.8)
										end

									end
									for i,v in pairs(PlayerData) do 
										if typeof(v) == "table" then
											if v["Dead"] == true then
												if v["Role"] == "Sheriff" or v["Role"] == "Hero" then
													func_esp(i,"oldsheriff",v["Coins"]) -- i is referring to player's name
												else
													func_esp(i,"innocent",v["Coins"]) -- i is referring to player's name
												end
											else
												func_esp(i,string.lower(v["Role"]),v["Coins"]) -- i is referring to player's name
											end
										end
									end
									WAIT(2)
								end
							end)

							func1 = replicatedstorage.UpdatePlayerData.OnClientEvent:Connect(function(a,b,c,d) 
								if typeof(a) == "table" then  
									for i,v in pairs(a) do  --warn("table inside of "..i)
										if typeof(v) == "table" then
											if v["Dead"] == true then
												func_esp(i,"innocent",v["Coins"]) -- i is referring to player's name
											else
												func_esp(i,string.lower(v["Role"]),v["Coins"]) -- i is referring to player's name
											end
										end
									end 
								end 
							end)
							task.spawn(function()
								while true do WAIT(.2) if isEsp==false then func1:Disconnect()break end end
							end)
						else 
							isEsp=false notify("Esp disabled.",Color3.new(1,0,0))
						end
					end,
					["alwaysblack"] = function()if game.PlaceId == 335132309 then task.spawn(function() if isalwaysblack==false then isalwaysblack=true notify("alwaysblack enabled.",Color3.fromRGB(0,255,0)) while true do if GDAT.Killed==true then break end wait(1) if isalwaysblack==false then break else if plr.Character ~= nil then if plr.Character:FindFirstChild("KnifeDisplay") ~= nil then plr.Character.KnifeDisplay:Destroy() end end end end else notify("alwaysblack disabled.",Color3.fromRGB(255,0,0)) isalwaysblack=false end end) end end,
				}

				IngameCMDS=CMDS
			elseif game.PlaceId == 12737484990 or gamename:match("Minersblock") or gamename:match("Minecraft") or minecraftremotes==true then -- Minecraft
				local cmds = [[

======================
Hello it seems like you are playing Minecraft! here are some commands.

/nodamage (except lava and players)
/instabreak (works on some blocks)
/killaura [K] To toggle
/whitelist [Player] [Players not to kill with aura]
/unwhitelist [Player] [Players to remove with aura]
/list [List of players you added]
/dupe [Amount] [Selected item only must have 2]
/infhealth [Needs 2 Chestplates of any]
/toggleall
======================
]]


				if hfuncenabled then ANTIKICK()WAIT(0.5)end


				notify(cmds,Color3.new(0,1,1))

				local DUPERREMOTE = nil
				local CHESTREMOTE = nil
				local LOADBLOCKREMOTE = nil
				local INSTAMINEREMOTE = nil
				local isinstabreak=false
				local iskillaura=false
				local killauralist = {}
				local module = nil
				local CMDS = {
					["nodamage"] = function()
						game:GetService("ReplicatedStorage").GameRemotes.Demo:Destroy()
						Instance.new("RemoteEvent",game:GetService("ReplicatedStorage").GameRemotes).Name = "Demo"
						game:GetService("ReplicatedStorage").GameRemotes.Demo:SetAttribute("A","")
						notify("No damage successfull!",Color3.new(0,1,0))
					end,
					["dupe"] = function(split)
						local selitem = plr.Character.SelectedSlot.Value
						local amnt = nil
						if tonumber(split[3]) ~= nil then
							amnt = tonumber(split[3])
						else 
							if tonumber(split[2]) ~= nil then
								amnt = tonumber(split[2])
							end
						end
						local itemdata = plr.Character.Inventory["Slot"..selitem].Value
						if itemdata:match("count") then else notify("Cannot dupe items that cant have more than 2")return end

						local args = {[1] = selitem,[2] = -1,[3] = true,[4] = -amnt}
						if DUPERREMOTE==nil then
							for i,v in pairs(game:GetService("ReplicatedStorage").GameRemotes:GetChildren()) do
								if v.ClassName == "RemoteFunction" then
									if string.sub(string.lower(v.Name),0,8) == "moveitem" then
										DUPERREMOTE=v break
									end
								end
							end
						end
						DUPERREMOTE:InvokeServer(unpack(args))
					end, 
					["infhealth"] = function()
						local args = {[1] = -1,[2] = 102,[3] = true}
						local Remote = nil for i,v in pairs(game:GetService("ReplicatedStorage").GameRemotes:GetChildren()) do if v:IsA("RemoteFunction") and v.Name:match("MoveItem") then Remote=v break end end
						for i=25,0,-1 do task.spawn(function()Remote:InvokeServer(unpack(args))Remote:InvokeServer(unpack(args))Remote:InvokeServer(unpack(args))end)wait(0.1)end
						task.spawn(function()for i=340,0,-1 do for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do if v.Name == "RightShoulder" or v.Name == "LeftShoulder" or v.Name == "TorsoArmor"  then v:Destroy()end end wait(0.25)end end)
					end,
					["chestdupe"] = function()
						if module == nil then
							module = require(Players.LocalPlayer.PlayerScripts.MainLocalScript.CGlobals) 
						end
						if LOADBLOCKREMOTE == nil then
							for i,v in pairs(game:GetService("ReplicatedStorage").GameRemotes:GetChildren()) do
								if v.ClassName == "RemoteFunction" then
									if string.sub(string.lower(v.Name),0,9) == "loadblock" then
										LOADBLOCKREMOTE=v break
									end
								end
							end
						end
						if CHESTREMOTE == nil then
							for i,v in pairs(game:GetService("ReplicatedStorage").GameRemotes:GetChildren()) do
								if v.ClassName == "RemoteFunction" then
									if string.sub(string.lower(v.Name),0,8) == "sortitem" then
										CHESTREMOTE=v break
									end
								end
							end
						end
						local pos = module.TargetBlockCoordinate
						for i=36,45,1 do
							local args = {
								[1] = i
							}
							task.spawn(function()
								CHESTREMOTE:InvokeServer(unpack(args))
							end)
						end

						wait(0.17)
						LOADBLOCKREMOTE:InvokeServer(pos.X,pos.Y,pos.Z)
					end,
					["instabreak"] = function()
						if INSTAMINEREMOTE==nil then
							for i,v in pairs(game:GetService("ReplicatedStorage").GameRemotes:GetChildren()) do
								if v.ClassName == "RemoteFunction" then
									if string.sub(string.lower(v.Name),0,11) == "acceptbreak" then
										INSTAMINEREMOTE=v break
									end
								end
							end
						end
						if module == nil then
							module = require(Players.LocalPlayer.PlayerScripts.MainLocalScript.CGlobals) 
						end
						if isinstabreak ==true then isinstabreak=false else isinstabreak=true end
						notify("Instabreak set to: "..tostring(isinstabreak),Color3.new(0,1,0))
						if isinstabreak==false then return end
						while true do
							if module.IsBlockInReach == true then
								task.spawn(function()INSTAMINEREMOTE:InvokeServer()end)
							end
							if isinstabreak==false then break end
							wait(0.065)
						end
					end,
					["toggleall"] = function()
						for i,v in pairs(CMDS) do
							if i == "toggleall" or tostring(i):match("list") or tostring(i):match("dupe") then continue end
							task.spawn(function() v() end)
						end
					end,
					["whitelist"] = function(split)
						if split[3] ~= nil then
							for a,b in pairs(GetPlayer(split[3])) do
								if b == plr then continue end
								local founduser = false
								for i,v in pairs(killauralist) do
									if Players:GetNameFromUserIdAsync(v) == b.Name then
										founduser=true
									end
								end
								if founduser==true then
									notify(b.Name.." is already whitelisted!",Color3.new(1,0,0))
								else
									table.insert(killauralist,b.UserId)
									notify(b.Name.." is now whitelisted!",Color3.new(0,1,0))
								end
							end

						elseif split[2] ~= nil then
							for a,b in pairs(GetPlayer(split[2])) do
								if b == plr then continue end
								local founduser = false
								for i,v in pairs(killauralist) do
									if Players:GetNameFromUserIdAsync(v) == b.Name then
										founduser=true
									end
								end
								if founduser==true then
									notify(b.Name.." is already whitelisted!",Color3.new(1,0,0))
								else
									table.insert(killauralist,b.UserId)
									notify(b.Name.." is now whitelisted!",Color3.new(0,1,0))
								end
							end

						end
					end,
					["unwhitelist"] = function(split)
						if split[3] ~= nil then
							for a,b in pairs(GetPlayer(split[3])) do
								if b == plr then continue end
								local founduser = false
								local index = nil
								for i,v in pairs(killauralist) do
									index = i
									if Players:GetNameFromUserIdAsync(v) == b.Name then
										founduser=true
									end
								end
								if founduser==true then
									table.remove(killauralist,index)
									notify(b.Name.." is no longer whitelisted!",Color3.new(1,0,0))
								else
									notify(b.Name.." isnt whitelisted!",Color3.new(1,0,0))
								end
							end

						elseif split[2] ~= nil then
							for a,b in pairs(GetPlayer(split[2])) do
								if b == plr then continue end
								local founduser = false
								local index = nil
								for i,v in pairs(killauralist) do
									index = i
									if Players:GetNameFromUserIdAsync(v) == b.Name then
										founduser=true
									end
								end
								if founduser==true then
									table.remove(killauralist,index)
									notify(b.Name.." is no longer whitelisted!",Color3.new(1,0,0))
								else
									notify(b.Name.." isnt whitelisted!",Color3.new(1,0,0))
								end
							end

						end
					end,
					["list"] = function()
						for i,v in pairs(killauralist) do
							notify(Players:GetNameFromUserIdAsync(v).." is whitelisted",Color3.new(0,1,0))
						end
					end,
					["killaura"] = function()
						if iskillaura ==true then iskillaura=false else iskillaura=true end
						notify("Killaura set to: "..tostring(iskillaura),Color3.new(0,1,0))
						local aa = nil

						local isenabled=true

						aa = userinputservice.InputBegan:Connect(function(input)
							if input.KeyCode == Enum.KeyCode.K then
								if focusedtextbox() ~= nil then return end
								isenabled=not isenabled
								notify("Kill aura: "..tostring(isenabled),Color3.new(1,1,0))
							end
						end)

						while true do
							if iskillaura==false then aa:Disconnect() break end
							if isenabled ==true then
								for i,v in pairs(Players:GetPlayers()) do
									local foundinwhitelist =false
									for a,b in pairs(killauralist) do if v.UserId == b then foundinwhitelist=true end end
									if v.Name == plr.Name or foundinwhitelist==true then else
										local char = v.Character
										if v.Character ~= nil then
											local Head = v.Character:FindFirstChild("Head")
											if Head ~= nil then
												if (plr.Character.Head.Position-Head.Position).Magnitude <= 15 then
													local args = {
														[1] = v.Character
													}
													task.spawn(function()
														--game:GetService("ReplicatedStorage").GameRemotes.CancelBlock:InvokeServer()
														game:GetService("ReplicatedStorage").GameRemotes.Attack:InvokeServer(unpack(args))
													end)
													wait(0.3)
												end
											end
										end
									end
								end
							end
							wait(0.25)

						end
					end,




				}

				IngameCMDS=CMDS



				-- Code to execute



				task.spawn(function()


					repeat wait(1)until plr.PlayerScripts:FindFirstChild("MainLocalScript") ~= nil
					repeat wait(1)until plr.PlayerScripts.MainLocalScript:FindFirstChild("CGlobals") ~= nil
					local module = require(plr.PlayerScripts.MainLocalScript.CGlobals) 
					local mouse = game:GetService("Players").LocalPlayer:GetMouse()
					mouse.Button2Down:Connect(function()
						local itemholding = plr.Character.SelectedSlot.Value
						local inv = plr.Character.Inventory:FindFirstChild("Slot"..itemholding)
						if inv ~= nil then
							if tostring(inv.Value):match("Bucket") then
								if tostring(inv.Value):match("Water") then return end
								if mouse.Target ~= nil then
									if tostring(inv.Value):match("Lava") then return else
										if mouse.Target.Name:match("Water") then return end
									end
									local pos = module.TargetBlockCoordinate
									local args = {
										[1] = pos.X,
										[2] = pos.Y+1,
										[3] = pos.Z,
										[4] = plr.Character.SelectedSlot.Value
									}
									if mouse.TargetSurface == Enum.NormalId.Top then args[2] = pos.Y+1
									elseif mouse.TargetSurface == Enum.NormalId.Bottom then args[2] = pos.Y-1
									elseif mouse.TargetSurface == Enum.NormalId.Front then args[3] = pos.Z-1
									elseif mouse.TargetSurface == Enum.NormalId.Back then args[3] = pos.Z+1
									elseif mouse.TargetSurface == Enum.NormalId.Left then args[1] = pos.X-1
									elseif mouse.TargetSurface == Enum.NormalId.Right then args[1] = pos.X+1
									end
									game:GetService("ReplicatedStorage").GameRemotes.UseBlock:InvokeServer(unpack(args))
								end	
							end
						end
					end)




				end)



			elseif game.PlaceId == 738339342 then --Fe2
				local cmds = [[

======================
Hello it seems like you are playing FE2! here are some commands.
/infair
/autocollect
======================
]]
				notify("List of commands: "..cmds,Color3.fromRGB(20, 255, 197))
				print("List of commands: "..cmds,Color3.fromRGB(20, 255, 197))

				local autocollect=false
				local infair=false

				local infairfunc = nil

				CMDS = {
					["infair"] = function()task.spawn(function() if infair==true then infair=false char = plr.Character if char ~= nil then human = char:FindFirstChildOfClass("Humanoid") if human ~= nil then human:SetStateEnabled(15,true) end end notify("Infair disabled!",Color3.fromRGB(255,0,0))if infairfunc then infairfunc:Disconnect() infairfunc=nil end else infair=true notify("Infair enabled!",Color3.fromRGB(0,255,0))human = nil while true do if GDAT.Killed==true then if infairfunc then infairfunc:Disconnect() infairfunc=nil end break end if infair==false then if infairfunc then infairfunc:Disconnect() infairfunc=nil end break end char = plr.Character if human:IsDescendantOf(plr.Character) then else if infairfunc ~= nil then infairfunc:Disconnect() end end if char ~= nil then human = char:FindFirstChildOfClass("Humanoid") if human ~= nil then human:SetStateEnabled(15,false) if infairfunc then else infairfunc = human.HealthChanged:Connect(function() human.Health=human.MaxHealth end) end end end WAIT(2)end end end) end,
					["autocollect"] = function()task.spawn(function()if autocollect==true then autocollect=false notify("Autocollect disabled!",Color3.fromRGB(255,0,0)) else autocollect=true notify("Autocollect enabled!",Color3.fromRGB(0,255,0))while true do WAIT(2)if GDAT.Killed == true then break end if autocollect==false then break end local map = workspace.Multiplayer:FindFirstChild("Map")if map ~= nil then local rescue = map:FindFirstChild("_Rescue") local lostpage = map:FindFirstChild("_LostPage")if lostpage ~= nil then if plr.Character ~= nil then local torso = plr.Character:FindFirstChild("Torso") if torso ~= nil then lostpage.CFrame = torso.CFrame end end end if rescue ~= nil then local contact = rescue:FindFirstChild("Contact") if contact ~= nil then firetouchinterest(plr.Character.Torso ,contact ,0)firetouchinterest(plr.Character.Torso ,contact ,1) end end end end end end)end,
				}
				IngameCMDS=CMDS

			elseif game.PlaceId == 6839171747 then -- Doors Server
				local cmds = [[

======================
Hohoho! You are playing doors here are some commands...
/code {passcode} [Door 50 ONLY]
/docode [Does the code for you DOOR 50 ONLY]
/getcode [Gives you the code DOOR 50 ONLY]
/usevitamins {player}
/useflashlight {player}
/snarebypass [No more spikes to u]
/uselighter {player}
/reach [Allows you to interact futher away]
/noscreech [Screech wont damage u]
/nohalt [Halt wont damage u]
/noseek [SEEK BYPASS]
/noa90 [A90 wont damage u]
/eyesgod [No damage from eyes]
/godmode [Cannot die. Not even rush (WIP)]
/autoheartbeat [No more worrying]
/esp [doors|treasure|items|enemies]
/eventnotify [Lets u know whats coming for u]
/toggleall [Self-Explanitory]
/fullbright [No more darkness]
/speed [Supa speed]
/dobreaker [Bypass breaker DOOR 100 May have to wait]
/lobby [Return to menu]
/playagain [May need to wait in multiplayer]
====================== 
]]
				notify("List of commands: "..cmds,Color3.fromRGB(0, 255, 255))
				print("List of commands: "..cmds)

				local issnarebypasson=false
				local isreachon=false
				local isespon=false
				local iseventnotifyon=false
				local ischatnotify=false
				local isautolooting=false
				local isspeed=false
				local isgodon=false
				local iseyesgod=false

				local brightLoop = nil

				local removehurtpartswithgodin1plr = true

				local Yaxis = 6.225


				local function checkifplayerisfloating(PlayerPart,Yaxiss)
					local RayCastParam = RaycastParams.new()
					RayCastParam.FilterType=Enum.RaycastFilterType.Exclude
					RayCastParam.FilterDescendantsInstances = {PlayerPart.Parent}
					local Part = workspace:Raycast(PlayerPart.Position,Vector3.new(0,-120,0),RayCastParam)

					if Part == nil then print("Raycast failed.") return end
					if Part.Instance == nil then return end
					--warn(Part.Distance)
					if math.round(Part.Distance) <= Yaxiss+2 then
						--warn("Not floating")
						return false
					else
						PlayerPart.Parent:TranslateBy(Vector3.new(0,-Yaxiss-2,0))
						WAIT(0.1)
					end
				end


				local function createesp(object,Color,Name,ForceEsp)
					local H = object:FindFirstChild("HLit")
					if H ~= nil then
						if Name ~= nil then
							local BGUI = H:FindFirstChildOfClass("BillboardGui")
							if BGUI ~= nil then
								local txtlbl = BGUI:FindFirstChildOfClass("TextLabel")
								if txtlbl ~= nil then
									txtlbl.Text = Name
								end
							end
						end
						H.Adornee = nil H.Adornee = object
						if H.ClassName == "BoxHandleAdornment" then
							--H.Color3=Color
							return
						end
						--H.OutlineColor=Color
						--H.FillColor=Color
						return
					end
					if ForceEsp ~= nil then
						if ForceEsp==true then
							H=Instance.new("BoxHandleAdornment",object)
							H.Name = "HLit"					
							H.Color3=Color
							H.AlwaysOnTop=true
							H.ZIndex=10
							H.Adornee=object
							H.Transparency=0.25
							H.Size=Vector3.new(4,4,4)
						else
							if object:GetFullName():match("Pickup") then
								H=Instance.new("BoxHandleAdornment",object)
								H.Name = "HLit"					
								H.Color3=Color
								H.AlwaysOnTop=true
								H.ZIndex=10
								H.Adornee=object
								H.Transparency=0.7
								H.Size=Vector3.new(1,.1,1)
							else
								H = Instance.new("Highlight",object)
								H.DepthMode=Enum.HighlightDepthMode.AlwaysOnTop
								H.Name="HLit"
								H.OutlineColor=Color
								H.FillColor=Color
								H.FillTransparency=0.75
								H.OutlineTransparency=0
							end
						end
					else
						if object:GetFullName():match("Pickup") then
							H=Instance.new("BoxHandleAdornment",object)
							H.Name = "HLit"					
							H.Color3=Color
							H.AlwaysOnTop=true
							H.ZIndex=10
							H.Adornee=object
							H.Transparency=0.7
							H.Size=Vector3.new(1,.1,1)
						else
							H = Instance.new("Highlight",object)
							H.DepthMode=Enum.HighlightDepthMode.AlwaysOnTop
							H.Name="HLit"
							H.OutlineColor=Color
							H.FillColor=Color
							H.FillTransparency=0.65
							H.OutlineTransparency=0.45
						end
					end

					local BillboardGui = Instance.new("BillboardGui",H)
					local TextLabel = Instance.new("TextLabel",BillboardGui)
					local bodypart = object:FindFirstChild("Head") or object:FindFirstChild("Torso") or object:FindFirstChild("UpperTorso")
					if bodypart ~= nil then
						BillboardGui.Adornee = bodypart
					else BillboardGui.Adornee = object
					end
					BillboardGui.Name = object.Name
					BillboardGui.LightInfluence=0
					BillboardGui.Size = UDim2.new(0, 100, 0, 150)
					BillboardGui.StudsOffset = Vector3.new(0, 0.5, 0)
					BillboardGui.AlwaysOnTop = true
					TextLabel.BackgroundTransparency = 1
					TextLabel.Position = UDim2.new(0, 0, 0, -50)
					TextLabel.Size = UDim2.new(0, 100, 0, 100)
					TextLabel.TextSize = 15	
					if Color.R == 1 and Color.G == 0 and Color.B == 0 then TextLabel.TextTransparency = 0
					else TextLabel.TextTransparency = 0.65
					end
					TextLabel.TextColor3 = Color
					TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom
					if Name ~= nil then
						TextLabel.Text = Name else TextLabel.Text = object.Name
					end
					TextLabel.ZIndex = 10

				end



				local function brightFunc()
					game:GetService("Lighting").Brightness = 2
					game:GetService("Lighting").ClockTime = 14
					game:GetService("Lighting").FogEnd = 100000
					game:GetService("Lighting").GlobalShadows = false
					game:GetService("Lighting").OutdoorAmbient = Color3.fromRGB(128, 128, 128)
				end

				wait(1)
				repeat wait() until workspace:FindFirstChild("CurrentRooms") ~= nil
				workspace.CurrentRooms.ChildAdded:Connect(function(Room)
					if Room.Name=="50"or Room.Name=="100"then wait(3)end wait(2)
					if Room:FindFirstChild("Assets") ~= nil then else return end
					if issnarebypasson==true then
						if tonumber(Room.Name) <= 100 then 
							task.spawn(function()
								for i=12,0,-1 do if not Room:IsDescendantOf(workspace) then break end
									for a,b in pairs(Room.Assets:GetChildren()) do
										if b.Name == "Snare" then
											b.Hitbox.CanTouch=false
										end
									end
									WAIT(0.3)	
								end
							end)
						end
					end
					if isreachon==true then
						for i=5,0,-1 do
							for a,b in pairs(Room:GetChildren()) do
								if b.Name == "Parts" then continue end
								for a,b in pairs(b:GetDescendants()) do
									if b.ClassName:match("Prompt") then else continue end
									if b:GetFullName():match("Knob") then if b:GetAttribute("dist") then b.MaxActivationDistance = b:GetAttribute("dist")*1.5 else b:SetAttribute("dist",b.MaxActivationDistance)b.MaxActivationDistance=b:GetAttribute("dist")*1.5 end	else b.RequiresLineOfSight=false  end
									b.HoldDuration=0
									if b:GetAttribute("dist") then
										b.MaxActivationDistance = b:GetAttribute("dist")*2
									else
										b:SetAttribute("dist",b.MaxActivationDistance)
										b.MaxActivationDistance=b:GetAttribute("dist")*2
									end	
								end
							end
							WAIT(0.5)
						end
					end
				end)

				CMDS = {
					["getcode"] = function(split)
						local FinalCode = nil
						local Code = {}local Paper = nil
						for i,v in pairs(game.Players:GetPlayers()) do Paper = v.Backpack:FindFirstChild("LibraryHintPaper")or v.Character:FindFirstChild("LibraryHintPaper")if Paper ~= nil then break end end
						if Paper ~= nil then
							local Numbers = 0
							for i,v in pairs(Paper.UI:GetChildren()) do if v:FindFirstChildOfClass("TextLabel") then Numbers=Numbers+1 end end
							local CodeTable = {}
							for i=1,Numbers,1 do CodeTable[i] = Paper.UI:FindFirstChild(i).ImageRectOffset end
							for i=1,Numbers,1 do for a,v in pairs(game.Players.LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do if v.Name == "Icon" then if v.ImageRectOffset == CodeTable[i] then Code[i]=v.TextLabel.Text break end end end end
							for a,b in pairs(Code) do if FinalCode ~= nil then FinalCode = FinalCode..b else FinalCode=b end end
							print(FinalCode)--setclipboard(tostring(FinalCode))
						else print("Nobody has the code paper!")
						end
						notify("The code is: "..tostring(FinalCode),Color3.fromRGB(255,255,0))
					end,
					["dobreaker"] = function()
						for i=70,0,-1 do game:GetService("ReplicatedStorage").EntityInfo.EBF:FireServer()wait(0.75)end
					end,
					["god"] = function() --120+ stairs on longass ones
						if isgodon==true then notify("Godmode already enabled!",Color3.fromRGB(255,0,0)) return end
						isgodon=true 
						local isrooms = false
						notify("Godmode enabled!",Color3.fromRGB(0,255,0))
						for i,v in pairs(workspace.CurrentRooms:GetChildren()) do 
							if v.ClassName == "Model" then 
								local parts = v:FindFirstChild("Parts")
								if v:FindFirstChild("StarterElevator") then
									for i,v in pairs(v.StarterElevator:GetDescendants()) do
										if v.ClassName:match("Prox") then
											v.MaxActivationDistance = v.MaxActivationDistance*1.9
										end
										if v.Name == "Floor" or v.Name == "AMain" then
											local aa = v:Clone()
											aa.Parent = v.Parent
											v.CanCollide=false
											aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
										end
									end
								end
								local assets = v:FindFirstChild("Assets")
								if assets ~= nil then
									for i,v in pairs(assets:GetChildren()) do
										if v.Name:match("Locker") then isrooms=true break end
									end
								end
								if parts ~= nil then
									for i,v in pairs(parts:GetChildren()) do
										if v.Name == "Floor" then
											if removehurtpartswithgodin1plr==true then v.CanCollide=false end
											local aa = v:Clone()
											aa.Parent = v.Parent
											aa.CanCollide=true
											aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
											--aa.Size = aa.Size+Vector3.new(2,0,2)
										elseif v.Name == "Steps" then WAIT(.4)
											if removehurtpartswithgodin1plr==true then v.CanCollide=false end
											if #v:GetChildren() >=100 then 
												for i,v in pairs(v:GetDescendants()) do
													if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
														v.CanCollide=false
													end
												end
											end
											local v = v:Clone()
											v.Parent = parts
											v.CanCollide=true
											for i,v in pairs(v:GetDescendants()) do
												if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
													v.CanCollide=true
													v.CFrame = v.CFrame -Vector3.new(0,Yaxis+1.5,0)
												end
											end
										elseif v.Name:match("Carpet") then 
											v.CanCollide = false
										end
									end
								end
							end 
						end 
						local isdone = false
						local reached100 = false
						plr.Character:TranslateBy(Vector3.new(0,-Yaxis+2.75,0))
						local weld = Instance.new("Weld",plr.Character)
						weld.Part0=plr.Character.LowerTorso
						weld.Part1=plr.Character.HumanoidRootPart
						weld.C0=CFrame.new(0,-Yaxis+1,0)
						local REAL = game:GetService("ReplicatedStorage").EntityInfo.MotorReplication
						local a = REAL:Clone()
						a.Parent = game:GetService("ReplicatedStorage").EntityInfo
						REAL.Name = REAL.Name.."REAL"

						task.spawn(function()
							local args = {[1] = 0,[2] = -100,[3] =180,[4] = false}
							for i=10,0,-1 do
								REAL:FireServer(unpack(args))
								WAIT(0.01)
							end
							while isgodon==true do
								if reached100 ==true then local fake = game:GetService("ReplicatedStorage").EntityInfo:FindFirstChild("MotorReplication") if fake ~= nil then fake:Destroy() end REAL.Name = "MotorReplication" a:Destroy() break end
								if game.Players.LocalPlayer.Character:FindFirstChild("Head") ~= nil then
									checkifplayerisfloating(game.Players.LocalPlayer.Character.Head,Yaxis)
								else break
								end
								WAIT(0.0125)
							end
						end)

						workspace.ChildAdded:Connect(function(name)
							wait()
							if name.Name:match("Banana") then if #Players:GetPlayers() <= 1 then if removehurtpartswithgodin1plr==true then name:Destroy()end return end for i=30,0,-1 do if name.ClassName:match("Part") then name.CanTouch=false end for a,b in pairs(name:GetDescendants()) do if b.ClassName:match("Part") then if b.ClassName:match("Emit") then return end b.CanTouch=false end end wait(.05)end
							elseif name.Name == "JeffTheKiller" then
								if #Players:GetPlayers() <= 1 then if removehurtpartswithgodin1plr==true then name:Destroy()end return end
								for i=120,0,-1 do
									for i,v in pairs(name:GetDescendants()) do if v.ClassName:match("Part") then if v.ClassName:match("Emit") then return end v.CanTouch=false end end
									WAIT(0.025)	
								end
							end
						end)
						workspace.CurrentRooms.ChildAdded:Connect(function(Room)
							if Room.Name == "100" then WAIT(.5) task.spawn(function()for i=30,0,-1 do if Room:FindFirstChild("FigureSetup") ~= nil then reached100=true break end WAIT(.75) end end) end
							WAIT(0.45)
							local assets = Room:FindFirstChild("Assets")
							if assets ~= nil then
								for i,v in pairs(assets:GetChildren()) do
									if v.Name:match("Locker") then isrooms=true break end
								end
							end
							if isrooms==true then










								if Room:FindFirstChild("Parts") ~= nil then else
									repeat wait(0.25) until Room:FindFirstChild("Parts") ~= nil WAIT(0.25)
									task.spawn(function()
										if Room.Name == "100" then WAIT(3)
											for i,v in pairs(Room.Parts:GetChildren()) do
												if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
													if math.round(v.Size.Magnitude) == 67 then
														v.CanCollide=false
														v:SetAttribute("r","")
														local aa = v:Clone()
														aa.CanCollide=true
														aa.Parent = v.Parent
														aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
													end
												end
											end
										end
									end)
								end
								repeat wait(0.05) until Room.Parts:FindFirstChild("Floor") ~= nil WAIT(0.3)
								if Room.Parts:FindFirstChild("Metal") ~= nil then
									local dist = Room.Door.SignPart
									task.spawn(function()
										while true do WAIT(0.05)

											local args = {[1] = 0,[2] = -650,[3] =360,[4] = false}
											game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(unpack(args))
											if (dist.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= 8 then
												plr.Character.Weld.C0 = CFrame.new(0,-Yaxis+1,0)
												plr.Character:TranslateBy(0,-Yaxis+2,0)
												checkifplayerisfloating(game.Players.LocalPlayer.Character.Head,Yaxis)
											else	
												plr.Character.Weld.C0 = CFrame.new(0,Yaxis+1,0)
												checkifplayerisfloating(game.Players.LocalPlayer.Character.Head,-Yaxis)
											end
										end
									end)

								end
								for i,v in pairs(Room.Parts:GetChildren()) do
									if v.Name:match("Floor") then
										if removehurtpartswithgodin1plr==true then v.CanCollide=false end
										local aa = v:Clone()
										if Room.Name == "50" then v.CanCollide=false else
											if v.Size.Magnitude <= 50 then v.CanCollide=false end
										end
										aa.Parent = v.Parent
										aa.CanCollide=true
										aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
										--aa.Size = aa.Size+Vector3.new(2,0,2)
									elseif v.Name == "Sideroom" then
										if removehurtpartswithgodin1plr==true then v.CanCollide=false end
										for i,v in pairs(v:GetChildren()) do
											if v.Name:match("Floor") then
												local aa = v:Clone()
												aa.CanCollide=true
												aa.Parent = v.Parent
												aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
											end
										end
									elseif v.Name:match("Alt") then
										v.CanCollide=false
										local aa = v:Clone()
										aa.CanCollide=true
										aa.Transparency=1
										aa.Parent = v.Parent
										aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
									elseif v.Name == "Steps" then WAIT(.4)
										if removehurtpartswithgodin1plr==true then v.CanCollide=false end
										if #v:GetChildren() >=100 then 
											for i,v in pairs(v:GetDescendants()) do
												if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
													v.CanCollide=false
												end
											end
										end
										local v = v:Clone()
										v.Parent = Room.Parts
										v.CanCollide=true
										for i,v in pairs(v:GetDescendants()) do
											if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
												v.CanCollide=true
												v.CFrame = v.CFrame -Vector3.new(0,Yaxis+1.5,0)
											end
										end
									elseif v.Name == "Stairs" then
										if removehurtpartswithgodin1plr==true then v.CanCollide=false end
										for i,v in pairs(v:GetDescendants()) do
											if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
												v.CanCollide=false
											end
										end
										local v = v:Clone()
										v.Parent = Room.Parts
										for i,v in pairs(v:GetDescendants()) do
											if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
												v.CanCollide=true
												v.CFrame = v.CFrame -Vector3.new(0,Yaxis,0)
											end
										end
									end
								end



								return
							end
							if Room:FindFirstChild("Parts") ~= nil then else
								repeat wait(0.25) until Room:FindFirstChild("Parts") ~= nil WAIT(0.25)
								task.spawn(function()
									if Room.Name == "100" then WAIT(3)
										for i,v in pairs(Room.Parts:GetChildren()) do
											if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
												if math.round(v.Size.Magnitude) == 67 then
													v.CanCollide=false
													v:SetAttribute("r","")
													local aa = v:Clone()
													aa.CanCollide=true
													aa.Parent = v.Parent
													aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
												end
											end
										end
									end
								end)
							end
							repeat wait(0.05) until Room.Parts:FindFirstChild("Floor") ~= nil WAIT(0.25)

							local islongstairs = false

							local steps = Room.Parts:FindFirstChild("Steps")
							if steps ~= nil then WAIT(0.1)
								if #steps:GetChildren() >= 100 then islongstairs=true end
							end

							for i,v in pairs(Room.Parts:GetChildren()) do
								if v.Name == "Floor" then
									local aa = v:Clone()
									if Room.Name == "50" or Room.Name == "49" or Room.Name == "88" or Room.Name == "89" or Room.Name == "90" or Room.Name == "91" or islongstairs==true then v.CanCollide=false else
										if v.Size.Magnitude <= 50 then v.CanCollide=false end
									end
									aa.Parent = v.Parent
									aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
									--aa.Size = aa.Size+Vector3.new(2,0,2)
								elseif v.Name == "Sideroom" then
									for i,v in pairs(v:GetChildren()) do
										if v.Name:match("Floor") then
											local aa = v:Clone()
											v.CanCollide=false
											aa.Parent = v.Parent
											aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
										end
									end
								elseif v.Name:match("Door") then
									for a,b in pairs(v:GetDescendants()) do
										if b.ClassName:match("Part") then if b.ClassName:match("Emit") then return end b.CanCollide=false end
									end
								elseif v.Name:match("Alt") then
									v.CanCollide=false
									local aa = v:Clone()
									aa.CanCollide=true
									aa.Transparency=1
									aa.Parent = v.Parent
									aa.CFrame = aa.CFrame-Vector3.new(0,Yaxis,0)
								elseif v.Name == "Steps" then
									for i,v in pairs(v:GetDescendants()) do
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
											v.CanCollide=false
										end
									end
									local v = v:Clone()
									v.Parent = Room.Parts
									for i,v in pairs(v:GetDescendants()) do
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
											v.CanCollide=true
											v.CFrame = v.CFrame -Vector3.new(0,Yaxis+1.5,0)
										end
									end
								elseif v.Name == "Stairs" then WAIT(.4)
									if removehurtpartswithgodin1plr==true then v.CanCollide=false end
									if #v:GetChildren() >=100 then 
										for i,v in pairs(v:GetDescendants()) do
											if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
												v.CanCollide=false
											end
										end
									end
									local v = v:Clone()
									v.Parent = Room.Parts
									v.CanCollide=true
									for i,v in pairs(v:GetDescendants()) do
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
											v.CanCollide=true
											v.CFrame = v.CFrame -Vector3.new(0,Yaxis+1.5,0)
										end
									end
								elseif v.Name:match("Carpet") then 
									v.CanCollide = false
								end
							end
							WAIT(0.45)
							for i,v in pairs(Room:GetChildren()) do 
								if v.Name == "Closet" then
									if v:FindFirstChild("Parts") ~= nil then
										for i,v in pairs(v.Parts:GetChildren()) do
											if v.Name == "Floor" then 
												local aa = v:Clone() aa.Parent = v.Parent
												v.CanCollide=false
												aa.CFrame = aa.CFrame - Vector3.new(0,Yaxis,0)
											end
										end
									end
								elseif v.Name == "Floor" then
									local aa = v:Clone() aa.Parent = v.Parent
									v.CanCollide=false
									aa.CFrame = aa.CFrame - Vector3.new(0,Yaxis,0)
								elseif v.Name == "MainStuff" then
									for a,b in pairs(v:GetDescendants()) do
										if b.ClassName:match("Part") then
											if b.ClassName:match("Emit") then continue end
											if b.Name:match("Floor") or b.Name:match("Stair") then
												local aa = b:Clone()
												aa.Parent = b.Parent
												b:SetAttribute("r","")
												b.CanCollide=false
												aa.CFrame = aa.CFrame - Vector3.new(0,Yaxis,0)
											end
										end
									end
								end
							end
							if Room.Name == "100" then
								for i=40,0,-1 do wait(0.1) if reached100==true then break end end
								if reached100==true then
									task.spawn(function()
										while true do runservice.Heartbeat:Wait()
											if plr.Character.Humanoid.Health == 0 then break end
											if isdone ==true then break end
											local Elevator = Room:FindFirstChild("ElevatorBreakerEmpty")
											if Elevator == nil then continue end
											local Door = Elevator:FindFirstChild("Door")
											if Door == nil then continue end
											if (Door.Position - workspace.CurrentCamera.CFrame.Position).Magnitude <=75 then
												isdone=true
												weld.C0 = CFrame.new(0,0,0)
												weld:Destroy() 
												if plr.Character:FindFirstChild("Weld") then plr.Character.Weld:Destroy()end
												plr.Character:TranslateBy(Vector3.new(0,Yaxis+4,0))
												workspace.CurrentCamera.CameraSubject = plr.Character.Humanoid
												for i,v in pairs(plr.Character:GetChildren()) do 
													if v.ClassName == "Accessory" then 
														v.Handle.Transparency=0 
													end
												end
												for i,v in pairs(workspace.CurrentRooms["100"].Parts:GetChildren()) do if v.Name == "Floor" or v:GetAttribute("r") then v.CanCollide=true end end
												for i,v in pairs(workspace.CurrentRooms["100"]:GetChildren()) do 
													if v.Name == "Floor" then 
														v.CanCollide=true 
													elseif v.Name == "MainStuff" then
														for a,b in pairs(v:GetDescendants()) do
															if b:GetAttribute("r") then b.CanCollide=true end
														end
													end 
												end
											end

										end
									end)
								end
							end
						end)
						plr.Character.HumanoidRootPart.Changed:Connect(function(a) 
							if isdone==true then return end 
							if a == "Anchored" then 
								if plr.Character.HumanoidRootPart.Anchored==false then
									for i,v in pairs(plr.Character:GetChildren()) do 
										if v.ClassName == "Accessory" then 
											v.Handle.Transparency=1 
										end
									end
								else
									for i,v in pairs(plr.Character:GetChildren()) do 
										if v.ClassName == "Accessory" then 
											v.Handle.Transparency=0 
										end
									end
								end
								if reached100==true then 
									isdone=true 
									weld.C0 = CFrame.new(0,0,0)
									weld:Destroy() 
									plr.Character:TranslateBy(Vector3.new(0,Yaxis+4,0))
									workspace.CurrentCamera.CameraSubject = plr.Character.Humanoid
									for i,v in pairs(plr.Character:GetChildren()) do 
										if v.ClassName == "Accessory" then 
											v.Handle.Transparency=0 
										end
									end
									for i,v in pairs(workspace.CurrentRooms["100"].Parts:GetChildren()) do if v.Name == "Floor" or v:GetAttribute("r") then v.CanCollide=true end end
									for i,v in pairs(workspace.CurrentRooms["100"]:GetChildren()) do 
										if v.Name == "Floor" then 
											v.CanCollide=true 
										elseif v.Name == "MainStuff" then
											for a,b in pairs(v:GetDescendants()) do
												if b:GetAttribute("r") then b.CanCollide=true end
											end
										end 
									end
								end
							end	 		
						end)

						workspace.CurrentCamera.CameraSubject=plr.Character.Head
						for i,v in pairs(plr.Character:GetChildren()) do if v.ClassName == "Accessory" then v.Handle.Transparency=1 end end
					end,
					["eyesgod"] = function()
						local args = {[1] = 0,[2] = -420,[3] = 0,[4] = false}
						if iseyesgod==true then iseyesgod=false else iseyesgod=true end notify("Eyes god set to: "..tostring(iseyesgod),Color3.fromRGB(0,255,0))
						if iseyesgod==false then return end
						while true do wait()
							if isgodon==true then wait(0.5) continue end
							if iseyesgod==false then break end
							if workspace:FindFirstChild("Eyes") ~= nil then
								game:GetService("ReplicatedStorage").EntityInfo.MotorReplication:FireServer(unpack(args))
							end
						end
					end,
					["figureheartbeat"] = function()
						notify("Heartbeat removed",Color3.new(0,1,0))game:GetService("ReplicatedStorage").EntityInfo.ClutchHeartbeat:Destroy()
					end,
					["speed"] = function() if isspeed ==true then isspeed=false else isspeed=true end notify("Speed set to: "..tostring(isspeed),Color3.fromRGB(0,255,0))
						if isspeed==false then return end
						while true do if isspeed==false then break end
							if workspace.CurrentCamera.FieldOfView >= 80 and workspace.CurrentCamera.FieldOfView <= 90 then
								game.Players.LocalPlayer.Character.Humanoid.WalkSpeed=29.5
							else
								game.Players.LocalPlayer.Character.Humanoid.WalkSpeed=20.5
							end
							wait()
						end
					end,
					["autoloot"] = function(split)
						if isautolooting==true then isautolooting=false else isautolooting=true end
						notify("Autoloot set to: "..tostring(isautolooting),Color3.fromRGB(0,255,0))
						if isautolooting==false then return end
						local issuperhardmode = false
						while true do 
							if workspace:FindFirstChild("BananaPeel") ~= nil then issuperhardmode=true end
							if isautolooting==false then break end
							for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
								if v.Name == "0" then
									if v:FindFirstChild("KeyObtainFake") ~= nil then issuperhardmode=true end
								end
								if tonumber(v.Name) == nil then continue end
								if tonumber(v.Name) >= 100 then else if tonumber(v.Name) > 91 then wait(1) continue end end

								if v.Name == "100" or v.Name == "49" or v.Name == "50" or v.Name == "51" then else
									local partend,base = v:FindFirstChild("RoomExit"),v:FindFirstChild("RoomEntrance")
									if partend ~= nil then
										if (partend.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= 7 then
											v:SetAttribute("a","")
										end
									end
									if base ~= nil then
										if (base.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= 14 then
											if v:GetAttribute("a") ~= nil then v:SetAttribute("a",nil)end
											if base:FindFirstChild("HLit") ~= nil then base.HLit:Destroy() end
										end
									end
								end
								if v:GetAttribute("a") ~= nil then if v.Name == "100" or v.Name == "49" or v.Name == "50" or v.Name == "51" then else continue end end

								for i,v in pairs(v:GetChildren()) do
									if v.Name == "Assets" then continue end
									if v.Name == "Parts" then continue end
									if v.Name ~= "Closet" then continue end
									for i,v in pairs(v:GetDescendants()) do
										if v.ClassName:match("Prox") then
											local n = v:GetFullName()
											local Part = v.Parent
											if Part.ClassName:match("Part") then else Part = v.Parent:FindFirstChildOfClass("MeshPart") or v.Parent:FindFirstChildOfClass("Part") end
											if Part == nil then continue end
											if string.lower(n):match("shield") or string.lower(n):match("grenade") then issuperhardmode=true end
											if n:match("Gold") or n:match("Module") or n:match("Pick") or n:match("Book") or n:match("Live") then
												if issuperhardmode==true then if n:match("Gold") then continue end end
												if n:match("Key") then if plr.Backpack:FindFirstChild("Key") ~= nil or plr.Character:FindFirstChild("Key") then continue end end
												if n:match("Bandage") then if plr.Character ~= nil then local H = plr.Character:FindFirstChildOfClass("Humanoid")if H ~= nil then if H.Health >= H.MaxHealth then continue end else continue end else continue end end											
												if (Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= v.MaxActivationDistance+1.2 then
													fireproximityprompt(v)
												end
											elseif n:match("Chest") or n:match("Knob") then
												if v:GetAttribute("D") == nil then v:SetAttribute("D",0) end
												if (Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= v.MaxActivationDistance+1.2 then
													if tonumber(v:GetAttribute("D")) ~= nil then 
														if v:GetAttribute("D") > 5 then continue 
														else v:SetAttribute("D",v:GetAttribute("D")+1)
														end
													else v:SetAttribute("D",0) 
													end
													fireproximityprompt(v)
												end
											end
										end 
									end
								end
								if v:FindFirstChild("Assets") == nil then continue end
								for i,v in pairs(v.Assets:GetChildren()) do
									if v.Name:match("Rug") or v.Name:match("Chand") or v.Name:match("Modular_Book") or v.Name:match("Clock") or v.Name:match("Hat") or v.Name:match("Couch") or v.Name:match("Ward") or v.Name:match("Bed") or v.Name:match("Paint") or v.Name:match("Raft") or v.Name:match("Book")or v.Name:match("Type")or v.Name:match("Chair")then if v.Name:match("Super Cool") then else continue end end

									for i,v in pairs(v:GetDescendants()) do
										if v.ClassName:match("Prox") then
											if v:GetAttribute("a") ~= nil then continue end
											local n = v:GetFullName()
											local Part = v.Parent
											if Part.ClassName:match("Part") then else Part = v.Parent:FindFirstChildOfClass("MeshPart") or v.Parent:FindFirstChildOfClass("Part") end
											if Part == nil then continue end
											if string.lower(n):match("shield") or string.lower(n):match("grenade") then issuperhardmode=true end
											if n:match("Gold") or n:match("Module") or n:match("Pickup") or n:match("Book") or n:match("Live") then
												if issuperhardmode==true then if n:match("Gold") then continue end end
												if n:match("Key") then if plr.Backpack:FindFirstChild("Key") ~= nil or plr.Character:FindFirstChild("Key") then continue end end
												if n:match("Bandage") then if plr.Character ~= nil then local H = plr.Character:FindFirstChildOfClass("Humanoid")if H ~= nil then if H.Health >= H.MaxHealth then continue end else continue end else continue end end											
												if (Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= v.MaxActivationDistance+1.2 then
													fireproximityprompt(v)
												end
											elseif n:match("Chest") or n:match("Knob") or n:match("Roll") then
												if v:GetAttribute("D") == nil then v:SetAttribute("D",0) end
												if (Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude <= v.MaxActivationDistance+1.2 then
													if tonumber(v:GetAttribute("D")) ~= nil then 
														if v:GetAttribute("D") > 5 then if v:GetAttribute("a") == nil then v:SetAttribute("a","") end continue 
														else v:SetAttribute("D",v:GetAttribute("D")+1)
														end
													else v:SetAttribute("D",0) 
													end
													fireproximityprompt(v)
												end
											end
										end
									end
								end
							end
							wait(0.075)	
						end
					end,
					["docode"] = function(split,Admin)
						if workspace.CurrentRooms:FindFirstChild("50") ~= nil then
							repeat wait(1)
								local Code = {}local Paper = nil
								for i,v in pairs(game.Players:GetPlayers()) do Paper = v.Backpack:FindFirstChild("LibraryHintPaper")or v.Character:FindFirstChild("LibraryHintPaper")if Paper ~= nil then break end end
								if Paper ~= nil then
									local Numbers = 0
									for i,v in pairs(Paper.UI:GetChildren()) do if v:FindFirstChildOfClass("TextLabel") then Numbers=Numbers+1 end end
									local CodeTable = {}
									for i=1,Numbers,1 do CodeTable[i] = Paper.UI:FindFirstChild(i).ImageRectOffset end
									for i=1,Numbers,1 do for a,v in pairs(game.Players.LocalPlayer.PlayerGui.PermUI.Hints:GetChildren()) do if v.Name == "Icon" then if v.ImageRectOffset == CodeTable[i] then Code[i]=v.TextLabel.Text break end end end end
									local FinalCode = nil for a,b in pairs(Code) do if FinalCode ~= nil then FinalCode = FinalCode..b else FinalCode=b end end
									game:GetService("ReplicatedStorage").EntityInfo.PL:FireServer(tostring(FinalCode))
								else warn("Nobody has the code paper!")
								end
							until workspace.CurrentRooms:FindFirstChild("50") == nil
						end
					end,
					["noseek"] = function(split,Admin)
						notify("Seek has now been bypassed for everyone!",Color3.fromRGB(255,255,0))
						for i=12000,0,-1 do
							for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
								local Part = v:FindFirstChild("TriggerEventCollision")
								if Part == nil then continue end
								if Part:FindFirstChild("Collision") == nil then continue end
								if plr.Character.Head.CanTouch==true then
									firetouchinterest(plr.Character.Head,Part.Collision,0)
									firetouchinterest(plr.Character.Head,Part.Collision,1)
								end
							end
							wait(0.1)
						end
					end,
					["code"] = function(split,Admin)
						if tonumber(split[2]) then
							game:GetService("ReplicatedStorage").EntityInfo.PL:FireServer(tostring(split[2]))
						end
					end,
					["toggleall"] = function(split)
						for i,v in pairs(CMDS) do
							if tostring(i):match("use") or i == "speed" or tostring(i):match("cmds") or i == "god" or tostring(i):match("do") or tostring(i):match("noseek") or tostring(i):match("chat") or tostring(i):match("play") or tostring(i):match("lobby") or tostring(i):match("toggle") or tostring(i):match("code") then continue end
							task.spawn(function()v()end)
						end
					end,
					["fullbright"] = function(split)
						if brightLoop ~= nil then
							print("Full bright off")
							brightLoop:Disconnect()
							brightLoop=nil
							return	
						end
						print("Full bright on")
						brightLoop = game:GetService("RunService").Stepped:Connect(brightFunc)
					end,
					["esp"] = function(split)
						if isespon==false then isespon=true else isespon=false end

						print("Esp set to:",isespon)


						if isespon==false then return end 


						local currentroom = 1
						local part = nil
						local partahead = nil

						for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
							if tonumber(v.Name) > currentroom then
								currentroom=tonumber(v.Name)
							end
						end

						while true do
							wait(0.1)	
							if isespon==false then break end
							for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
								if tonumber(v.Name) > currentroom then
									if workspace.CurrentRooms[currentroom-1]:FindFirstChild("Closet") ~= nil then
										for i,v in pairs(workspace.CurrentRooms[currentroom-1]:FindFirstChild("Closet"):GetChildren()) do
											if v.Name:match("Door") then
												if v:FindFirstChild("HLit") ~= nil then
													v:FindFirstChild("HLit"):Destroy()
												end
											end
										end
									end
									currentroom=tonumber(v.Name)
								end
							end
							if part ~= nil then
								if part:GetFullName():match(tostring(currentroom-1)) then
									--print("Door has not changed")
									createesp(part,Color3.new(0,1,0))
									for i,v in pairs(workspace.CurrentRooms[currentroom-1]:GetChildren()) do
										if v.Name == "Closet" then
											if v:GetAttribute("a") ~= nil then continue end v:SetAttribute("a","")
											for i=12,0,-1 do 
												for i,b in pairs(v:GetChildren()) do
													local n = b:GetFullName()
													if b.Name:match("Normal") then
														createesp(b,Color3.new(1,0,1),"Treasure")
													elseif b.Name:match("Fake") then
														createesp(b,Color3.new(1,0,0),"Dupe")
														if isgodon==true then
															for i,v in pairs(b:GetDescendants()) do
																if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end v.CanTouch=false end
															end
														end
													elseif n:match("Chest") then
														if n:match("Locked") then
															createesp(b,Color3.new(1,1,0),"Chest [Locked]")
														else
															createesp(b,Color3.new(1,0,1),"Chest")
														end
													elseif n:match("Ward") then
														createesp(b,Color3.new(1,0.5,0),b.Parent.Name)
													end
												end
												wait(0.15)
											end
										end
									end
								else
									--print("Door has changed!")
									if part:FindFirstChild("HLit")~=nil then part.HLit:Destroy()end
								end
							end
							part = workspace.CurrentRooms[currentroom-1].Door.Door
							if partahead ~= nil then 
								if partahead == part then
									if partahead:FindFirstChild("HLit")~=nil then partahead.HLit:Destroy()end
									local Door = workspace.CurrentRooms[currentroom]:FindFirstChild("Door")
									if Door ~= nil then
										local MainDoor = Door:FindFirstChild("Door")
										if MainDoor ~= nil then
											partahead = MainDoor
										end
									end
								end
							else
								local Door = workspace.CurrentRooms[currentroom]:FindFirstChild("Door")
								if Door ~= nil then
									local MainDoor = Door:FindFirstChild("Door")
									if MainDoor ~= nil then
										partahead = MainDoor
									end
								end
							end
							createesp(part,Color3.new(0,1,0))
							if partahead ~= nil then createesp(partahead,Color3.new(0.8,0,1),"Door ahead")end
							for i,v in pairs(workspace.CurrentRooms:GetChildren())do
								if tonumber(v.Name) > currentroom then
									wait(0.05) 
									currentroom = tonumber(v.Name) 
									if part ~= nil then
										if part:GetFullName():match(tostring(currentroom-1)) then
											--print("Door has not changed")
											createesp(part,Color3.new(0,1,0))
										else
											if part:FindFirstChild("HLit")~=nil then part.HLit:Destroy()end
											--print("Door has changed!")
										end
									end
									part = workspace.CurrentRooms[currentroom-1].Door.Door
									createesp(part,Color3.new(0,1,0),currentroom-1)
								end


								if v.Name == "50" or v.Name == "100" then
									if v:GetAttribute("a") ~= nil then else v:SetAttribute("a","")
										if v.Name == "100" then wait(4) end
										wait(2)
										for i=6,0,-1 do
											for i,v in pairs(v:GetChildren()) do
												if v.Name:match("Pickup") then
													createesp(v,Color3.new(0,0.6,1))
												end
												if v.ClassName == "Folder" then else continue end
												if v.Name:match("Figure") then
													for i=8,0,-1 do
														for i,v in pairs(v:GetChildren()) do
															if v.ClassName == "Model" then else continue end
															if v.Name:match("Figure") then else continue end
															if isgodon == true then
																for i,v in pairs(v:GetDescendants()) do if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end v.CanTouch=false end end
															end
															createesp(v,Color3.new(1,0,0),"Figure")
														end
														wait(0.1)
													end
												end  
											end
											wait(0.1)
										end 
									end
								end
								if v:GetAttribute("a") ~= nil then if v.Name == "50" or v.Name == "100" then else continue end end
								if v:FindFirstChild("Assets") ~= nil then else continue end
								for i,v in pairs(v.Assets:GetChildren()) do
									if v.Name:match("Rug") or v.Name:match("Paint") or v.Name:match("Knob") or v.Name:match("Type") or v.Name:match("Globe") or v.Name:match("Plant") or v.Name:match("Raft") then continue end
									if v:GetAttribute("a") ~= nil then continue end
									for a,b in pairs(v:GetDescendants()) do
										if b.Name == "Snare" then v:SetAttribute("a","") for i=5,0,-1 do createesp(b,Color3.new(1,0,0),b.Name)wait()end end
										if b.ClassName:match("Prompt") then else continue end
										local n = b:GetFullName()

										if n:match("HintBook") then
											v:SetAttribute("a","")
											createesp(b.Parent,Color3.new(1,1,0),"Hint Book")
										elseif n:match("Gold") then
											createesp(b.Parent,Color3.new(1,0,1))
										elseif n:match("Module") then
											createesp(b.Parent,Color3.new(0,1,1))
										elseif n:match("Pick") then
											v:SetAttribute("a","")
											createesp(b.Parent,Color3.new(0,0.6,1))
										elseif n:match("Lever") then
											v:SetAttribute("a","")
											createesp(b.Parent,Color3.new(1,1,0),"Gate switch")
										elseif n:match("Hide") then
											v:SetAttribute("a","")
											createesp(b.Parent,Color3.new(1,0.5,0),b.Parent.Name)
										elseif n:match("Roll") then
											v:SetAttribute("a","")
											createesp(b.Parent,Color3.new(0,1,1),"Drawer")
										end
									end
								end

							end

						end
					end,
					["chatnotify"] = function()
						if ischatnotify==true then ischatnotify=false else ischatnotify=true end
						notify("Chatnotify set to: "..tostring(ischatnotify),Color3.fromRGB(0, 255, 0))
					end,
					["eventnotify"] = function(split)
						if iseventnotifyon==true then iseventnotifyon=false else iseventnotifyon=true end
						print("Eventnotifier set to:",iseventnotifyon)
						if iseventnotifyon==true then
							local func = nil
							local func1 = nil
							func1 = workspace.CurrentCamera.ChildAdded:Connect(function(Entity)
								if iseventnotifyon==false then func1:Disconnect() return end
								if Entity.Name == "Screech" then
									popupnotifier("Screech has spawned on you.","Look at it.",Color3.new(1,1,1),Color3.new(1,1,0),"Note")
								end
							end)
							func = workspace.ChildAdded:Connect(function(a)
								if iseventnotifyon==false then func:Disconnect() return end
								wait(0.25)
								local Part = a:FindFirstChildOfClass("Part")
								if Part ~= nil then
									local isreal=false
									for i=470,0,-1 do
										if ((Part.Position*Vector3.new(1,0,1))-workspace.Camera.CFrame.Position).Magnitude <= 2500 then
											isreal=true break
										end
										wait(0.025)
									end
									if isreal==false then return end
									if a.Name == "RushMoving" then
										popupnotifier("Heads up! Rush has spawned.","Hide somewhere",Color3.new(1,1,1),Color3.new(1,0,0),"Note")
										if ischatnotify==true then WAIT(0.2) textchatservice.TextChannels.RBXGeneral:SendAsync("Rush!") end
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=5200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"Rush ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true)wait() end end
										warn("Rush Has spawned!")
									elseif a.Name == "AmbushMoving" then
										popupnotifier("Heads up! AMBUSH has spawned.","Hide now!",Color3.new(1,1,1),Color3.new(0.7,0,0))
										if ischatnotify==true then WAIT(0.2) textchatservice.TextChannels.RBXGeneral:SendAsync("Ambush!","Warn") end
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=5200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"Ambush ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true) wait() end end
										warn("Ambush Has spawned!")
									elseif string.lower(a:GetFullName()):match("eyes") then
										popupnotifier("Watchout! Eyes has spawned.","Look away from it",Color3.new(1,1,1),Color3.new(1,1,1),"Note")
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=22200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"Eyes ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true) wait() end end
										warn("Eyes Has spawned!")
									elseif string.lower(a:GetFullName()):match("a60") then
										popupnotifier("WARNING!","A60 Has summoned. HIDE!",Color3.new(1,1,1),Color3.new(1,1,1),Color3.new(1,0.3,0),"Note")
										if ischatnotify==true then WAIT(0.1) textchatservice.TextChannels.RBXGeneral:SendAsync("A 60!") end
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=5200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"A60 ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true) wait() end end
										warn("A60 Has spawned!")
									elseif string.lower(a:GetFullName()):match("a90") then
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=5200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"A90 ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true) wait() end end
										popupnotifier("WARNING!","A90 Has summoned. DONT MOVE!",Color3.new(1,1,1),Color3.new(1,1,1))
										warn("A90 Has spawned!")
									elseif string.lower(a:GetFullName()):match("a120") then
										popupnotifier("WARNING!","A120 Has summoned. HIDE!",Color3.new(1,1,1),Color3.new(1,1,1),Color3.new(1,0,0))
										if ischatnotify==true then WAIT(0.1) textchatservice.TextChannels.RBXGeneral:SendAsync("A 120!","Note") end
										if a:GetAttribute("W") ~= nil then return else a:SetAttribute("W","") for i=22200,0,-1 do if not a:IsDescendantOf(workspace) then break end createesp(a,Color3.new(1,0,0),"A120 ["..tostring(math.round((Part.Position-workspace.CurrentCamera.CFrame.Position).Magnitude)).."]",true) wait() end  end
										warn("A120 Has spawned!")
									end
								end
							end)
						end
					end,
					["nohalt"] = function(split)
						game:GetService("ReplicatedStorage").EntityInfo.ShadeResult.Name = "ShadeResult1"
						Instance.new("RemoteEvent",game.ReplicatedStorage.EntityInfo).Name="ShadeResult"
					end,
					["noscreech"] = function(split)
						game:GetService("ReplicatedStorage").EntityInfo.Screech.Name = "Screech1"
						Instance.new("RemoteEvent",game:GetService("ReplicatedStorage").EntityInfo).Name = "Screech"
					end,
					["noa90"] = function(split)
						game:GetService("ReplicatedStorage").EntityInfo.A90:Destroy()
						Instance.new("RemoteEvent",game.ReplicatedStorage.EntityInfo).Name="A90"
					end,
					["cmds"] = function(split,Admin)
						if Admin ~= nil then
							local Text = "List of commands: "
							for i,v in pairs(AllowedAdminCommands) do
								Text=Text.."/"..v.." | "
							end
							local Channel = nil
							for i,v in pairs(textchatservice.TextChannels:GetChildren()) do
								if v.Name:match(plr.UserId) then else continue end
								if v.Name:match(Admin.UserId) then else continue end
								Channel=v
								break
							end
							Channel:SendAsync(Text)
							return	
						end
						notify("List of commands: "..cmds,Color3.fromRGB(0, 255, 255))
						print("List of commands: "..cmds)
					end,
					["snarebypass"] = function(split)
						if issnarebypasson==true then issnarebypasson=false else issnarebypasson=true end
						print("Snarebypass set to:",issnarebypasson)
						if issnarebypasson==true then
							for i,v in pairs(workspace.CurrentRooms:GetChildren()) do  
								if tonumber(v.Name) == nil then continue end
								if v:FindFirstChild("Assets") ~= nil then else continue end
								if tonumber(v.Name) >= 90 and tonumber(v.Name) <= 100 then
									for a,b in pairs(v.Assets:GetChildren()) do
										if b.Name == "Snare" then
											b.Hitbox.CanTouch=false
										end
									end
								end
							end
						end
					end,
					["lobby"] = function()
						notify("Returning to lobby..",Color3.new(1,1,0))
						game:GetService("ReplicatedStorage").EntityInfo.Statistics:FireServer()
						wait(0.25)
						game:GetService("ReplicatedStorage").EntityInfo.Lobby:FireServer()
					end,
					["playagain"] = function()
						notify("Requesting play again..",Color3.new(1,1,0))
						game:GetService("ReplicatedStorage").EntityInfo.Statistics:FireServer()
						game:GetService("ReplicatedStorage").EntityInfo.PlayAgain:FireServer()
					end,
					["reach"] = function(split)
						if isreachon==false then isreachon=true end
						print("Reach set to:",isreachon)
						if isreachon==true then
							for i,v in pairs(workspace.CurrentRooms:GetChildren()) do
								if v:FindFirstChild("Assets") ~= nil then else continue end
								for a,b in pairs(v.Door:GetDescendants()) do
									if b.ClassName:match("Prompt") then else continue end
									if b:GetFullName():match("Knob") then else b.RequiresLineOfSight=false end
									b.HoldDuration=0
									if b:GetAttribute("dist") then
										b.MaxActivationDistance = b:GetAttribute("dist")*2
									else
										b:SetAttribute("dist",b.MaxActivationDistance)
										b.MaxActivationDistance=b:GetAttribute("dist")*2
									end	
								end							
								for a,b in pairs(v.Assets:GetDescendants()) do
									if b.ClassName:match("Prompt") then else continue end
									if b:GetFullName():match("Knob") then else b.RequiresLineOfSight=false end 
									b.HoldDuration=0
									if b:GetAttribute("dist") then
										b.MaxActivationDistance = b:GetAttribute("dist")*2
									else
										b:SetAttribute("dist",b.MaxActivationDistance)
										b.MaxActivationDistance=b:GetAttribute("dist")*2
									end	
								end
							end
						end
					end,
					["usevitamins"] = function(split,Admin)
						if GetPlayer(split[3]) ~= nil then
							for i,v in pairs(GetPlayer(split[3])) do
								if v~= nil then

									local Vita = v.Character:FindFirstChild("Vitamins") or v.Backpack:FindFirstChild("Vitamins")
									if Vita ~= nil then
										if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
										warn("YES",v:GetFullName())
										Vita.Remote:FireServer()
									else
										warn(v:GetFullName(),"DOES NOT HAVE VITAMINS")
									end

								end
							end
							return end
						for i,v in pairs(GetPlayer(split[2])) do
							if v~= nil then

								local Vita = v.Character:FindFirstChild("Vitamins") or v.Backpack:FindFirstChild("Vitamins")
								if Vita ~= nil then
									if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
									warn("YES",v:GetFullName())
									Vita.Remote:FireServer()
								else
									warn(v:GetFullName(),"DOES NOT HAVE VITAMINS")
								end

							end
						end
					end,
					["useflashlight"] = function(split,Admin)
						if GetPlayer(split[3]) ~= nil then
							for i,v in pairs(GetPlayer(split[3])) do
								if v~= nil then

									local Flashlight = v.Character:FindFirstChild("Flashlight") or v.Backpack:FindFirstChild("Flashlight")
									if Flashlight ~= nil then
										if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
										warn("YES",v:GetFullName())
										Flashlight.Remote:FireServer()
									else
										warn(v:GetFullName(),"DOES NOT HAVE Flashlight")
									end

								end
							end 
							return end
						for i,v in pairs(GetPlayer(split[2])) do
							if v~= nil then

								local Flashlight = v.Character:FindFirstChild("Flashlight") or v.Backpack:FindFirstChild("Flashlight")
								if Flashlight ~= nil then
									if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
									warn("YES",v:GetFullName())
									Flashlight.Remote:FireServer()
								else
									warn(v:GetFullName(),"DOES NOT HAVE Flashlight")
								end

							end
						end
					end,
					["uselighter"] = function(split,Admin)
						if GetPlayer(split[3]) ~= nil then 
							for i,v in pairs(GetPlayer(split[3])) do
								if v~= nil then

									local Flashlight = v.Character:FindFirstChild("Lighter") or v.Backpack:FindFirstChild("Lighter")
									if Flashlight ~= nil then
										if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
										warn("YES",v:GetFullName())
										Flashlight.Remote:FireServer()
									else
										warn(v:GetFullName(),"DOES NOT HAVE Lighter")
									end

								end
							end
							return end
						if GetPlayer(split[2]) ~= nil then
							for i,v in pairs(GetPlayer(split[2])) do
								if v~= nil then

									local Flashlight = v.Character:FindFirstChild("Lighter") or v.Backpack:FindFirstChild("Lighter")
									if Flashlight ~= nil then
										if Admin~=nil then notify(Admin.Name.." Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))else notify("Toggled "..tostring(v.Name).."'s Lighter!",Color3.fromRGB(0,255,0))end
										warn("YES",v:GetFullName())
										Flashlight.Remote:FireServer()
									else
										warn(v:GetFullName(),"DOES NOT HAVE Lighter")
									end

								end
							end
						end
					end,
				}

				AllowedAdminCommands = {"code","uselighter","usevitamins","useflashlight","chatnotify","cmds"}

				IngameCMDS=CMDS 

			end
		end
	end

	recheckingamecmds()

	local function connectIngameCMDS(msg)local lower = string.lower(msg)split = string.split(lower," ")for i,v in pairs(split) do for a,b in pairs(IngameCMDS) do if "/"..a == v then b(string.split(lower," ")) break end end end end

	plr.Chatted:Connect(function(msg)connectIngameCMDS(msg)end)

	textchatservice.MessageReceived:Connect(function(TextChat) 
		if TextChat.TextSource ~= nil then
			if TextChat.TextSource.UserId == plr.UserId then 
				connectIngameCMDS(TextChat.Text)
			elseif Admins[TextChat.TextSource.UserId] ~= nil then
				connectAdminFunc(TextChat.TextSource,TextChat.Text)
			end 
		end
	end)


	notify("[Push]: Successfully loaded",Color3.fromRGB(255,255,0))
	userinputservice.InputBegan:Connect(function(input,gameprocessed)
		if input.UserInputType == Enum.UserInputType.Keyboard then
			if input.KeyCode==Enum.KeyCode[string.upper(pushbind)] then
				if focusedtextbox() ~= nil then else
					ispushing=true
					while true do
						if ispushing == false then break end
						char = plr.Character
						if char ~= nil then
							local HRPFound=false
							for i,v in pairs(char:GetChildren()) do
								if v.Name == "HumanoidRootPart" then
									if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end HRPFound=true v.Velocity = (v.Velocity) + mouse.Hit.LookVector * mouseforce end
								end
							end
							if HRPFound==false then
								for i,v in pairs(char:GetChildren()) do
									if v.Name == "Torso" or v.Name == "UpperTorso" then
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end v.Velocity = (v.Velocity) + mouse.Hit.LookVector * mouseforce end
									end
								end
							end
						end
						WAIT(forcerate)
					end
				end
			end
		end
	end)
	userinputservice.InputEnded:Connect(function(input,gameprocessed)if input.UserInputType == Enum.UserInputType.Keyboard then if input.KeyCode==Enum.KeyCode[string.upper(pushbind)] then ispushing=false end end end)


	local camera = workspace:FindFirstChildOfClass("Camera") local Steppedfunc_1
	Steppedfunc_1 = runservice.Stepped:Connect(function()
		if GDAT.Killed==true then warn("BROKE AT >>",os.date()) Instance.new("Hint",game:GetService("CoreGui")).Text = "Lost Connection at: "..tostring(os.date().." as "..plr.Name) Steppedfunc_1:Disconnect() end
		if oldcursorenabled==true then game:GetService("UserInputService").MouseIcon = "http://www.roblox.com/asset/?id=172802980"mouse.Icon= "http://www.roblox.com/asset/?id=172802980" else game:GetService("UserInputService").MouseIcon = ""mouse.Icon= "" end
		if camera:FindFirstChildOfClass("BlurEffect") ~= nil then runservice.Heartbeat:Wait() camera:FindFirstChildOfClass("BlurEffect"):Destroy() end
		game:GetService("StarterGui"):SetCore("DevConsoleVisible",isdevconsolevisible) game:GetService('StarterGui'):SetCore("TopbarEnabled", true) game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.EmotesMenu, true)game:GetService('StarterGui'):SetCoreGuiEnabled(Enum.CoreGuiType.Chat, true)
		local char = plr.Character
		if char ~= nil then 
			local ROOT = char:FindFirstChild("HumanoidRootPart")
			if ROOT ~= nil then else ROOT = char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso") or char:FindFirstChild("LowerTorso") or char:FindFirstChild("Head") end
			if ROOT ~= nil then
				if isspacebarheld==true then
					if not focusedtextbox() then
						-- Default roblox character jump script (modified)
						human = char:FindFirstChildOfClass("Humanoid")
						if human ~= nil then
							human:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)

							if human.SeatPart ~= nil or human.Sit==true then
								human:ChangeState("Jumping")
							else
								if human:GetState() == Enum.HumanoidStateType.Climbing then
									human:ChangeState("Jumping")
									for i=5,0,-1 do
										ROOT.Velocity=Vector3.new(0,human.JumpPower,0)
										WAIT(0.01)
									end
								else
									if human.FloorMaterial == Enum.Material.Air then else
										human:ChangeState("Jumping")
									end
								end
							end
						end
					end
				end


				if Isfarming==true then else
					if NoCollisionsEnabled==false then
						for i,v in pairs(workspace:GetPartBoundsInRadius(ROOT.Position,5)) do
							if v.ClassName:match("Part") then
								if v.ClassName:match("Emit") then continue end
								if v.CanCollide==true then
									if v:GetAttribute("Isinradius") then else
										task.spawn(function()
											v:SetAttribute("Isinradius","")
											WAIT(4)
											v:SetAttribute("Isinradius",nil)
										end)
										if not v:IsDescendantOf(char) then
											if v:IsGrounded() then
												if v.Velocity.Magnitude >= Flingspeedlimit+150 then
													v.Velocity=v.Velocity/2
												end
											else
												if v.Velocity.Magnitude >= Flingspeedlimit then
													v.Velocity=v.Velocity/2
												end
											end
											if v:IsDescendantOf(workspace) then
												local Parent = v.Parent
												if Parent ~= nil then
													if Parent.ClassName == "Tool" then
														if v.Velocity.Magnitude >=Flingspeedlimit then
															v.Velocity=Vector3.new(0,0,0)
														end
													elseif Parent.ClassName == "Accessory" then
														v.CanCollide=false
													end
												end
											end
											human = v:FindFirstChildOfClass("Humanoid")
											if human ~= nil then else
												if v.Parent ~= nil then
													if v.Parent.Parent ~= nil then
														if v.Parent.Parent.Parent ~= nil then
															if v.Parent.Parent.Parent:FindFirstChildOfClass("Humanoid") then
																human = v.Parent.Parent.Parent:FindFirstChildOfClass("Humanoid")
															end
														end
														if v.Parent.Parent:FindFirstChildOfClass("Humanoid") then
															human = v.Parent.Parent:FindFirstChildOfClass("Humanoid")
														end
													end
													if v.Parent:FindFirstChildOfClass("Humanoid") then
														human = v.Parent:FindFirstChildOfClass("Humanoid")
													end
												end
											end
											if human ~= nil then
												v.Velocity=Vector3.new(0,0,0)
												local name = string.lower(v.Name)
												if name:match("root") or name:match("torso") or name:match("leg") or name:match("arm") or name:match("hand") or name:match("foot") then
													v.CanCollide=false
													runservice.Stepped:Wait()runservice.Stepped:Wait()
													if v.CanCollide==true then
														for a,b in pairs(char:GetChildren()) do
															if b.ClassName:match("Part") then
																if b.ClassName:match("Emit") then continue end
																if b.CanCollide==true then
																	name = string.lower(b.Name)
																	if name:match("root") or name:match("torso") or name:match("leg") or name:match("arm") or name:match("hand") or name:match("foot") then
																		CreateNCgroup(b,v,NoCollisionsEnabled)
																	else
																		b.CanCollide=false
																	end
																end
															end
														end
													end
												else
													v.CanCollide=false
												end
											else
												if not v.Parent then continue end
												if v.Parent.ClassName == "Accessory" or v.Parent.ClassName == "Hat" or v.Parent.ClassName == "Tool" then
													v.Velocity=Vector3.new(0,0,0)
													v.CanCollide=false
												end
											end

										end
									end
								end
							end
						end 
					end
				end
			end

		end
	end)




	task.spawn(function()






		local Admin_script = Instance.new("ScreenGui")
		local CMDBARFRAME = Instance.new("Frame")
		local CMDTITLE = Instance.new("TextLabel")
		local CMDBOX = Instance.new("TextBox")
		local Runcmd = Instance.new("TextButton")
		local ToggleOutput = Instance.new("TextButton")
		local Template = Instance.new("Frame")
		local TextLabel = Instance.new("TextLabel")
		local OutputFRAME = Instance.new("Frame")
		local Output = Instance.new("ScrollingFrame")
		local UIListLayout = Instance.new("UIListLayout")
		local ClearOutput = Instance.new("TextButton")

		--Properties:

		Admin_script.Name = "Admin_script"
		if not runservice:IsStudio() then Admin_script.Parent = game:GetService("CoreGui")else Admin_script.Parent = plr:WaitForChild("PlayerGui")end
		Admin_script.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Admin_script.ResetOnSpawn=false

		CMDBARFRAME.Name = "CMDBARFRAME"
		CMDBARFRAME.Parent = Admin_script
		CMDBARFRAME.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		CMDBARFRAME.Draggable = true
		CMDBARFRAME.Position = UDim2.new(0.00871731061, 0, 0.780361772, 0)
		CMDBARFRAME.Size = UDim2.new(0.191752002, 0, 0.198966414, 0)
		CMDBARFRAME.Active=true
		CMDBARFRAME.Draggable=true


		CMDTITLE.Name = "CMDTITLE"
		CMDTITLE.Parent = CMDBARFRAME
		CMDTITLE.BackgroundColor3 = Color3.fromRGB(35, 255, 255)
		CMDTITLE.Position = UDim2.new(0.261884093, 0, 0.0533337407, 0)
		CMDTITLE.Size = UDim2.new(0.493953168, 0, 0.308045983, 0)
		CMDTITLE.Font = Enum.Font.Cartoon
		CMDTITLE.Text = "CMDBAR"
		CMDTITLE.TextColor3 = Color3.fromRGB(0, 0, 0)
		CMDTITLE.TextScaled = true
		CMDTITLE.TextSize = 14.000
		CMDTITLE.TextWrapped = true

		CMDBOX.Name = "CMDBOX"
		CMDBOX.Parent = CMDBARFRAME
		CMDBOX.BackgroundColor3 = Color3.fromRGB(35, 255, 255)
		CMDBOX.Position = UDim2.new(0.0289726071, 0, 0.361379385, 0)
		CMDBOX.Size = UDim2.new(0.942054808, 0, 0.585287392, 0)
		CMDBOX.Font = Enum.Font.Cartoon
		CMDBOX.PlaceholderColor3 = Color3.fromRGB(117, 117, 117)
		CMDBOX.PlaceholderText = "Run a command."
		CMDBOX.Text = ""
		CMDBOX.TextColor3 = Color3.fromRGB(0, 0, 0)
		CMDBOX.TextScaled = true
		CMDBOX.TextSize = 14.000
		CMDBOX.TextWrapped = true

		Runcmd.Name = "Runcmd"
		Runcmd.Parent = CMDBARFRAME
		Runcmd.BackgroundColor3 = Color3.fromRGB(44, 255, 41)
		Runcmd.Position = UDim2.new(0.755837142, 0, 0.0533333346, 0)
		Runcmd.Size = UDim2.new(0.215190187, 0, 0.308045983, 0)
		Runcmd.Font = Enum.Font.SourceSans
		Runcmd.Text = "Run CMD"
		Runcmd.TextColor3 = Color3.fromRGB(0, 0, 0)
		Runcmd.TextScaled = true
		Runcmd.TextSize = 14.000
		Runcmd.TextWrapped = true

		ToggleOutput.Name = "ToggleOutput"
		ToggleOutput.Parent = CMDBARFRAME
		ToggleOutput.BackgroundColor3 = Color3.fromRGB(255, 255, 47)
		ToggleOutput.Position = UDim2.new(0.0289726071, 0, 0.0533337407, 0)
		ToggleOutput.Size = UDim2.new(0.228453785, 0, 0.308045983, 0)
		ToggleOutput.Font = Enum.Font.SourceSans
		ToggleOutput.Text = "Output"
		ToggleOutput.TextColor3 = Color3.fromRGB(0, 0, 0)
		ToggleOutput.TextScaled = true
		ToggleOutput.TextSize = 14.000
		ToggleOutput.TextWrapped = true

		Template.Name = "Template"
		Template.Parent = Admin_script
		Template.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Template.BackgroundTransparency = 1.000
		Template.BorderSizePixel = 0
		Template.Position = UDim2.new(0, 0, 8.66976677e-08, 0)
		Template.Size = UDim2.new(1, 0, 0, 100)
		Template.Visible = false

		TextLabel.Parent = Template
		TextLabel.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel.BackgroundTransparency = 0.750
		TextLabel.Size = UDim2.new(1, 0, 1, 0)
		TextLabel.Font = Enum.Font.SourceSans
		TextLabel.Text = "wefiuhiuiheuwefwef"
		TextLabel.TextColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel.TextScaled = true
		TextLabel.TextSize = 14.000
		TextLabel.TextWrapped = true

		OutputFRAME.Name = "OutputFRAME"
		OutputFRAME.Parent = Admin_script
		OutputFRAME.Active = true
		OutputFRAME.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		OutputFRAME.BackgroundTransparency = 1.000
		OutputFRAME.Position = UDim2.new(0.332407415, 0, 0.15762274, 0)
		OutputFRAME.Size = UDim2.new(0.333333343, 0, 0.68217057, 0)
		OutputFRAME.Visible = false
		OutputFRAME.Draggable=true

		Output.Name = "Output"
		Output.Parent = OutputFRAME
		Output.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
		Output.BackgroundTransparency = 0.500
		Output.Position = UDim2.new(-0.000120798744, 0, -0.00125772308, 0)
		Output.Size = UDim2.new(1.00012076, 0, 1.00125778, 0)
		Output.ScrollBarThickness = 3

		UIListLayout.Parent = Output
		UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder

		ClearOutput.Name = "ClearOutput"
		ClearOutput.Parent = OutputFRAME
		ClearOutput.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
		ClearOutput.BackgroundTransparency = 0.500
		ClearOutput.BorderSizePixel = 0
		ClearOutput.Position = UDim2.new(0.919444442, 0, -0.0530303046, 0)
		ClearOutput.Size = UDim2.new(0.111111112, 0, 0.0795454532, 0)
		ClearOutput.Font = Enum.Font.Arial
		ClearOutput.Text = "Clear"
		ClearOutput.TextColor3 = Color3.fromRGB(0, 0, 0)
		ClearOutput.TextScaled = true
		ClearOutput.TextSize = 14.000
		ClearOutput.TextWrapped = true

		local logService = game:GetService("LogService")

		Output.Active=true
		Output.Draggable=true

		local Total_Messages=0
		local MAX_Messages = 300

		local CPU_TextOutputDisplay_Limit = 200



		ClearOutput.MouseButton1Click:Connect(function()
			for i,v in pairs(Output:GetChildren()) do
				if v.ClassName == "Frame" then
					v:Destroy()
					runservice.Stepped:Wait()
				end
			end
		end)

		Output.ChildAdded:Connect(function()
			Total_Messages=#Output:GetChildren()

			Output.CanvasSize=UDim2.new(0,0,2+math.ceil(Total_Messages/4),0)
			if Total_Messages > MAX_Messages then
				-- get oldest msg
				local highest_age = math.huge
				local object=nil
				for i,v in pairs(Output:GetChildren()) do
					if v:GetAttribute("age") ~= nil then
						if v:GetAttribute("age") <= highest_age then
							highest_age=v:GetAttribute("age") object=v
						end
					end
				end
				if object~= nil then
					object.Visible=false
					runservice.Heartbeat:Wait() -- makes sure there is no unexpected deleting.
					if not object:IsDescendantOf(game) then return end
					object:Destroy()
					object:SetAttribute("age",nil)
				end


			end
		end)
		Output.ChildRemoved:Connect(function() Total_Messages=#Output:GetChildren() end)

		ToggleOutput.MouseButton1Click:Connect(function()
			if OutputFRAME.Visible==true then
				OutputFRAME.Visible=false
			else
				OutputFRAME.Visible=true
			end
		end)

		local function runHDadmincommand(CommandString)
			if HRemoteFunc ~= nil then
				warn("YES")
				HRemoteFunc:InvokeServer(CommandString)
				return true
			else
				warn("NIL!!")
				return nil
			end
		end

		local function runkohlsadmincommand(KuiD,CommandString)
			if KRemoteEvent ~= nil then
				if KuID == "" then
					KRemoteEvent:FireServer("KuID")
					WAIT(0.6)
					KRemoteEvent:FireServer(KuID.."KCmdBar",CommandString)
					return true
				else
					KRemoteEvent:FireServer(KuID.."KCmdBar",CommandString)
					return true
				end
			else 
				return nil
			end
		end

		local function createMessage(message,messagetype,timestamp)
			if timestamp == nil then
				timestamp = tostring(os.date()) 
			end
			timestamp = timestamp:sub(12,20) timestamp = timestamp:split(" ")[1]

			local frame = Template:Clone()
			frame.Visible=true

			frame:SetAttribute("age",tonumber(os.clock()))

			local txtlabel = frame:FindFirstChild("TextLabel")

			frame.Name="OUTPUT "..tostring(os.date())
			local func1 = nil
			local tempfunc = nil
			local tempfunc_1 = nil

			local OLDTEXT = message

			txtlabel.TextSize=20
			txtlabel.Text = message
			task.spawn(function()
				for i=10,0,-1 do 
					if txtlabel.TextFits==true then
						break
					else
						txtlabel.TextSize=txtlabel.TextSize-1
					end
					runservice.Heartbeat:Wait()
				end
			end)


			tempfunc = txtlabel.MouseEnter:Connect(function()
				txtlabel.Text="Message generated at timestamp of:_ "..timestamp
			end)
			tempfunc_1 = txtlabel.MouseLeave:Connect(function()
				txtlabel.Text=OLDTEXT
			end)

			if messagetype == Enum.MessageType.MessageError then
				txtlabel.TextColor3 = Color3.new(1,0,0)

			elseif messagetype == Enum.MessageType.MessageOutput then
				txtlabel.TextColor3 = Color3.new(1,1,1)
			elseif messagetype == Enum.MessageType.MessageInfo then
				txtlabel.TextColor3 = Color3.new(0,0.7,0.7)
			elseif messagetype == Enum.MessageType.MessageWarning then
				txtlabel.TextColor3 = Color3.new(1,0.65,0)
			end
			frame.Parent=Output
			func1 = frame.Changed:Connect(function(a)
				if a == "Parent" then
					func1:Disconnect()
					tempfunc:Disconnect()
					tempfunc_1:Disconnect()
				end
			end)

		end
		local fun = nil


		local OutputQueue = {}

		fun =logService.MessageOut:Connect(function(msg,msgtype)
			msg = msg:sub(0,CPU_TextOutputDisplay_Limit)
			OutputQueue[tostring(time())] = {
				["msg"] = msg,
				["msgtype"] = msgtype,
				["date"] = os.date(),
			}

		end)

		task.spawn(function()
			while true do
				if GDAT.Killed==true then break end
				local currenttime = time()

				local longesttime = 0
				local currentitem = nil

				for i,v in pairs(OutputQueue) do
					local timehere = currenttime- tonumber(i)
					if timehere >= longesttime then
						currentitem=i
					end
				end
				if currentitem ~= nil then
					if Isfarming==true then --Optimise memory usage
					else
						createMessage(OutputQueue[currentitem].msg,OutputQueue[currentitem].msgtype,OutputQueue[currentitem].date)
					end
					OutputQueue[currentitem]=nil
				end

				if Output.Visible==true then WAIT(0.05)
				else WAIT(3)
				end

			end


		end)

		task.spawn(function()
			while true do
				if runservice:IsStudio() then break end if GDAT.Killed==true then break end
				if game.PlaceId==893973440 then break
				else
					local COREGUI = game:GetService("CoreGui")
					local Dir = COREGUI:FindFirstChild("RobloxPromptGui"):FindFirstChild("promptOverlay")

					for i,v in pairs(Dir:GetDescendants()) do
						if v.Name == "ErrorTitle" then
							if v.Text:sub(0, 12) == "Disconnected" then
								GDAT.Killed=true OutputQueue = {} game:GetService("ScriptContext"):SetTimeout(-1) warn("Broke loop due to error")
								plr.DescendantAdded:Connect(function(a)if a.ClassName == "LocalScript" then a.Disabled=true warn(a:GetFullName(),"was blocked from running after player kick!") end end)
								task.spawn(function()for i,v in pairs(plr:GetDescendants()) do if v.ClassName == "LocalScript" then v.Disabled=true warn(v:GetFullName()," has been terminated. after player kick!") end WAIT(0) end end)
								plr.Character.DescendantAdded:Connect(function(a)if a.ClassName == "LocalScript" then a.Disabled=true warn(a:GetFullName(),"was blocked from running after player kick!") end end)
								for i,v in pairs(plr.Character:GetDescendants()) do if v.ClassName == "LocalScript" then v.Disabled=true warn(v:GetFullName()," has been terminated. after player kick!") end end
								v.Text = "Disconnected as "..plr.Name

								break
							end
						end
					end
					for i,v in pairs(game:GetChildren()) do if string.lower(v.ClassName) == "service" then if v.Name == v.ClassName then else v.Name = v.ClassName end end end
				end
				local found = false
				if GDAT.RunCmd ~= nil then if typeof(GDAT.RunCmd) == "function" then found=true end end
				if found==false then
					GDAT.RunCmd = function(msg)
						lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

						for i,v in pairs(split) do
							for a,b in pairs(MainCMDS) do
								if a == v then
									foundcmd=true
									b(split)
									break
								end

							end
							for a,b in pairs(IngameCMDS) do
								if a == v then
									foundcmd=true
									b(split)
									break
								end

							end
						end


						if foundcmd==false then
							lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

							for i,v in pairs(split) do if MainCMDS[v] ~= nil then foundcmd=true MainCMDS[v](split) break end end

							if foundcmd==false then
								if split[1] == "antivoidstuds" then
									if tonumber(split[2]) ~= nil then
										if tonumber(split[2]) < 5 then
											STUDS = 5
										else
											STUDS = tonumber(split[2])
										end
									end
									foundcmd=true
								elseif split[1] == "fallspeed" then
									if split[2] then
										if tonumber(split[2]) ~= nil then
											fallspeednumberset = tonumber(split[2])
											maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
											notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
										end 
									end
									foundcmd=true
								elseif split[2] == "fallspeed" then
									if split[3] then
										if tonumber(split[3]) ~= nil then
											fallspeednumberset = tonumber(split[3])
											maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
											notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
										end 
									end
									foundcmd=true
								elseif split[1] == "pushbind" then
									if split[2] then
										pushbind = split[2]								
										notify("Push keybind has been set to "..split[2].."!",Color3.fromRGB(255,255,0))
									end
									foundcmd=true
								end
							end
							if foundcmd==false then
								if KohlsAdminDetected ==true then
									local var = runkohlsadmincommand(KuID,CMDBOX.Text)
									if var ==true then
										return "Successfully sent command to server."
									end
								elseif HDAdminDetected==true then
									local var = runHDadmincommand(CMDBOX.Text)
									if var ==true then
										return "Successfully sent command to server."
									end
								else
									return "Unknown or external command."
								end
							else
								return "Command executed successfully!"
							end
						else
							return "Command executed successfully!"
						end
					end
				end
				WAIT(3)
			end
		end)


		Runcmd.MouseButton1Click:Connect(function()
			local msg = CMDBOX.Text lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

			for i,v in pairs(split) do
				for a,b in pairs(MainCMDS) do
					if a == v then
						foundcmd=true
						b(split)
						break
					end

				end
				for a,b in pairs(IngameCMDS) do
					if a == v then
						foundcmd=true
						b(split)
						break
					end

				end
			end


			if foundcmd==false then

				if split[1] == "/antivoidstuds" then
					if tonumber(split[2]) ~= nil then
						if tonumber(split[2]) < 5 then
							STUDS = 5
						else
							STUDS = tonumber(split[2])
						end
					end
					foundcmd=true
				elseif split[1] == "/fallspeed" then
					if split[2] then
						if tonumber(split[2]) ~= nil then
							fallspeednumberset = tonumber(split[2])
							maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
							notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
						end 
					end
				elseif split[2] == "/fallspeed" then
					if split[3] then
						if tonumber(split[3]) ~= nil then
							fallspeednumberset = tonumber(split[3])
							maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
							notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
						end 
					end
				elseif split[1] == "/pushbind" then
					if split[2] then
						pushbind = split[2]
						notify("Push keybind has been set to "..split[2].."!",Color3.fromRGB(255,255,0))
					end
					foundcmd=true
				end
			end
			if foundcmd==false then
				if KohlsAdminDetected ==true then
					local var = runkohlsadmincommand(KuID,CMDBOX.Text)
					if var ==true then
						--CMDBOX.Text = "Successfully sent command to server."
					end
				elseif HDAdminDetected==true then
					local var = runHDadmincommand(CMDBOX.Text)
					if var ==true then
						--CMDBOX.Text = "Successfully sent command to server."
					end
				else

					--CMDBOX.Text="Unknown or external command."
				end
			else
				--CMDBOX.Text="Command executed successfully!"
			end
		end)
		GDAT.RunCmd = function(msg)
			lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

			for i,v in pairs(split) do
				for a,b in pairs(MainCMDS) do
					if a == v then
						foundcmd=true
						b(split)
						break
					end

				end
				for a,b in pairs(IngameCMDS) do
					if a == v then
						foundcmd=true
						b(split)
						break
					end

				end
			end

			if foundcmd==false then
				lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

				for i,v in pairs(split) do if MainCMDS[v] ~= nil then foundcmd=true MainCMDS[v](split) break end end

				if foundcmd==false then
					if split[1] == "antivoidstuds" then
						if tonumber(split[2]) ~= nil then
							if tonumber(split[2]) < 5 then
								STUDS = 5
							else
								STUDS = tonumber(split[2])
							end
						end
						foundcmd=true
					elseif split[1] == "fallspeed" then
						if split[2] then
							if tonumber(split[2]) ~= nil then
								fallspeednumberset = tonumber(split[2])
								maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
								notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
							end 
						end
						foundcmd=true
					elseif split[2] == "fallspeed" then
						if split[3] then
							if tonumber(split[3]) ~= nil then
								fallspeednumberset = tonumber(split[3])
								maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
								notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
							end 
						end
						foundcmd=true
					elseif split[1] == "pushbind" then
						if split[2] then
							pushbind = split[2]								notify("Push keybind has been set to "..split[2].."!",Color3.fromRGB(255,255,0))
						end
						foundcmd=true
					end
				end
				if foundcmd==false then
					if KohlsAdminDetected ==true then
						local var = runkohlsadmincommand(KuID,CMDBOX.Text)
						if var ==true then
							return "Successfully sent command to server."
						end
					elseif HDAdminDetected==true then
						local var = runHDadmincommand(CMDBOX.Text)
						if var ==true then
							return "Successfully sent command to server."
						end
					else
						return "Unknown or external command."
					end
				else
					return "Command executed successfully!"
				end
			else
				return "Command executed successfully!"
			end
		end

		userinputservice.InputBegan:Connect(function(input)
			if input.KeyCode == Enum.KeyCode.Insert then
				if focusedtextbox() == nil then
					CMDBOX:CaptureFocus()
					for i=0,3 do
						CMDBOX.Text = ""
						WAIT(0.001)
					end
				end
			end
		end)

		CMDBOX.FocusLost:Connect(function(enterpressed)
			if enterpressed==true then
				local msg = CMDBOX.Text
				lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

				for i,v in pairs(split) do
					for a,b in pairs(MainCMDS) do
						if a == v then
							foundcmd=true
							b(split)
							break
						end

					end
					for a,b in pairs(IngameCMDS) do
						if a == v then
							foundcmd=true
							b(split)
							break
						end

					end
				end

				if foundcmd==false then
					msg = CMDBOX.Text lw = string.lower(msg)split = string.split(lw," ")foundcmd = false

					for i,v in pairs(split) do if MainCMDS[v] ~= nil then foundcmd=true MainCMDS[v](split) break end end

					if foundcmd==false then
						if split[1] == "antivoidstuds" then
							if tonumber(split[2]) ~= nil then
								if tonumber(split[2]) < 5 then
									STUDS = 5
								else
									STUDS = tonumber(split[2])
								end
							end
							foundcmd=true
						elseif split[1] == "fallspeed" then
							if split[2] then
								if tonumber(split[2]) ~= nil then
									fallspeednumberset = tonumber(split[2])
									maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
									notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
								end 
							end
							foundcmd=true
						elseif split[2] == "fallspeed" then
							if split[3] then
								if tonumber(split[3]) ~= nil then
									fallspeednumberset = tonumber(split[3])
									maxfallingspeed = fallspeednumberset+(math.round(workspace.Gravity/3))
									notify("Set max falling speed to: "..tostring(maxfallingspeed).."!",Color3.fromRGB(255,255,0))
								end 
							end
							foundcmd=true
						elseif split[1] == "pushbind" then
							if split[2] then
								pushbind = split[2]
								notify("Push keybind has been set to "..split[2].."!",Color3.fromRGB(255,255,0))
							end
							foundcmd=true
						end
					end
					if foundcmd==false then
						if KohlsAdminDetected ==true then
							local var = runkohlsadmincommand(KuID,CMDBOX.Text)
							if var ==true then
								CMDBOX.Text = "Successfully sent command to server."
							end
						elseif HDAdminDetected==true then
							local var = runHDadmincommand(CMDBOX.Text)
							if var ==true then
								CMDBOX.Text = "Successfully sent command to server."
							end
						else

							CMDBOX.Text="Unknown or external command."
						end
					else
						CMDBOX.Text="Command executed successfully!"
					end
				else
					CMDBOX.Text="Command executed successfully!"
				end
			end
		end)

		while true do WAIT(1.25) if GDAT.Killed==true then fun:Disconnect() break end end
	end)


	task.spawn(function() -- RADAR SCRIPT






		if radarenabled==true then
			wait(0.2)

			local refreshrate = 0.1 local range = 500

			if plr.Character ~= nil then else refreshrate=0.05 range = 1000 end

			local ScreenGui = Instance.new("ScreenGui")ScreenGui.Name="RadarMap"
			local ViewportFrame = Instance.new("ViewportFrame")

			--Properties:

			local cam = Instance.new("Camera",ViewportFrame)
			if runservice:IsStudio() then ScreenGui.Parent = plr:WaitForChild("PlayerGui")else ScreenGui.Parent = game:GetService("CoreGui")end
			ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

			ViewportFrame.Active=true
			ViewportFrame.CurrentCamera = cam
			ViewportFrame.BackgroundColor3=Color3.new(0.00392157, 0.0470588, 0.247059)
			ViewportFrame.Parent = ScreenGui
			ViewportFrame.Size=UDim2.new(0.146, 0,0.238, 0)
			ViewportFrame.Position = UDim2.new(0.848, 0,0.011, 0)
			ViewportFrame.Draggable=true

			local cmds = {
				["//rate"] = function(speaker,args)
					if tonumber(args[1]) then
						if tonumber(args[1]) >= 5 then
							refreshrate=5
							notify("[Rader]: Successfully set refreshrate to ".."5".."!",Color3.new(0.898039, 0.101961, 1))
						else
							refreshrate=tonumber(args[1])
							notify("[Rader]: Successfully set refreshrate to "..args[1].."!",Color3.new(0.898039, 0.101961, 1))
						end
					else
						notify("[Rader]: An error occoured please make sure it is a number!",Color3.new(1,0,0))
					end
				end,
				["//range"] = function(speaker,args)
					if tonumber(args[1]) then
						if tonumber(args[1]) <= 4 then
							range=4
							notify("[Rader]: Successfully set range to ".."4".."!",Color3.new(0.898039, 0.101961, 1))
						else
							range=tonumber(args[1])
							notify("[Rader]: Successfully set range to "..args[1].."!",Color3.new(0.898039, 0.101961, 1))
						end
					else
						notify("[Rader]: An error occoured please make sure it is a number!",Color3.new(1,0,0))
					end
				end,
			}

			plr.Chatted:Connect(function(msg)local msgg = msg:lower()for i,v in pairs(cmds) do if msgg:split(" ")[1] == i then v(plr, {msg:gsub(msg:split(" ")[1],"")})break elseif msgg:split(" ")[2] == i then local newmsg = msg:gsub(msg:split(" ")[1],"")newmsg = newmsg:gsub(newmsg:split(" ")[2],"")v(plr, {newmsg})break end end end)

			local function createDot(player,pos)if player ~= nil then if ViewportFrame:FindFirstChild(player.Name.." dot") ~= nil then ViewportFrame[player.Name.." dot"].Position = pos ViewportFrame[player.Name.." dot"].BrickColor=player.TeamColor ViewportFrame[player.Name.." dot"].Size=Vector3.new(range/50+1,range/50+1,range/50+1)if ViewportFrame[player.Name.." dot"]:FindFirstChild("Color") ~= nil then ViewportFrame[player.Name.." dot"].Color = ViewportFrame[player.Name.." dot"]:FindFirstChild("Color").Value end else local part = Instance.new("Part",ViewportFrame)part.Name=player.Name.." dot"local c = Instance.new("Color3Value",part)c.Name="Color" if player.UserId==plr.UserId then c.Value=BrickColor.new("Hot pink").Color part.BrickColor=BrickColor.new("Hot pink") else c.Value=player.TeamColor.Color part.BrickColor=player.TeamColor end part.Material=Enum.Material.Neon part.Size=Vector3.new(range/50+1,range/50+1,range/50+1)part.Anchored=true part.CanCollide=false part.Transparency=0 part.Position=pos end end end

			while true do
				ViewportFrame.CurrentCamera=cam char = plr.Character
				if char ~= nil then local part = char:FindFirstChild("Head") or char:FindFirstChild("Torso") or char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("UpperTorso")if part ~= nil then cam.CFrame=(CFrame.new(part.Position)+Vector3.new(0,range,0))*CFrame.Angles(math.rad(-90),0,0)else cam.CFrame=(CFrame.new(workspace.CurrentCamera.CFrame.Position)+Vector3.new(0,range,0))*CFrame.Angles(math.rad(-90),0,0)end else cam.CFrame=(CFrame.new(workspace.CurrentCamera.CFrame.Position)+Vector3.new(0,range,0))*CFrame.Angles(math.rad(-90),0,0)end
				for i,v in pairs(Players:GetPlayers()) do if v.Character ~= nil then local part = v.Character:FindFirstChild("Head") or v.Character:FindFirstChild("Torso") or v.Character:FindFirstChild("HumanoidRootPart") or v.Character:FindFirstChild("UpperTorso")if part ~= nil then createDot(v,part.Position)end else if v.Name == plr.Name then createDot(v,workspace.CurrentCamera.CFrame.Position)end end end
				WAIT(refreshrate)
				for i,v in pairs(Players:GetPlayers()) do if v.Character ~= nil then local part = v.Character:FindFirstChild("Head") or v.Character:FindFirstChild("Torso") or v.Character:FindFirstChild("HumanoidRootPart") or v.Character:FindFirstChild("UpperTorso")if part ~= nil then createDot(v,part.Position)end end end
				for i,v in pairs(ViewportFrame:GetChildren()) do if v.ClassName == "Part" then v:Destroy()end end
				WAIT(0.015)
			end
		end








	end)



	local function Humanoidtouchedevent(Part)
		if Part.CanCollide==true then
			local namecheck = string.lower(Part.Name)
			if Part.Parent.ClassName == "Tool" or Part.Parent.ClassName == "Accessory" or Part.Parent.ClassName == "Hat" then Part.CanCollide=false end
			if namecheck:match("handle") or namecheck:match("root") then Part.CanCollide=false end
			if not Part:GetAttribute("Hastouch") then
				Part:SetAttribute("Hastouch","")
				humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
				if humanoid ~= nil then
					if humanoid:GetState() == Enum.HumanoidStateType.Dead then
					else
						humanoid = nil
						if Part.Parent ~= nil then
							if Part.Parent.Parent ~= nil then
								humanoid = Part:FindFirstChildOfClass("Humanoid") or Part.Parent:FindFirstChildOfClass("Humanoid") or Part.Parent.Parent:FindFirstChildOfClass("Humanoid")
							else
								humanoid = Part:FindFirstChildOfClass("Humanoid") or Part.Parent:FindFirstChildOfClass("Humanoid")
							end
						else
							humanoid = Part:FindFirstChildOfClass("Humanoid")
						end
						if humanoid ~= nil then
							Part.Velocity=Vector3.new(0,0,0)
							namecheck = string.lower(Part.Name)
							if namecheck:match("torso") or namecheck:match("root") or namecheck:match("leg") or namecheck:match("arm") or namecheck:match("hand") or namecheck:match("foot") then
								for i,v in pairs(plr.Character:GetChildren()) do
									if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
										namecheck = string.lower(v.Name)
										if namecheck:match("torso") or namecheck:match("leg") or namecheck:match("arm") or namecheck:match("hand") or namecheck:match("foot") or namecheck:match("root") then
											CreateNCgroup(v,Part,NoCollisionsEnabled)
										else v.CanCollide=false
										end
									end
								end
							else Part.CanCollide=false
							end
						else
							if Part.Size.Magnitude < 450 then
								if Part.Velocity.Magnitude>500 then
									Part.Velocity=Vector3.new(0,0,0)
								end
								if Part.AssemblyAngularVelocity.Magnitude>100 then
									Part.AssemblyAngularVelocity=Vector3.new(0,0,0)
								end
								namecheck = string.lower(Part.Name)
								if namecheck:match("torso") or namecheck:match("leg") or namecheck:match("arm") or namecheck:match("hand") or namecheck:match("foot") or namecheck:match("root") then
									task.spawn(function()
										for i=200,0,-1 do
											Part.CanCollide=false
											runservice.Stepped:Wait()
										end
									end)
									Part.CanCollide=false
									for i,v in pairs(plr.Character:GetChildren()) do
										if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
											namecheck = string.lower(v.Name)
											if namecheck:match("torso") or namecheck:match("leg") or namecheck:match("arm") or namecheck:match("hand") or namecheck:match("foot") or namecheck:match("root") then
												CreateNCgroup(v,Part,NoCollisionsEnabled)
											else v.CanCollide=false
											end
										end
									end
								end
							end
						end
					end
				end
				WAIT(3)
				Part:SetAttribute("Hastouch",nil)
			end
		end
	end


	if plr.Character ~= nil then
		for i,v in pairs(plr.Character:GetDescendants()) do
			if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
				partname = string.lower(v.Name)
				if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then
				else v.CanCollide=false
				end
			elseif v.ClassName == "Humanoid" then v.Touched:Connect(Humanoidtouchedevent)
			end
		end

		plr.Character.DescendantAdded:Connect(function(Part)
			if Part.ClassName:match("Part") then
				if Part.ClassName:match("Emit") then return end
				partname = string.lower(Part.Name)
				if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then
				else Part.CanCollide=false
				end
			end
		end)
		plr.Character.DescendantRemoving:Connect(function(Part)if Part.ClassName:match("Part") then if Part.ClassName:match("Emit") then return end Part.CanCollide=false end end)
	end








	Players.PlayerAdded:Connect(function(player)
		pcall(function()
			task.spawn(function()
				if not Friends[player.UserId] then
					if player:IsFriendsWith(plr.UserId) then
						table.insert(Friends,player.UserId)
					end
				end
			end)
		end)
		for i,v in pairs(GDAT.GameSettings["UserIds"]) do if player.UserId == v then YouhaveanAltInSameServer=true end end
		player.CharacterAdded:Connect(function(char)
			local childadded,descadded,descremovin,changed = nil,nil,nil,nil
			if GameInfo ~= nil then
				if GameInfo.Name:match("Murder") then
					local humanoid = char:FindFirstChildOfClass("Humanoid")
					repeat  WAIT(0.01) if not char:IsDescendantOf(workspace) then break end humanoid = char:FindFirstChildOfClass("Humanoid") until humanoid ~= nil
					humanoid.HealthChanged:Connect(function()
						if humanoid.Health <=0 then
							humanoid.Health=0.01
						end
					end)
				end
			end
			childadded =char.ChildAdded:Connect(function(obj)
				if obj.ClassName == "Tool" then if antivoidenabled==true then if obj:FindFirstChild("Handle") ~= nil then if #obj.Handle:GetJoints()>1 then antivoid_bring(obj) end end end
				elseif obj.ClassName == "Model" and string.lower(obj.Name):match("trap") then 
					game:GetService("Debris"):AddItem(obj,0.05) 
					if obj:FindFirstChild("Trigger") ~= nil then obj:FindFirstChild("Trigger").CanTouch=false end
				end
			end)


			descadded= char.DescendantAdded:Connect(function(Part)if Part.ClassName:match("Part") then if Part.ClassName:match("Emit") then return end Part.CanCollide=false end end)
			descremovin= char.DescendantRemoving:Connect(function(Part)if Part.ClassName:match("Part") then if Part.ClassName:match("Emit") then return end Part.CanCollide=false end end)
			if not char:IsDescendantOf(game) then
				descadded:Disconnect()
				descremovin:Disconnect()
			else
				changed=char.Changed:Connect(function(a)
					if a == "Parent" then
						descadded:Disconnect()
						descremovin:Disconnect()
						changed:Disconnect()
					end
				end)
			end
		end)
	end)

	for a,player in pairs(Players:GetPlayers()) do
		if player.Name == plr.Name then


			task.spawn(function() -- error for no reason
				local char = player.Character
				if char ~= nil then
					local ffa = nil
					ffa = char.ChildAdded:Connect(function(obj)
						if obj.ClassName == "Tool" then
							if antivoidenabled==true then if obj:FindFirstChild("Handle") ~= nil then if #obj.Handle:GetJoints()>1 then antivoid_bring(obj) end end end
						end
					end)
					while true do WAIT(5) if not char:IsDescendantOf(game) then ffa:Disconnect() break end end
				end
			end)
			local ffa = nil
			ffa = player.CharacterAdded:Connect(function(char)
				if YouhaveanAltInSameServer==true then local foundanyaccount = false for x,z in pairs(Players:GetPlayers()) do if z.Name == plr.Name then else for i,v in pairs(GDAT.GameSettings["UserIds"]) do if player.UserId == v then  foundanyaccount=true end  end end end if foundanyaccount==false then YouhaveanAltInSameServer=false end end
				runOnCharAddedEvent(char)
				char.ChildAdded:Connect(function(obj)
					if obj.ClassName == "Tool" then if antivoidenabled==true then if obj:FindFirstChild("Handle") ~= nil then if #obj.Handle:GetJoints()>1 then antivoid_bring(obj) end end end
					elseif obj.ClassName == "Humanoid" then obj.Touched:Connect(Humanoidtouchedevent)
					end
				end)

				for i,v in pairs(char:GetDescendants()) do
					runservice.Stepped:Wait()
					if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
						partname = string.lower(v.Name)
						if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then
						else v.CanCollide=false
						end
					end
				end

				char.DescendantAdded:Connect(function(Part)if Part.ClassName:match("Part") then if Part.ClassName:match("Emit") then return end partname = string.lower(Part.Name) if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then else Part.CanCollide=false end end end)
				char.DescendantRemoving:Connect(function(Part)if Part.ClassName:match("Part") then if Part.ClassName:match("Emit") then return end Part.CanCollide=false end end)
				local humanoid = char:FindFirstChildOfClass("Humanoid")
				repeat WAIT()humanoid = char:FindFirstChildOfClass("Humanoid")until humanoid ~= nil

				if humanoid ~= nil then local hev = nil hev = humanoid.Touched:Connect(Humanoidtouchedevent) task.spawn(function() while true do WAIT(1) if not humanoid:IsDescendantOf(game) then hev:Disconnect() break end end end)  end
			end)
			task.spawn(function()while true do WAIT(5) if not player:IsDescendantOf(game) then ffa:Disconnect() break end end end)	
		else
			task.spawn(function()WAIT(3)--[[Make sure the data is loaded]]for i,v in pairs(GDAT.GameSettings["UserIds"]) do if player.UserId == v then YouhaveanAltInSameServer=true end end end)
			if player.Character ~= nil then player.Character.DescendantRemoving:Connect(function(obj)if obj.ClassName:match("Part") then if obj.ClassName:match("Emit") then return end obj.CanCollide=false end end)end


			if player.Character ~= nil then
				if GameInfo ~= nil then
					if GameInfo.Name:match("Murder") then
						repeat  WAIT(0.01) if not player.Character:IsDescendantOf(workspace) then break end until player.Character:FindFirstChildOfClass("Humanoid") ~= nil
						if not player.Character:FindFirstChildOfClass("Humanoid") then return end
						local hpfunc = nil
						hpfunc = player.Character:FindFirstChildOfClass("Humanoid").HealthChanged:Connect(function()if player.Character:FindFirstChildOfClass("Humanoid"):GetState() == Enum.HumanoidStateType.Dead then hpfunc:Disconnect() return end if player.Character:FindFirstChildOfClass("Humanoid").Health <=0 then player.Character:FindFirstChildOfClass("Humanoid").Health=0.001 end end)
					end
				end
				player.Character.DescendantAdded:Connect(function(obj)if obj.ClassName:match("Part") then if obj.ClassName:match("Emit") then return end if NoCollisionsEnabled==true then obj.Velocity=Vector3.new(0,0,0) obj.CanCollide=false end end end)
			end
			local ffa = nil
			ffa = player.CharacterAdded:Connect(function(char)
				local descadded,descremovin,changed = nil,nil,nil
				if GameInfo ~= nil then
					if GameInfo.Name:match("Murder") then
						repeat  WAIT(0.01) if not char:IsDescendantOf(workspace) then break end until char:FindFirstChildOfClass("Humanoid") ~= nil
						if not char:FindFirstChildOfClass("Humanoid") then return end
						local hpfunc = nil
						hpfunc = char:FindFirstChildOfClass("Humanoid").HealthChanged:Connect(function()if char:FindFirstChildOfClass("Humanoid"):GetState() == Enum.HumanoidStateType.Dead then hpfunc:Disconnect() return end if char:FindFirstChildOfClass("Humanoid").Health <=0 then char:FindFirstChildOfClass("Humanoid").Health=0.001 end end)
					end
				end

				descadded= char.DescendantAdded:Connect(function(obj)
					if GameInfo ~= nil then
						if string.lower(GameInfo.Name):match("murder mystery") then
							if obj.ClassName == "Model" and string.lower(obj.Name):match("trap") then
								game:GetService("Debris"):AddItem(obj,0.05) 
								if obj:FindFirstChild("Trigger") ~= nil then obj:FindFirstChild("Trigger").CanTouch=false end
							end
						end
					end
					if obj.ClassName:match("Part") then if obj.ClassName:match("Emit") then return end
						partname = string.lower(obj.Name)
						if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then
						else obj.CanCollide=false
						end
					end
				end)
				descremovin= char.DescendantRemoving:Connect(function(obj)if obj.ClassName:match("Part") then if obj.ClassName:match("Emit") then return end obj.CanCollide=false end end)
				for i,v in pairs(char:GetDescendants()) do
					if v.ClassName:match("Part") then if v.ClassName:match("Emit") then continue end
						partname = string.lower(v.Name)
						if partname:match("torso") or partname:match("arm") or partname:match("leg") or partname:match("foot") or partname:match("hand") then
						else v.CanCollide=false
						end
					end
				end

				if not char:IsDescendantOf(game) then
					if descadded ~= nil then descadded:Disconnect()descadded=nil end
					if descremovin ~= nil then descremovin:Disconnect()descremovin=nil end
				else
					changed=char.Changed:Connect(function(a)
						if a == "Parent" then
							if descadded ~= nil then descadded:Disconnect()descadded=nil end
							if descremovin ~= nil then descremovin:Disconnect()descremovin=nil end
							changed:Disconnect()
						end
					end)
				end
			end)
			task.spawn(function()while true do WAIT(5) if not player:IsDescendantOf(game) then ffa:Disconnect() break end end end)
		end
	end

	task.spawn(function() runOnStartUp() if plr.Character ~= nil then runOnCharAddedEvent(plr.Character) end end)



	if runservice:IsStudio() then
		IngameCMDS = {
			["say"] = function(split,Admin)
				notify(Admin.Name.." made you say this!",Color3.fromRGB(255,0,0))
				textchatservice.TextChannels.RBXGeneral:SendAsync(split)
			end,
			["reset"] = function(split,Admin)
				notify(Admin.Name.." made you reset!",Color3.fromRGB(255,0,0))
				if plr.Character == nil then return end
				if plr.Character:FindFirstChild("Humanoid") == nil then return end
				plr.Character.Humanoid.Health=0
			end,
			["bringme"] = function(split,Admin)
				notify(Admin.Name.." teleported you to them!",Color3.fromRGB(255,255,0))
				plr.Character.HumanoidRootPart.CFrame = Players[Admin.Name].Character.HumanoidRootPart.CFrame+Vector3.new(math.random(-4,4),1,math.random(-4,4))
			end,
		}
		AllowedAdminCommands = {"say","reset","bringme"}
	end

	task.spawn(function()
		for i=70,0,-1 do
			if replicatedstorage:FindFirstChild("HDAdminClient") ~= nil then
				if replicatedstorage.HDAdminClient:FindFirstChild("Signals") ~= nil then
					if replicatedstorage.HDAdminClient.Signals:FindFirstChild("RequestCommand") ~= nil then
						if not HDAdminDetected then
							HDAdminDetected=true
							notify("Warning! HD Admin detected in this game.",Color3.new(1,1,0))
							HRemoteFunc=replicatedstorage.HDAdminClient.Signals:FindFirstChild("RequestCommand")
						end
					end
				end
			end

			if plr:FindFirstChild("KCClr") ~= nil then
				if plr:FindFirstChild("KTrail") then
					if plr:FindFirstChild("KHat") then
						if plr:FindFirstChild("KShine") then
							if plr:FindFirstChild("KDonor") then
								if not KohlsAdminDetected then
									KohlsAdminDetected=true
									notify("Warning! Kohls Admin detected in this game.",Color3.new(1,1,0))
								end
							end
						end
					end
				end
			end
			if HDAdminDetected and KohlsAdminDetected then break end
			WAIT(0.1)	
		end
		if HDAdminDetected ==true then
			print("HDAdmin found, Initializing...")
			GDAT.HEvent = HRemoteFunc
			print("Loaded! Use GDAT.HEvent to get event")

		end

		if KohlsAdminDetected==true then

			print("Admin found, Initializing...")

			GDAT.ClientEvent=nil
			GDAT.KuID = ""
			for i,v in pairs(replicatedstorage:GetChildren()) do
				if v.Name:match("b") then
					KRemoteEvent=v
				end
			end

			if GDAT.ClientEvent then GDAT.ClientEvent:Disconnect()GDAT.ClientEvent=nil end

			GDAT.ClientEvent = KRemoteEvent.OnClientEvent:Connect(function(a,b)
				if a == "KuID" then
					GDAT.KuID = b[1]
					KuID = b[1]
				end
			end)

			WAIT(1)
			KRemoteEvent:FireServer("KuID")

			repeat  WAIT(0.5)

			until #GDAT.KuID > 0 or GDAT.ClientEvent == nil
			WAIT(0.5)

			print("Ready! KuID is:",GDAT.KuID,"Use GDAT.KuID to use value")



		else
			if HDAdminDetected ==true then else
				print("Admin not found.")
			end
		end
	end)



	-- Antilag

	local isgameloaded = false
	task.spawn(function()
		isgameloaded = game:IsLoaded()
		if not isgameloaded then
			repeat wait(1)
			until game:IsLoaded()
			wait(8)
			isgameloaded=true
		end
	end)

	local FPS = game:GetService("Stats").Workspace.Heartbeat:GetValue()
	task.spawn(function()
		while true do
			FPS = math.round(game:GetService("Stats").Workspace.Heartbeat:GetValue())
			WAIT(0.5)
		end
	end)

	repeat  WAIT(0.5) until GameInfo ~= nil

	recheckingamecmds(GameInfo.Name)

	if string.lower(GameInfo.Name):match("mine") or minecraftremotes==true then pushbind = "f" end

	if string.lower(GameInfo.Name):match("simulator") or string.lower(GameInfo.Name):match("mine") or string.lower(GameInfo.Name):match("zombie") or string.lower(GameInfo.Name):match("murder mystery") or string.lower(GameInfo.Name):match("tycoon") or string.lower(GameInfo.Name):match("doors") then else
		local adf = nil
		local oldparents = {}
		adf = workspace.DescendantAdded:Connect(function(Object)
			if GDAT.Killed==true then adf:Disconnect()return end
			if isgameloaded then
				if FPS <= 15 then
					if FPS <= 8 then
						runservice.Stepped:Wait()
						if Players:FindFirstChild(Object.Name) or Players:FindFirstChild(Object.Parent.Name) ~= nil then return
						else
							if Object:GetFullName():match(plr.Name) then return end
							Object:Destroy()
							return
						end			
					end
					task.spawn(function()
						oldparents[Object] = Object.Parent
						runservice.Stepped:Wait()
						Object.Parent=nil
						WAIT(2)
						Object.Parent = oldparents[Object]
						oldparents[Object]=nil
					end)
				end
			end
			if Object:IsDescendantOf(plr.Character) then else
				local Part,Distance = workspace:FindFirstChildWhichIsA("Camera"), nil
				if plr ~= nil then
					Distance = plr.CameraMaxZoomDistance+30
				else
					Part = workspace:FindFirstChildWhichIsA("Camera")Distance = workspace:FindFirstChildWhichIsA("Camera")
				end
				if Object.ClassName == "Explosion" then
					Object.TimeScale=0
					if (Object.Position-Part.CFrame.Position).Magnitude <= Distance then
						Object.Position=Vector3.new(0,workspace.FallenPartsDestroyHeight-100,0)
						Object.BlastRadius=0
						Object.BlastPressure=0
						game:GetService("Debris"):AddItem(Object,0)
					end
				elseif Object.ClassName == "Sound" then
					WAIT(5)
					if Object.TimeLength <=0 then Object:Destroy()end
				elseif Object.ClassName == "ParticleEmitter" then
					if Object.Parent ~= nil then
						if Object.Parent.ClassName:match("Part") then
							if Object.Parent.ClassName:match("Emit") then return end
							if Object.Parent.Name == "Head" then return end
							if not Object.Parent:IsDescendantOf(plr.Character) then
								if (Object.Parent.Position-Part.CFrame.Position).Magnitude <= Distance then
									Object.Parent.Position=Vector3.new(0,workspace.FallenPartsDestroyHeight-150,0)
									game:GetService("Debris"):AddItem(Object,0)
								end
							end
						end
					end
				end

			end

		end)

		WAIT(1.5)
		for i,v in pairs(workspace:GetDescendants()) do if v.ClassName == "Sound" then if #v.SoundId >0 then task.spawn(function()WAIT(5)if v.TimeLength<=0 then v:Destroy() end end)end end if i/200 == math.round(i/200) then WAIT(0.25) end end

	end


end
